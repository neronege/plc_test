<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwinCAT.Ads</name>
    </assembly>
    <members>
        <member name="T:TwinCAT.Ads.AdsClient">
            <summary>
            ADS Client / ADS Communication object.
            </summary>
            <remarks>
            The class <see cref="T:TwinCAT.Ads.AdsClient"/> enables synchronous/asynchronous access to data of an ADS Device.
            </remarks>
            <example>
            The following sample shows how to instantiate and use the <see cref="T:TwinCAT.Ads.AdsClient"/> class.
            <code language="C#" title="AdsClient Demo (async)" source="..\..\Samples\Sample.Ads.AdsClientCore\AdsClientAsync.cs" region="CODE_SAMPLE"/>
            <code language="C#" title="AdsClient Demo (sync)" source="..\..\Samples\Sample.Ads.AdsClientCore\AdsClient.cs" region="CODE_SAMPLE"/>
            <code language="C#" title="Argument Parser" source="..\..\Samples\Sample.Ads.AdsClientCore\ArgParser.cs" region="CODE_SAMPLE"/>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC directly from the <see cref="T:TwinCAT.Ads.AdsClient"/> class.
            <code language="C#" title="RPC Call Example (async)" source="..\..\Samples\Sample.Ads.AdsClientCore\RpcCallAsync.cs" region="CODE_SAMPLE_RPCCALL" />
            <code language="C#" title="RPC Call Example (sync)" source="..\..\Samples\Sample.Ads.AdsClientCore\RpcCall.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.#ctor(TwinCAT.ISession,TwinCAT.Ads.AdsClientSettings,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsClient"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="settings">The settings.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsClient"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.#ctor(TwinCAT.Ads.AdsClientSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsClient"/> class with the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.#ctor(TwinCAT.ISession,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsClient"/> class bound to a session.
            </summary>
            <param name="session">The session.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsClient"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.AdsClient"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.Logger">
            <summary>
            Gets the logger inteface.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._server">
            <summary>
            Private AdsServer.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._disposed">
            <summary>
            The disposed indicator.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._sync">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._notificationReceiver">
            <summary>
            The notification receiver
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._handleCache">
            <summary>
            The symbol table
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsHandleCacheProvider#GetHandleCache">
            <summary>
            Gets the symbol table.
            </summary>
            <returns>SymbolTable.</returns>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._handleBags">
            <summary>
            List of Handle bags.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsHandleCacheProvider#CreateHandleBag(System.String[],System.Boolean)">
            <summary>
            Creates a handle bag from symbol paths.
            </summary>
            <param name="instancePath">A list of symbol paths.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <returns>A handle bag that can be disposed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsHandleCacheProvider#CreateNotificationHandleBag(TwinCAT.TypeSystem.ISymbol[],System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates a notification handle bag form the specified symbols.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">The user data.</param>
            <returns>A handle bag that can be disposed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsHandleCacheProvider#CreateNotificationExHandleBag(System.Collections.Generic.IList{TwinCAT.TypeSystem.AnySymbolSpecifier},System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates the notification ex handle bag.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <returns>IDisposableHandleBag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsHandleCacheProvider#UnregisterHandleBag(TwinCAT.Ads.Internal.IDisposableHandleBag)">
            <summary>
            Unregisters the handle bag from this <see cref="T:TwinCAT.Ads.IAdsHandleTableProvider" />.
            </summary>
            <param name="bag">The handle bag.</param>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.s_id">
            <summary>
            Static identifier counter of this <see cref="T:TwinCAT.Ads.AdsClient"/>.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._id">
            <summary>
            <see cref="T:TwinCAT.Ads.AdsClient"/> identifier
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.Id">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AdsClient"/> Identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.Name">
            <summary>
            Gets the Name of the <see cref="T:TwinCAT.Ads.AdsClient"/> object.
            </summary>
            <value>The name.</value>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.ConnectionStateChanged">
            <summary>
            Occurs when the connection state has been changed.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnConnectionStateChanged(TwinCAT.ConnectionState,TwinCAT.ConnectionState)">
            <summary>
            Called when the <see cref="P:TwinCAT.Ads.AdsClient.ConnectionState" /> of the <see cref="T:TwinCAT.Ads.AdsClient" /> has changed.
            </summary>
            <param name="newState">The new state.</param>
            <param name="oldState">The old state.</param>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._target">
            <summary>
            The actual Target <see cref="T:TwinCAT.Ads.AmsAddress"/>.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._isConnected">
            <summary>
            Indicates that the <see cref="T:TwinCAT.Ads.AdsClient"/> is connected.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ConnectAsync(TwinCAT.Ads.AmsAddress,System.Threading.CancellationToken)">
            <summary>
            Connects to the target address as an asynchronous operation.
            </summary>
            <returns>Returns a task object that represents the <see cref="M:TwinCAT.Ads.AdsClient.ConnectAndWaitAsync(TwinCAT.Ads.AmsAddress,System.Threading.CancellationToken)"/> operation which returns an <see cref="T:TwinCAT.Ads.AdsErrorCode"/>" as result..</returns>
            <remarks>The connection is hold until a cancel is requested, which means the method returns after cancelling/disconnecting.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ConnectAndWaitAsync(TwinCAT.Ads.AmsAddress,System.Threading.CancellationToken)">
            <summary>
            Connects to the target address and waits until the <see cref="T:TwinCAT.Ads.AdsClient"/> is disconnected asynchronously.
            </summary>
            <param name="address">The target address.</param>
            <param name="cancel">Cancellation Token.</param>
            <returns>Returns a task object that represents the <see cref="M:TwinCAT.Ads.AdsClient.ConnectAndWaitAsync(TwinCAT.Ads.AmsAddress,System.Threading.CancellationToken)"/> operation as result.</returns>
            <remarks>This method is used for scenarios, where the <see cref="T:TwinCAT.Ads.AdsClient"/> disconnects from other code asynchronously.
            When this method returns, the connection is already terminated and only additional cleanup code should be processed.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ConnectServer">
            <summary>
            Connect this ADS server to the local ADS router.
            <exception cref="T:TwinCAT.Ads.Server.AdsServerException">Thrown if the connect call fails.</exception>
            </summary>
            <returns>System.UInt32.</returns>
            <exception cref="T:System.Exception">Target not specified!</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Connect(TwinCAT.Ads.AmsAddress)">
            <summary>
            Connects the target
            </summary>
            <param name="address">The address.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.IsConnected">
            <summary>
            Gets a value indicating whether the local ADS port was opened successfully. It
            does not indicate if the target port is available. Use the method ReadState to
            determine if the target port is available.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Connect(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Connects to the target ADS Device.
            </summary>
            <param name="netId">The AmsNetId of the target device.</param>
            <param name="port">The Ams Port number on the target device to connect to.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Connect(System.Int32)">
            <summary>
            Connects to the local target ADS Device.
            </summary>
            <param name="port">The port number of the local ADS target device to connect to.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Connect(TwinCAT.Ads.AmsPort)">
            <summary>
            Connects to the local target ADS Device.
            </summary>
            <param name="port">The port number of the local ADS target device to connect to.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Connect(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsPort)">
            <summary>
            Connects to the target ADS Device.
            </summary>
            <param name="netId">The <see cref="T:TwinCAT.Ads.AmsNetId" /> of the ADS target device specified as string.</param>
            <param name="port">The port number of the ADS target device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the target ADS Device.
            </summary>
            <param name="netId">The <see cref="T:TwinCAT.Ads.AmsNetId" /> of the ADS target device specified as string.</param>
            <param name="port">The port number of the ADS target device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnConnected">
            <summary>
            Handler function that is called, when the <see cref="T:TwinCAT.Ads.AdsClient"/> is connected.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddEventNotifications">
            <summary>
            Adds the event notifications.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Disconnect">
            <summary>
            Disconnects this <see cref="T:TwinCAT.Ads.AdsClient"/> from the local ADS router.
            </summary>
            <returns><c>true</c> if disconnected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnDisconnect">
            <summary>
            Called when the <see cref="T:TwinCAT.Ads.AdsClient" /> is about to be disconnected.
            </summary>
            <returns><c>true</c> if disconnected, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.Address">
            <summary>
            Gets the target <see cref="T:TwinCAT.Ads.AmsAddress" /> of of the established ADS connection (Destination side).
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.ClientAddress">
            <summary>
            Get the client <see cref="T:TwinCAT.Ads.AmsAddress" /> (Source side).
            </summary>
            <value>The client address.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ThrowIfFailed(System.Func{TwinCAT.Ads.ResultAds},System.String)">
            <summary>
            Throws an <see cref="T:TwinCAT.Ads.AdsErrorException"/> with the specified errorMessage, if the return value of the Function indicates an error.
            </summary>
            <param name="action">The action.</param>
            <param name="errorMessage">The error message.</param>
            <exception cref="T:TwinCAT.Ads.AdsErrorException"></exception>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.AdsSumNotification">
            <summary>
            Occurs when Notifications are send (bundled notifications)
            </summary>
            <remarks>As an optimization, this event receives all ADS Notifications that occurred at one
            point in time together. As consequence, the overhead of handler code is reduced, what can be important
            if notifications are triggered in a high frequency and the event has to be synchronized to the UI thread
            context. Because multiple notifications are bound together, less thread synchronization is necessary.
            The <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> and <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/> events shouldn't be used when SumNotifications are registered, because they
            have an performance side effect to this <see cref="E:TwinCAT.Ads.AdsClient.AdsSumNotification"/> event. The full performance is reached only, when all notifications are handled 
            on this event.
            </remarks>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.AdsClient.AdsSumNotification"/> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\03_ADS.NET_EventReading\Form1.cs" region="CODE_SAMPLE_SUMNOTIFICATIONS_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications"/>
            </example>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.AdsNotificationsInvalidated">
            <summary>
            Occurs when Notification Unregistrations / Invalidates are received from the AdsServer
            </summary>
            <remarks>Some ADS servers are sending 0-size notifications, when the Notification handle is not valid anymore.
            If received, this event will be triggered, to notify any consumers to invalidate the notification handles.
            One example for these sort of invalidation is, if ADS Notifications are already registered at the PLC ADS Server, and the PLC Control downloads a new program. All registered 
            notification handles are invalidated!</remarks>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.AdsNotification">
            <summary>
            Occurs when the ADS device sends a notification to the client.
            </summary>
            <remarks>The Event Argument contains the raw data value of the notification, not marshaled to .NET types.</remarks>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\03_ADS.NET_EventReading\Form1.cs" region="CODE_SAMPLE_NOTIFICATIONS_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications"/>
            </example>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.AdsNotificationError">
            <summary>
            Occurs when a exception has occurred during notification management.
            </summary>
            <remarks>
            The occurrence of this event can have two different reasons:
            <list type="number">
            <item>Indicates an internal error occurred during Notification management.</item>
            <item>The registered notification becomes invalid on the server, eg. after a PLC Download / Online Change. If the ADS Server detects that the (still registered) Notification Sender is getting invalid, it sends 
            an error notification so that the client will be informed about detached notifications. The event arguments contains the <see cref="T:TwinCAT.Ads.AdsInvalidNotificationException"/> which describes the invalid notification handle
            by its <see cref="P:TwinCAT.Ads.AdsInvalidNotificationException.Handle"/> property.</item>
            </list>
            </remarks>
            <seealso cref="T:TwinCAT.Ads.AdsInvalidNotificationException"/>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.AdsNotificationEx">
            <summary>
            Occurs when the ADS devices sends a notification to the client.
            </summary>
            <remarks>The Notification event arguments marshals the data value automatically to the specified .NET Type with ANY_TYPE marshallers.
            </remarks>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\14_ADS.NET_ReadWriteAnyType\Form1.cs" region="CODE_READWRITEANYNOT_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications"/>
            </example>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._amsRouterNotificationEventHandlerDelegate">
            <summary>
            Router notification event handler delegate
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.RouterStateChanged">
            <summary>
            (Local) Router state changed event.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <remarks>This event indicates, that a changed event is received from the Local AmsRouter independant of the connected target address.
            A remote system RouterStateChanged event cannot be received at another system - it cannot traverse TwinCAT systems.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._adsStateChangedEventHandlerDelegate">
            <summary>
            ADS State changed handler delegate
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.AdsStateChanged">
            <summary>
            Occurs when the ADS state changes.
            </summary>
            <remarks>This works only for ports that support Notifications (e.g. Port 851 but not Port 10000).
            
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._stateChangedNotificationRegistered">
            <summary>
            StateChangedNotification registered indicator.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.unregisterStateChangedNotification(System.Int32)">
            <summary>
            Unregisters the state changed notification.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.RegisterAdsStateChangedAsync(System.EventHandler{TwinCAT.Ads.AdsStateChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers for <see cref="E:TwinCAT.Ads.AdsClient.AdsStateChanged"/> events as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to be registered for AdsStateChanged calls.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'RegisterAdsStateChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.UnregisterAdsStateChangedAsync(System.EventHandler{TwinCAT.Ads.AdsStateChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            unregister ads state changed as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to be unregistered.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UnregisterAdsStateChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._symbolVersionChangedDelegate">
            <summary>
            Delegate for <see cref="E:TwinCAT.Ads.AdsClient.AdsSymbolVersionChanged"/> events.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.AdsClient.AdsSymbolVersionChanged">
            <summary>
            Occurs when the symbol version has been changed changes.
            </summary>
            <remarks>This is the case when the connected ADS server restarts. This invalidates all actual opened
            symbol handles.
            The SymbolVersion counter doesn't trigger, when an online change is made on the PLC (ports 801, ..., 851 ...)</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.registerSymbolVersionChangedNotification(System.Int32)">
            <summary>
            Registers for the <see cref="E:TwinCAT.Ads.AdsClient.AdsSymbolVersionChanged"/> event.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.unregisterSymbolVersionChangedNotification(System.Int32)">
            <summary>
            Unregisters from the <see cref="E:TwinCAT.Ads.AdsClient.AdsSymbolVersionChanged"/> event.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.RegisterSymbolVersionChangedAsync(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers for an <see cref="E:TwinCAT.Ads.AdsClient.AdsSymbolVersionChanged"/> event as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to register.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'RegisterSymbolVersionChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.RegisterSymbolVersionChanged(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs})">
            <summary>
            Registers for an <see cref="E:TwinCAT.Ads.AdsClient.AdsSymbolVersionChanged" /> event as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to register.</param>
            <returns>A task that represents the asynchronous 'RegisterSymbolVersionChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.UnregisterSymbolVersionChangedAsync(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Unregisters from an <see cref="E:TwinCAT.Ads.AdsClient.AdsSymbolVersionChanged"/> event as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to unregister.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UnregisterSymbolVersionChangedAsync' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.UnregisterSymbolVersionChanged(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs})">
            <summary>
            Unregisters the symbol version changed.
            </summary>
            <param name="handler">The handler function to unregister.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._routerState">
            <summary>
            The actual <see cref="T:TwinCAT.Ads.AmsRouterState"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ams#IRouterNotificationReceiver#OnRouterNotification(TwinCAT.Ads.AmsRouterState)">
            <summary>
            Handler Function for a Router Notification.
            </summary>
            <param name="state">The route state.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#ISymbolVersionChangedReceiver#OnSymbolVersionChanged(TwinCAT.Ads.AdsSymbolVersionChangedEventArgs)">
            <summary>
            Handles the <see cref="E:SymbolVersionChanged" /> event.
            </summary>
            <param name="eventArgs">The <see cref="T:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#IStateChangedReceiver#OnAdsStateChanged(TwinCAT.Ads.AdsStateChangedEventArgs)">
            <summary>
            Handles the <see cref="E:AdsStateChanged" /> event.
            </summary>
            <param name="eventArgs">The <see cref="T:TwinCAT.Ads.AdsStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#INotificationReceiver#OnNotificationError(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Handler function for Notification errors.
            </summary>
            <param name="timeStamp">The time stamp.</param>
            <param name="notifications">The notifications.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#INotificationReceiver#OnNotificationError(System.Exception)">
            <summary>
            Handler function for Notification errors.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#INotificationReceiver#OnNotification(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Handler function Raw Notifications
            </summary>
            <param name="timeStamp">The time stamp.</param>
            <param name="notifications"></param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnAdsNotification(TwinCAT.Ads.Notification)">
            <summary>
            Called when [ads notification].
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnAdsNotificationEx(TwinCAT.Ads.Notification)">
            <summary>
            Called when [ads notification ex].
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnAdsSumNotifications(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Called when [ads sum notifications].
            </summary>
            <param name="timeStamp">The time stamp.</param>
            <param name="notifications">The notifications.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.IsLocal">
            <summary>
            Gets a value indicating whether the ADS client is connected to a ADS Server on the local
            computer.
            </summary>
            <value><c>true</c> if this instance is local; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._timeout">
            <summary>
            Cached timeout
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.Timeout">
            <summary>
            Sets the timeout for the ads communication. Unit is in ms.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnSetTimout(System.Int32)">
            <summary>
            Sets the Timeout internally.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._session">
            <summary>
            The session object.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.Session">
            <summary>
            Gets the session that initiated this <see cref="T:TwinCAT.IConnection" />
            </summary>
            <value>The session or NULL</value>
            <remarks>The Session can be null on standalone connections.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.ConnectionState">
            <summary>
            Gets the current Connection state of the <see cref="T:TwinCAT.IConnectionStateProvider" />
            </summary>
            <value>The state of the connection.</value>
            <Exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._interceptors">
            <summary>
            The interceptors
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.Interceptors">
            <summary>
            Gets the interceptors.
            </summary>
            <value>The interceptors.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadDeviceInfo">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <returns>DeviceInfo struct containing the name of the device and the version information.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadDeviceInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadDeviceState' operation. The <see cref="T:TwinCAT.Ads.ResultDeviceInfo" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultDeviceInfo.DeviceInfo"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadDeviceInfoSync">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <returns>A task that represents the asynchronous 'ReadDeviceState' operation. The <see cref="T:TwinCAT.Ads.ResultDeviceInfo" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultDeviceInfo.DeviceInfo" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.readAsync(System.UInt32,System.UInt32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Read data asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="length">The length.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultReadBytes&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadWriteAsync(System.UInt32,System.UInt32,System.Int32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read/Writes as asynchronous operation.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readLength">Length of the read.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultReadWriteBytes&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadWriteSync(System.UInt32,System.UInt32,System.Int32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Read/Writes as asynchronous operation.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readLength">Length of the read.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Task&lt;ResultReadWriteBytes&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Adds a device notification as an asynchronous operation.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="F:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" /> should always
            be called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotification(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> event.
            </summary>
            <param name="symbolPath">Symbol / Instance path of the ADS variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <returns>The notification handle.</returns>
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryAddDeviceNotification(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="notificationHandle">The notification handle.</param>
            <returns>The ADS ErrorCode.</returns>
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.TryDeleteDeviceNotification(System.UInt32)"/> should always
            be called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryDeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryAddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="notificationHandle">The notification handle</param>
            <returns>The ADS error code.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.TryDeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx" />
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationExAsync(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/> should always
            be called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationAsync(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/> should always
            be called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <returns>The notification handle.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotification" />
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationError"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive ('AnyType') types are allowed for the parameter <paramref name="type"/>.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <param name="args">Additional arguments for 'AnyType' types.</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotification(System.UInt32)">
            <summary>
            Deletes a registered notification.
            </summary>
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>/// 
            <param name="notificationHandle">Notification handle.</param>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteControlAsync(TwinCAT.Ads.AdsState,System.UInt16,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the state asynchronously
            </summary>
            <param name="adsState">State of the ads.</param>
            <param name="deviceState">State of the device.</param>
            <param name="writeData">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the 
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteControlSync(TwinCAT.Ads.AdsState,System.UInt16,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Write Control (synchronous)
            </summary>
            <param name="adsState">AdsState.</param>
            <param name="deviceState">DeviceState</param>
            <param name="writeData">Write data</param>
            <returns>ResultAds.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Close">
            <summary>
            Closes this <see cref="T:TwinCAT.Ads.AdsClient"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#IConnection#Connect">
            <summary>
            (Re)Connects the <see cref="T:TwinCAT.IConnection" /> when disconnected.
            </summary>
            <returns><c>true</c> if succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyString(System.UInt32,System.UInt32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads as string from a specified address.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="len">The string length to be read.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyStringAsync(System.UInt32,System.UInt32,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Reads a string from a specified address asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="len">The string length to be read.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyString(System.UInt32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string from the specified symbol/variable.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="len">The length.</param>
            <param name="encoding">The encoding.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyStringAsync(System.UInt32,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Reads a string asynchronously from the specified symbol/variable
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="len">The length.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read string
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyString(System.UInt32,System.UInt32,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyStringAsync(System.UInt32,System.UInt32,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyString(System.UInt32,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyString(System.String,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyStringAsync(System.UInt32,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyStringAsync(System.String,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny(System.UInt32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny``1(System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <returns>The value of the read symbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsResult``1(System.UInt32)">
            <summary>
            Reads any as result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="variableHandle">The variable handle.</param>
            <returns>TwinCAT.Ads.ResultValue&lt;T&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync``1(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Reads data synchronously from an ADS device.
            </summary>
            <remarks>
            As object types only primitive types are supported.
            </remarks>
            <typeparam name="T">The Type of the value to be read.</typeparam>
            <param name="variableHandle">The variable/symbol handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync``1(System.UInt32,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">Type of the object to be read</typeparam>
            <param name="variableHandle">The variable handle.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync``1(System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The asynchronous result.</returns>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync``1(System.UInt32,System.UInt32,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the result value.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsResult``1(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <exclude />
            <remarks>As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table"><listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader><item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description></item><item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item><item><term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny(System.UInt32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny``1(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny``1(System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The value of the read symbol.</returns>
            <remarks>As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table"><listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader><item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description></item><item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item><item><term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsResult``1(System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an result object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The result value object.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
            <exclude />
            <remarks>As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table"><listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader><item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description></item><item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item><item><term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny``1(System.UInt32,System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsResult``1(System.UInt32,System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an result object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <returns>The result object.</returns>
            <exclude />
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny(System.UInt32,System.UInt32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAny(System.UInt32,System.UInt32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table"><listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader><item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description></item><item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item><item><term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAny(System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsResult(System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <returns>ResultWrite.</returns>
            <exclude />
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAny(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsResult(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <returns>ResultWrite.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAny(System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <remarks>
            <list type="table">
            <listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader>
            <item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>.</description></item>
            <item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>.</item>
            <item><term>Array</term>args: Dimensions of Array as int[]</item>
            string : 
            string[] : 
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsResult(System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <returns>ResultWrite.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude />
            <remarks>As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table"><listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader><item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description></item><item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item><item><term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsync(System.UInt32,System.Object,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Writes an object asynchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks><list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite"/> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsync(System.UInt32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite"/> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.
            </returns>
            <remarks><list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAny(System.UInt32,System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <remarks>
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </remarks>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <remarks>
            <list type="table">
            <listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader>
            <item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>.</description></item>
            <item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>.</item>
            <item><term>Array</term>args: Dimensions of Array as int[]</item>
            string : 
            string[] : 
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsResult(System.UInt32,System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <returns>ResultWrite.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude />
            <remarks>If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.CreateVariableHandle(System.String)">
            <summary>
            Determines the Symbol handle by its instance path synchronously.
            </summary>
            <param name="symbolPath">SymbolName / InstancePath.</param>
            <returns>The symbols/variable handle</returns>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandle(System.String)"/> is the <see cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandle(System.UInt32)"/></remarks>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryCreateVariableHandle(System.String,System.UInt32@)"/> 
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.DeleteVariableHandle(System.UInt32)">
            <summary>
            Releases the specified symbol/variable handle synchronously.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <returns>The ADS error code.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandle(System.String)" />
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryDeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsClient.TryDeleteVariableHandle(System.UInt32)" /> is the <see cref="M:TwinCAT.Ads.AdsClient.TryCreateVariableHandle(System.String,System.UInt32@)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Read(System.UInt32,System.Memory{System.Byte})">
            <summary>
            Reads data synchronously from an ADS device and writes to the specified <paramref name="readBuffer"/>.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="readBuffer">The read buffer / data</param>
            <returns>Number of successfully returned data bytes.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryRead(System.UInt32,System.Memory{System.Byte},System.Int32@)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.ReadAsync(System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryRead(System.UInt32,System.Memory{System.Byte},System.Int32@)">
            <summary>
            Reads the value synchronously data of the symbol, that is represented by the variable handle into the <paramref name="readBuffer"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer/data</param>
            <param name="readBytes">Number of read bytes.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from that target.
            </summary>
            <param name="variableHandle">Variable handle.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Number of successfully returned data bytes.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.ReadWriteAsync(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines the Symbol handle by its instance path asynchronously.
            </summary>
            <param name="symbolPath">SymbolName / InstancePath.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'CreateVariableHandle' operation. The <see cref="T:TwinCAT.Ads.ResultHandle"/> parameter contains the variable handle 
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryCreateVariableHandle(System.String,System.UInt32@)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandle(System.String)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" /> is the <see cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Releases the specified symbol/variable handle asynchronously.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'DeleteVariableHandle' operation. The <see cref="T:TwinCAT.Ads.ResultAds"/> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" />
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryDeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandle(System.UInt32)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" /> is the <see cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryDeleteVariableHandle(System.UInt32)">
            <summary>
            Releases the specified symbol/variable handle synchronously.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <returns>The ADS error code.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryCreateVariableHandle(System.String,System.UInt32@)" />
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteVariableHandle(System.UInt32)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsClient.TryDeleteVariableHandle(System.UInt32)" /> is the <see cref="M:TwinCAT.Ads.AdsClient.TryCreateVariableHandle(System.String,System.UInt32@)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)">
            <summary>
            ReadWrites value data synchronously to/from the symbol represented by the <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer / read data.</param>
            <param name="writeBuffer">The write buffer / write data.</param>
            <param name="readBytes">Number of read bytes.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Write(System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="writeBuffer">The write buffer / value to be written</param>
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryWrite(System.UInt32,System.ReadOnlyMemory{System.Byte})"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.WriteAsync(System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Read(System.UInt32,System.UInt32,System.Memory{System.Byte})">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given <paramref name="readBuffer"/>
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">Memory location, where to read the data.</param>
            <returns>Number of successfully returned (read) data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Write(System.UInt32,System.UInt32)">
            <summary>
            Triggers a 'Write' call to the ADS device at the specified address.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.Write(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The data to write.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWrite(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The data buffer to be written.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadState">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <returns>The ADS statue and device status.</returns>
            <remarks>Not all ADS Servers support the State ADS Request.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadState(TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS status and the device status from an ADS server. Unlike the ReadState method this method does not call an exception on failure. Instead an AdsErrorCode is returned.
            If the return value is equal to AdsErrorCode.NoError the call was successful.
            </summary>
            <param name="stateInfo">The ADS statue and device status.</param>
            <returns><see cref="T:TwinCAT.Ads.AdsErrorCode" /> of the ADS read state call. Check for <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError" /> to see if call was successful.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>Not all ADS Servers support the State ADS Request</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadStateAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> parameter contains the state
            (<see cref="P:TwinCAT.Ads.ResultReadDeviceState.State" />) as long as the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <remarks>Not all ADS Servers support the State ADS Request</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadStateSync">
            <summary>
            Reads the ADS status and the device status from an ADS server (synchronous)
            </summary>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> parameter contains the state
            (<see cref="P:TwinCAT.Ads.ResultReadDeviceState.State" />) as long as the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteControlAsync(TwinCAT.Ads.AdsState,System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Changes the ADS status and device status of the ADS server asynchronously.
            </summary>
            <param name="adsState">The ADS state.</param>
            <param name="deviceState">The device state.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteControl' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryCreateVariableHandle(System.String,System.UInt32@)">
            <summary>
            Determines the Symbol handle by its instance path synchronously.
            </summary>
            <param name="symbolPath">SymbolName / InstancePath.</param>
            <param name="variableHandle">The symbols handle.</param>
            <returns>The ADS error code.</returns>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsClient.TryCreateVariableHandle(System.String,System.UInt32@)"/> is the <see cref="M:TwinCAT.Ads.AdsClient.TryDeleteVariableHandle(System.UInt32)"/></remarks>
            <seealso cref="M:TwinCAT.Ads.AdsClient.TryDeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:TwinCAT.Ads.AdsClient.CreateVariableHandle(System.String)"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.OnBeforeDisconnect">
            <summary>
            Called when before the <see cref="T:TwinCAT.Ads.AdsClient"/> is disconnected.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.SetCommunicationInterceptor(TwinCAT.Ads.CommunicationInterceptors)">
            <summary>
            Sets additional <see cref="T:TwinCAT.Ads.CommunicationInterceptor">Communication Interceptors.</see>.
            </summary>
            <param name="interceptors">The interceptors.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsInjectAcceptor#InjectError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Injects an <see cref="T:TwinCAT.Ads.AdsErrorCode" /> to the <see cref="T:TwinCAT.Ads.Internal.IInterceptedClient" />.
            </summary>
            <param name="error">The error.</param>
            <returns>The accepted <see cref="T:TwinCAT.Ads.AdsErrorCode" />.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryResurrect(TwinCAT.AdsException@)">
            <summary>
            Resurrects the connection
            </summary>
            <param name="error">The error.</param>
            <returns><c>true</c> if resurrection was accepted, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:TwinCAT.Ads.AdsClient.AccessMethods">
            <summary>
            Enum SumAccessMode
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.IndexGroupIndexOffset">
            <summary>
            Access by IndexGroup / IndexOffset
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.ValueByHandle">
            <summary>
            Accesses a value by handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.ValueByName">
            <summary>
            Access a value by name
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.AcquireHandleByName">
            <summary>
            Acquire handle by name
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.ReleaseHandle">
            <summary>
            Release handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.Mask_All">
            <summary>
            All Access methods are allowed
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient.AccessMethods.Mask_Symbolic">
            <summary>
            Only Symbolic access is allowed (No Processimage IndexGroup/IndexOffset)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.getAccessMethod(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Gets the access method for the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously and returns it as an object. Strings and all primitive data types (UInt32, Int32, Bool etc.) are supported.
            Arrays and structures cannot be read.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <param name="cancel">The cancel token.</param>
            <returns>The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> as customized task object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValue(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object. 
            </summary>
            <remarks>
            Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'. Structs are not supported.
            </remarks>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol as an object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadValue(TwinCAT.TypeSystem.ISymbol,System.Object@)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <param name="value">The value.</param>
            <returns>The ADS Error Code</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'. Structs are not supported.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.CleanupSymbolTable">
            <summary>
            Clears the internal symbol cache.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>Previously stored symbol information is cleared. As a consequence the symbol information must be obtained from the ADS server again if accessed, which
            which needs an extra ADS round trip.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValue(System.String,System.Type)">
            <summary>
            Reads the value of a symbol and returns the value as object. The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <returns>Value of the symbol</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadValue(System.String,System.Type,System.Object@)">
            <summary>
            Reads the value of a symbol and returns the value as object.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <param name="value">The read value of the Symbol.</param>
            <returns>The <see cref="T:TwinCAT.Ads.AdsErrorCode" />.</returns>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="F:TwinCAT.Ads.ResultAnyValue.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._symbolNameEncoding">
            <summary>
            The symbol Name Encoding
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClient._defaultValueEncoding">
            <summary>
            The string value encoding
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsSymbolCacheProvider#TryGetSymbolCache(TwinCAT.Ads.Internal.ISymbolCache@)">
            <summary>
            Gets the symbol table.
            </summary>
            <returns>SymbolInfoTable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsSymbolCacheProvider#GetSymbolCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbol table asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>SymbolInfoTable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadSymbol(System.String)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="name">Name of the symbol.</param>
            <returns>A IAdsSymbol2 containing the requested symbol information or null if symbol could not
            be found.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadSymbolAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="name">Name of the symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'ReadSymbolInfo' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1" /> parameter contains the read value
            (<see cref="F:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadDataType(System.String)">
            <summary>
            Call this method to obtain information about the specified data type.
            </summary>
            <param name="typeName">Name of the data type (without namespace)</param>
            <returns>An <IDataType></IDataType> containing the requested type.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typeName</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)" />
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Call this method to obtain information about the specified data type.
            </summary>
            <param name="typeName">Name of the symbol.</param>
            <param name="dataType">The symbol.</param>
            <returns>A <see cref="T:TwinCAT.TypeSystem.IDataType" /> containing the requested symbol information or null if symbol could not
            be found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typeName</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataType(System.String)" />
            <see cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            read data type as an asynchronous operation.
            </summary>
            <param name="typeName">Name of the data type.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'ReadDataType' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typeName</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataType(System.String)" />
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteValue(System.String,System.Object)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteSymbolAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryRead(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32@)">
            <summary>
            Reads value data from the specified IndexGroup/IndexOffset to the specified memory location.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="memory">The memory location</param>
            <param name="readBytes">The read bytes.</param>
            <returns>TwinCAT.Ads.AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAsync(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the data asynchronously from specified IndexGroup/IndexOffset
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readBuffer">The read buffer, memory area where the data is written.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadWriteAsync(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read/Writes data asynchronously to/from the specified <paramref name="writeBuffer" />, <paramref name="readBuffer" /></summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultReadWrite" /> parameter contains the total number of bytes read into the buffer
            (<see cref="F:TwinCAT.Ads.ResultRead.ReadBytes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadWriteSync(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Read/Writes data  to/from the specified <paramref name="writeBuffer" />, <paramref name="readBuffer" />
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultReadWrite" /> parameter contains the total number of bytes read into the buffer
            (<see cref="F:TwinCAT.Ads.ResultRead.ReadBytes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)">
            <summary>
            Writes data synchronously to an ADS device and reads data from that device.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="readBytes">The read bytes.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device into the <paramref name="readBuffer" /></summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Number of successfully returned (read) data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAsync(System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Triggers a write call at the specified IndexGroup/IndexOffset asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAsync(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the data / Value asynchronously into the specified <paramref name="writeBuffer"/>.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'Write' operation. The <see cref="T:TwinCAT.Ads.ResultWrite"/> parameter contains 
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteSync(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the data / Value into the specified <paramref name="writeBuffer"/>.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>A task that represents the asynchronous 'Write' operation. The <see cref="T:TwinCAT.Ads.ResultWrite"/> parameter contains 
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync(System.UInt32,System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type as AnyType (primitive types).</param>
            <param name="args">The type arguments (AnyType)</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsResult(System.UInt32,System.UInt32,System.Type,System.Int32[])">
            <summary>
            Reads any as result.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="args">The arguments.</param>
            <returns>ResultAnyValue.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync(System.UInt32,System.UInt32,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type as AnyType (primitive types).</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync(System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="type">The type as AnyType (primitive types).</param>
            <param name="args">The type arguments (AnyType)</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAnyAsync(System.UInt32,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="type">The type as AnyType (primitive types).</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsync(System.UInt32,System.UInt32,System.Object,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Write the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="args">The type arguments (AnyType)</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the value
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAnyAsync(System.UInt32,System.UInt32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Write the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the value
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadAsync(System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the value data of the symbol asynchronously into the <paramref name="readBuffer"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer/data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWrite(System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the value data synchronously that is represented in the <paramref name="writeBuffer"/> to the symbol with the specified <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="writeBuffer">The write buffer / value.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteAsync(System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the value data asynchronously that is represented by the <paramref name="writeBuffer"/> to the symbol specified by the
            <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="writeBuffer">The write buffer/value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation. The <see cref="T:TwinCAT.Ads.ResultWrite"/> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadWriteAsync(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            ReadWrites value data asynchronously to/from the symbol represented by the <paramref name="variableHandle" />.
            </summary>
            <param name="variableHandle">Variable handle.</param>
            <param name="readBuffer">The read data / value</param>
            <param name="writeBuffer">The write data / value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultReadWrite" /> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryAddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" /> event.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryAddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" /> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="anyType">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">The 'AnyType' arguments.</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS Error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />
            <remarks>If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive types (AnyType) are supported by this method.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.AddDeviceNotificationExAsync(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx"/> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="anyType">Type of the object stored in the event argument, only Primitive 'AnyTypes' allowed.</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive types (AnyType) are supported by this method.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" /> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationEx" />
            <seealso cref="E:TwinCAT.Ads.AdsClient.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />        
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryDeleteDeviceNotification(System.UInt32)">
            <summary>
            Deletes a registered notification.
            </summary>
            <param name="notificationHandle">Notification handle.</param>
            <returns>The ADS error code.</returns>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" /> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryDeleteDeviceNotification(System.UInt32,System.Int32)">
            <summary>
            Deletes a registered notification.
            </summary>
            <param name="notificationHandle">Notification handle.</param>
            <param name="timeout">The timeout.</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" /> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes a registered notification asynchronously.
            </summary>
            <param name="notificationHandle">Notification handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'DeleteDeviceNotification' operation. The <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property contains the
            ADS error code after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" /> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#INotificationProvider#RegisterNotificationInternalAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Action{TwinCAT.Ads.AmsAddress,System.Collections.Generic.Dictionary{System.DateTimeOffset,TwinCAT.Ads.Internal.NotificationQueueElement[]}},System.Threading.CancellationToken)">
            <summary>
            Adds a DeviceNotification asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="settings">The Notification settings.</param>
            <param name="notificationHandler">The notification handler.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#INotificationProvider#UnregisterNotificationInternalAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes a Device Notification.
            </summary>
            <param name="handle">The Notification handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultAds&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#INotificationProvider#UnregisterNotificationInternal(System.UInt32,System.Int32)">
            <summary>
            Removes / Deletes a Device Notification.
            </summary>
            <param name="handle">The handle.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#Internal#INotificationProvider#UnregisterNotificationInternal(System.UInt32[],TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Removes / Deletes a Device Notification
            </summary>
            <param name="handles">The Notification handles.</param>
            <param name="subResults">The results of the Unregistering process.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TwinCAT#Ads#IAdsInjectAcceptor#InjectSymbolVersionChanged">
            <summary>
            Injection of an SymbolVersionChanged event (just for Testing purposes)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadSymbol(System.String,TwinCAT.Ads.TypeSystem.IAdsSymbol@)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="name">Name of the symbol.</param>
            <param name="symbol">The symbol.</param>
            <returns>A <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbol" /> containing the requested symbol information or null if symbol could not
            be found.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWriteValue(System.String,System.Object)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.SetEncodings(System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Sets the default encoding.
            </summary>
            <param name="symbolNameEncoding">The encoding.</param>
            <param name="defaultValueEncoding"></param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsClient.SymbolEncoding">
            <summary>
            Gets the symbol encoding.
            </summary>
            <value>The symbol encoding.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethod(System.String,System.String,System.Object[])">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>This method only supports primitive data types as <paramref name="inParameters"/>. Any available outparameters will be ignored.
            Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethod(System.String,System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <param name="outParameters">The output parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifiying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifiying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters"/>, <paramref name="outParameters"/>, <paramref name="outSpecifiers"/>, <paramref name="retSpecifier"/>
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers"/> and <paramref name="retSpecifier"/>) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retSpecifier">The ret specifier (specifiying the return value) or NULL.</param>
            <returns>The return value of the Method (as object).</returns>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" /></example>
            <remarks>The RpcMethod optionally support In-Parameters, and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameter (<paramref name="retSpecifier" />) is not necessary and should not be set.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryInvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the RPC Method
            </summary>
            <param name="symbolPath">The symbol.</param>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryInvokeRpcMethod(System.String,System.String,System.Object[],System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <returns>The ADS Error Code.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryInvokeRpcMethod(System.String,System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The ADS Error Code.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethodAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbolPath">The symbol/Instance path of the symbol.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains
            the return value together with the output parameters.
            </returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethodAsync(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbolPath">The symbol/Instance path of the symbol.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],System.Threading.CancellationToken)">
            <summary>
            invoke RPC method as an asynchronous operation.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="rpcMethod">The RPC method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultRpcMethod&gt;.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentNullException">rpcMethod</exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            invoke RPC method as an asynchronous operation.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="rpcMethod">The RPC method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outSpec">The out spec.</param>
            <param name="returnSpec">The return spec.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultRpcMethod&gt;.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentNullException">rpcMethod</exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Tries the invoke RPC method.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="rpcMethod">The RPC method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outSpec">The out spec.</param>
            <param name="returnSpec">The return spec.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="returnValue">The return value.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentNullException">rpcMethod</exception>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" /></example>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />,
            are allowed to be empty or NULL.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValue``1(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol.</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadValue``1(TwinCAT.TypeSystem.ISymbol,``0@)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <param name="value">The value.</param>
            <returns>The ADS Error Code</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValueAsync``1(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously and returns it as an object.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="F:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValue``1(System.String)">
            <summary>
            Reads the value of a symbol and returns the value. The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <returns>Value of the symbol</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryReadValue``1(System.String,``0@)">
            <summary>
            Reads the value of a symbol and returns the value as object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">The read value of the Symbol.</param>
            <returns>The <see cref="T:TwinCAT.Ads.AdsErrorCode" />.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.ReadValueAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously.
            </summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="F:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteValueAsync``1(TwinCAT.TypeSystem.ISymbol,``0,System.Threading.CancellationToken)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteValue``1(System.String,``0)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">the value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.TryWriteValue``1(System.String,``0)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClient.WriteValueAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AsyncQueue`1">
            <summary>
            Class AsyncQueue.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AsyncQueue`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AsyncQueue`1"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AsyncQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AsyncQueue`1.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            Dequeues the asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AsyncQueue`1.HasPromises">
            <summary>
            Gets a value indicating whether this instance has promises.
            </summary>
            <value>
            <c>true</c> if this instance has promises; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:TwinCAT.Ads.Internal.AsyncQueue`1.PromiseAdded">
            <summary>
            Occurs when a new promise
            is generated by the queue
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AsyncQueue`1.OnPromiseAdded">
            <summary>
            Called when [promise added].
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.DisposableHandleBag`1">
            <summary>
            Class DisposableHandleBag.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.sumCommandHandles">
            <summary>
            The handle dictionary
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.sourceHandlesDict">
            <summary>
            Dictionary of successfully acquired handles
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.sourceObjects">
            <summary>
            List of the used symbols.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.handlesCreated">
            <summary>
            Indicates, that the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag`1"/> is initialized.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.isDisposed">
            <summary>
            Indicates that this <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag"/> is disposed.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.relaxSubErrors">
            <summary>
            Relaxing strategy for SubErrors
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DisposableHandleBag`1.sync">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.#ctor(TwinCAT.Ads.IAdsConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag`1"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag" /> class.
            </summary>
            <param name="connection">The client.</param>
            <param name="sourceObjects">The source objects.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <exception cref="T:System.ArgumentNullException">sourceObjects</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">sourceObjects</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.DisposableHandleBag`1.Sources">
            <summary>
            Gets the number of registered sources
            </summary>
            <value>The source count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.DisposableHandleBag`1.SourceResultHandles">
            <summary>
            Gets the number of registered Handles
            </summary>
            <value>The handle count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.DisposableHandleBag`1.ResultHandles">
            <summary>
            Gets results of Handle registrations.
            </summary>
            <value>The handle count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.DisposableHandleBag`1.SourceCount">
            <summary>
            Gets the number of registered sources
            </summary>
            <value>The source count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.DisposableHandleBag`1.ValidHandles">
            <summary>
            Gets the valid handles.
            </summary>
            <value>The valid handles.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.CreateHandles">
            <summary>
            Creates the internal handles of the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag`1"></see>.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.CreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Create handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Failed to create one or more handles!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnCreateHandles">
            <summary>
            Handler function for creating handles
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnCreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function for creating handles
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnCreateHandle(`0)">
            <summary>
            Handler function for handle creation
            </summary>
            <param name="source">The source.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnCreateHandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handler function for handle creation
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.ReleaseHandles">
            <summary>
            Releases the handles of the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag`1"></see>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.ReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Release handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnReleaseHandles">
            <summary>
            Handler funnctionf or releasing handles
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Handler funnctionf or releasing handles
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnReleaseHandle(`0)">
            <summary>
            Handler function for releasing handle
            </summary>
            <param name="source">The source.</param>
            <returns>ResultAds.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnReleaseHandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Handler function for releasing handle
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ResultAds&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.TryGetHandle(`0,System.UInt32@)">
            <summary>
            Tries to get the specified handle
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="handle">The handle.</param>
            <returns><c>true</c> if the handle is available in the internal cache, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.Contains(System.UInt32)">
            <summary>
            Determines whether the handle was acquired by this <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag"/>
            </summary>
            <param name="handle">The handle.</param>
            <returns><c>true</c> if [contains] [the specified handle]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.GetHandle(`0)">
            <summary>
            Gets the handle.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>System.UInt32 or 0</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.GetHandleResult(`0)">
            <summary>
            Gets the handle result.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>ResultHandle.</returns>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.TryGetSourceObject(System.UInt32,`0@)">
            <summary>
            Tries to get the corresponding Source object
            </summary>
            <param name="handle">The handle.</param>
            <param name="sourceObject">The source object.</param>
            <returns><c>true</c> if the source object can be determined by the handle, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.GetSourceObject(System.UInt32)">
            <summary>
            Gets the source object.
            </summary>
            <param name="handle">The handle.</param>
            <returns>TSource.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnAddHandle(`0,TwinCAT.Ads.ResultHandle)">
            <summary>
            Handler function for adding a handle
            </summary>
            <param name="source">The source.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.OnRemoveHandle(`0,System.UInt32)">
            <summary>
            Handler function removing handle.
            </summary>
            <param name="source">The source.</param>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.AddHandleSource(`0)">
            <summary>
            Creates the handle for the specified source object.
            </summary>
            <param name="sourceObject">The source object.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.RemoveHandleSource(`0)">
            <summary>
            Releases the handle for the specified source object.
            </summary>
            <param name="sourceObject">The source object.</param>
            <returns>ResultAds.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.AddHandleSourceAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Add handle source as an asynchronous operation.
            </summary>
            <param name="sourceObject">The source object.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.ValueTuple&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.RemoveHandleSourceAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Remove handle source as an asynchronous operation.
            </summary>
            <param name="sourceObject">The source object.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.ValueTuple&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.RemoveAll">
            <summary>
            Unregisteres and Removes all handles from bag.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag`1.RemoveAllAsync(System.Threading.CancellationToken)">
            <summary>
            Remove all as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.DisposableHandleBag">
            <summary>
            Class DisposableHandleBag. 
            </summary>
            <remarks>
            This helper class is used to support multiple registration of Variable handles in one step by SumCommand. With Disposing, all the registered handles will be 
            be released again.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag"/> class.
            </summary>
            <param name="client">The client.</param>
            <param name="symbolPaths">The symbol paths.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <exception cref="T:System.ArgumentNullException">symbolPaths</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">symbolPaths</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.#ctor(TwinCAT.Ads.IAdsConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnCreateHandles">
            <summary>
            Creates the handles.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnCreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the handles.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnCreateHandle(System.String)">
            <summary>
            Handler function for handle creation
            </summary>
            <param name="source">The source.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnCreateHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            On create handle as an asynchronous operation.
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultHandle&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnReleaseHandles">
            <summary>
            Releases the handles.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            On release handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnReleaseHandle(System.String)">
            <summary>
            Handler function for releasing handle
            </summary>
            <param name="source">The source.</param>
            <returns>ResultAds.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.OnReleaseHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            On release handle as an asynchronous operation.
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultAds&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableHandleBag.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableHandleBag"/> class.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.DisposableNotificationHandleBag">
            <summary>
            Class DisposableNotificationHandleBag. This class cannot be inherited.
            </summary>
            <remarks>
            This helper class is used to support multiple registration of AdsNotification events in one step. With Disposing, all the registered AdsNotification events will
            be released again.
            </remarks>
            <seealso cref="T:TwinCAT.Ads.Internal.DisposableHandleBag" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableNotificationHandleBag"/> class.
            </summary>
            <param name="connection">The client.</param>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <exception cref="T:System.ArgumentNullException">dict</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dict</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableNotificationHandleBag" /> class.
            </summary>
            <param name="connection">The client.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <exception cref="T:System.ArgumentNullException">dict</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dict</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnAddHandle(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.ResultHandle)">
            <summary>
            Handler function for adding a handle
            </summary>
            <param name="source">The source.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnCreateHandle(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function for handle creation
            </summary>
            <param name="source">The source.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnCreateHandleAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            On create handle as an asynchronous operation.
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultHandle&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnCreateHandles">
            <summary>
            Creates the handles.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnCreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            On create handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnReleaseHandle(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function for releasing handle
            </summary>
            <param name="source">The source.</param>
            <returns>ResultAds.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnReleaseHandleAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            On release handle as an asynchronous operation.
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultAds&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnReleaseHandles">
            <summary>
            Releases the handles.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationHandleBag.OnReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            On release handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag">
            <summary>
            Class DisposableNotificationExHandleBag. This class cannot be inherited.
            </summary>
            <remarks>
            This helper class is used to support multiple registration of NotificationEx events in one step. With Disposing, all the registered NotificationEx events will
            be released again.
            </remarks>
            <seealso cref="T:TwinCAT.Ads.Internal.DisposableHandleBag" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.AnySymbolSpecifier},System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag" /> class.
            </summary>
            <param name="client">The client.</param>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <exception cref="T:System.ArgumentNullException">dict</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dict</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag" /> class.
            </summary>
            <param name="client">The client.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <exception cref="T:System.ArgumentNullException">dict</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">dict</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnAddHandle(TwinCAT.TypeSystem.AnySymbolSpecifier,TwinCAT.Ads.ResultHandle)">
            <summary>
            Handler function for adding a handle
            </summary>
            <param name="source">The source.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnCreateHandle(TwinCAT.TypeSystem.AnySymbolSpecifier)">
            <summary>
            Handler function for handle creation
            </summary>
            <param name="source">The source.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnCreateHandleAsync(TwinCAT.TypeSystem.AnySymbolSpecifier,System.Threading.CancellationToken)">
            <summary>
            On create handle as an asynchronous operation.
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultHandle&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnCreateHandles">
            <summary>
            Creates the handles.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnCreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function creating handles
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Int32&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnReleaseHandle(TwinCAT.TypeSystem.AnySymbolSpecifier)">
            <summary>
            Handler function for releasing handle
            </summary>
            <param name="source">The source.</param>
            <returns>ResultAds.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnReleaseHandleAsync(TwinCAT.TypeSystem.AnySymbolSpecifier,System.Threading.CancellationToken)">
            <summary>
            Handler function releasing handle.
            </summary>
            <param name="source">The source.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultAds&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnReleaseHandles">
            <summary>
            Releases the handles.
            </summary>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DisposableNotificationExHandleBag.OnReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function releasing handle.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task representing the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
        </member>
        <member name="T:TwinCAT.Ads.Internal.HandleBagFactory">
            <summary>
            Factory class for <see cref="T:TwinCAT.Ads.Internal.IDisposableHandleBag"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleBagFactory.CreateNotificationHandleBag(TwinCAT.Ads.IAdsConnection,TwinCAT.TypeSystem.ISymbol[],System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates the notification handle bag.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <returns>IDisposableSymbolHandleBag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleBagFactory.CreateVariableHandleBag(TwinCAT.Ads.IAdsConnection,System.String[],System.Boolean)">
            <summary>
            Creates the variable handle bag.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePaths">The instance paths.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <returns>IDisposableHandleBag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleBagFactory.CreateNotificationExHandleBag(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.AnySymbolSpecifier},System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates the NotificationEx. handle bag.
            </summary>
            <param name="connection">The connection.</param>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <returns>IDisposableHandleBag.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.RefCountSymbolHandle">
            <summary>
            Class RefCountSymbolHandle.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.RefCountSymbolHandle._handle">
            <summary>
            The handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.RefCountSymbolHandle._referenceCount">
            <summary>
            The reference count
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.RefCountSymbolHandle._symbolPath">
            <summary>
            The symbol path
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountSymbolHandle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.RefCountSymbolHandle"/> class.
            </summary>
            <param name="symbolPath">The symbol path.</param>
        </member>
        <member name="P:TwinCAT.Ads.Internal.RefCountSymbolHandle.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.RefCountSymbolHandle.SymbolPath">
            <summary>
            Gets the symbol path.
            </summary>
            <value>The symbol path.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.RefCountSymbolHandle.ReferenceCount">
            <summary>
            Gets the reference count.
            </summary>
            <value>The reference count.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountSymbolHandle.AddRef">
            <summary>
            Adds a Reference count
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountSymbolHandle.Release">
            <summary>
            Releases the Reference Count
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.RefCountHandleCollection">
            <summary>
            Class RefCountHandleCollection.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.RefCountHandleCollection._sync">
            <summary>
            Sync Object
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.RefCountHandleCollection._pathHandleDict">
            <summary>
            Dictionary InstancePath--&gt;HandleEntry
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.RefCountHandleCollection._handleEntryDict">
            <summary>
            Dictionary Handle-->RefCountHandleEntry
            </summary>
            <remarks>We could have different access paths (for static fields) for the same handle!!!!.
            Therefore, we have the List here ...</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountHandleCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.RefCountHandleCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountHandleCollection.TryGet(System.UInt32,System.Collections.Generic.List{TwinCAT.Ads.Internal.RefCountSymbolHandle}@)">
            <summary>
            Gets the specified handle entry.
            </summary>
            <param name="handle">The client handle.</param>
            <param name="entry">The entry.</param>
            <returns><c>true</c> if the entry can be determined by the handle, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountHandleCollection.TryGet(System.String,TwinCAT.Ads.Internal.RefCountSymbolHandle@)">
            <summary>
            Gets the specified handle entry.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="symbolEntry">The symbol entry.</param>
            <returns><c>true</c> if the symbol path is availabe aleady in the internal cache, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountHandleCollection.GetOrAdd(System.String,System.Boolean@)">
            <summary>
            Gets the or adds the handle entry.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="added">if set to <c>true</c> [added].</param>
            <returns>RefCountSymbolHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountHandleCollection.SetHandle(TwinCAT.Ads.Internal.RefCountSymbolHandle,System.UInt32)">
            <summary>
            Sets the handle.
            </summary>
            <param name="entry">The entry.</param>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountHandleCollection.Release(System.String,System.Int32@)">
            <summary>
            Releases the specified Handleentry
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="refCount">The reference count.</param>
            <returns><c>true</c> if the symbol path is found and released, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.RefCountHandleCollection.Release(System.UInt32,System.Int32@)">
            <summary>
            Releases the specified handle entry.
            </summary>
            <param name="handle">The client handle.</param>
            <param name="refCount">The reference count.</param>
            <returns><c>true</c> if the handle is found and released, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.HandleCache">
            <summary>
            Handle Cache
            </summary>
            <remarks>This class builds up a cache for Registered Handles and reference counts them.
            Actually this is a second cache in addition to the <see cref="T:TwinCAT.Ads.Internal.SymbolCache"/> (which does no reference counting).
            TODO: Combine both caches?
            </remarks>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.HandleCache._accessor">
            <summary>
            Read/Write accessor via IndexGroup/IndexOffset
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.#ctor(TwinCAT.Ads.IAdsReadWrite,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.HandleCache" /> class.
            </summary>
            <param name="syncPort">The synchronize port.</param>
            <param name="symbolEncoding">The symbol encoding or NULL (StringMarshaler.Default by default).</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.Internal.HandleCache"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.HandleCache._disposed">
            <summary>
            Indicates that the <see cref="T:TwinCAT.Ads.Internal.HandleCache"/> is disposed.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.TryCreateVariableHandle(System.String,System.Int32,System.UInt32@)">
            <summary>
            Tries to create a variable handle
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="timeout">The timeout.</param>
            <param name="serverHandle">The handle.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a variable handle (asynch)
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.TryDeleteVariableHandle(System.UInt32,System.Int32)">
            <summary>
            Tries to Delete the variable handle
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Delete variable handle as an asynchronous operation.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;TaskResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.RemoveAll">
            <summary>
            Removes all handles.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.RemoveAllAsync(System.Threading.CancellationToken)">
            <summary>
            Remove all handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.Resurrect">
            <summary>
            Resurrects this instance.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.ResurrectAsync(System.Threading.CancellationToken)">
            <summary>
            Resurrects this instance the asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.Resurrect(System.UInt32)">
            <summary>
            Ressurrects the clientHandle.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleCache.ResurrectAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Resurrects the client handle the asynchronously.
            </summary>
            <param name="serverHandle">The client handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.FailFastHandlerState">
            <summary>
            Base class for the different <see cref="T:TwinCAT.Ads.IFailFastHandler"/> state objects.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.FailFastHandlerState.timeout">
            <summary>
            Fail fast timeout (reconnection timeout / auto-reset timeout).
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.FailFastHandlerState"/> class.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.Guard">
            <summary>
            Guards the <see cref="T:TwinCAT.Ads.IFailFastHandler" /> from state changes that allow unintended communication.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.OnGuard">
            <summary>
            Called when communication should be guarded.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.NextState">
            <summary>
            Transition to the next state of the state machine (state machine pattern).
            </summary>
            <returns>IFailFastHandlerState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.OnNextState">
            <summary>
            Handler function for transitioning into the next state (if possible)
            </summary>
            <returns>IFailFastHandlerState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.Succeed">
            <summary>
            Indicates that the communication has been succeeded.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.OnSucceed">
            <summary>
            Handler function for a succeeded communication.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.Trip(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Trips to the internal <see cref="T:TwinCAT.Ads.Internal.LostCommunicationState" /> (Open circuit) state.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.FailFastHandlerState.OnTrip(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function for a tripped communication error condition.
            </summary>
            <param name="error">The causing error.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ActiveCommunicationState">
            <summary>
            State object for an active communication state.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.ActiveCommunicationState._tripped">
            <summary>
            Trip indicator
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ActiveCommunicationState.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.FailFastHandlerState" /> class.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ActiveCommunicationState.OnNextState">
            <summary>
            Handler function for transitioning into the next state (if possible)
            </summary>
            <returns>IFailFastHandlerState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ActiveCommunicationState.OnTrip(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function for a tripped communication error condition.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.LostCommunicationState">
            <summary>
            State object for a lost communication state (circuit open, auto reset errors active)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.LostCommunicationState._lostTime">
            <summary>
            Indicates the time the communication was lost
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.LostCommunicationState.#ctor(System.TimeSpan,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.FailFastHandlerState" /> class.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="causingError">The error.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.LostCommunicationState.OnGuard">
            <summary>
            Called when communication should be guarded.
            </summary>
            <exception cref="T:System.InvalidOperationException">The circuit is currently open.</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.LostCommunicationState.OnNextState">
            <summary>
            Handler function for transitioning into the next state (if possible)
            </summary>
            <returns>IFailFastHandlerState.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ReconnectingCommunicationState">
            <summary>
            State object for a reconnecting communiciation state (circuit half open).
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReconnectingCommunicationState.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.FailFastHandlerState" /> class.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReconnectingCommunicationState.OnNextState">
            <summary>
            Handler function for transitioning into the next state (if possible)
            </summary>
            <returns>IFailFastHandlerState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReconnectingCommunicationState.OnSucceed">
            <summary>
            Handler function for a succeeded communication.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReconnectingCommunicationState.OnTrip(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function for a tripped communication error condition.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IPreventRejected">
            <summary>
            Interface for preventing error states on Connection Error 
            </summary>
            <remarks>
            This is used only internally to detect the Connection state without triggering internal error conditions.
            </remarks>
            <seealso cref="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnRefused"/>
            <seealso cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IPreventRejected.PreventRejectedConnection">
            <summary>
            Gets or sets a value indicating whether Connection refused errors <see cref="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnRefused"/>) trigger internal error conditions
            </summary>
            <value><c>true</c> if connection refused is prevented; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ITcAdsConnectionHandler">
            <summary>
            Interface for handling connection state changes
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsConnectionHandler.OnConnected">
            <summary>
            Called when the Communication has been established.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsConnectionHandler.OnBeforeDisconnected">
            <summary>
            Called when the communication is shutdown.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsConnectionHandler.OnDisconnected">
            <summary>
            Called when the communication is shutdown.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IAdsErrorInjector">
            <summary>
            Interface IAdsErrorInjector (for unit testing purposes)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsErrorInjector.InjectError(TwinCAT.Ads.AdsErrorCode,System.Boolean)">
            <summary>
            Injects an error (for unit testing purposes)
            </summary>
            <param name="error">The error.</param>
            <param name="throwAdsException">if set to <c>true</c> [throw ads exception].</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsErrorInjector.InjectSymbolVersionChanged">
            <summary>
            Injection of an SymbolVersionChanged event (just for Unit-Testing purposes)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.DataAreaPidFlags">
            <summary>
            Enum DataAreaPidFlags
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DataAreaPidFlags.PidAddressing">
            <summary>
            Enables Pid Addressing
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DataAreaPidFlags.BitTypeFlag">
            <summary>
            BitType Addressing
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DataAreaPidFlags.Mask_PidOffset">
            <summary>
            Offset mask (Byte offset or Bit offset, dependent on setting <see cref="F:TwinCAT.Ads.Internal.DataAreaPidFlags.BitTypeFlag"/>)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.DataAreaPidFlags.Mask_PidAreaNo">
            <summary>
            Mask DataArea (e.g.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.NotificationQueueElement">
            <summary>
            Class NotificationQueueElement.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationQueueElement._serverHandle">
            <summary>
            The server handle
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationQueueElement.ServerHandle">
            <summary>
            Gets the server handle.
            </summary>
            <value>The server handle.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationQueueElement._timeStamp">
            <summary>
            The time stamp
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationQueueElement.TimeStamp">
            <summary>
            Gets the time stamp of the Notification
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationQueueElement._data">
            <summary>
            The Notification data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationQueueElement.Data">
            <summary>
            Gets the Notification data
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationQueueElement.#ctor(System.UInt32,System.DateTimeOffset,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.NotificationQueueElement"/> class.
            </summary>
            <param name="serverHandle">The server handle.</param>
            <param name="timeStamp">The time stamp.</param>
            <param name="notificationData">The notification data.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.INotificationProvider">
            <summary>
            Low level interface for Notification management
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationProvider.RegisterNotificationInternalAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Action{TwinCAT.Ads.AmsAddress,System.Collections.Generic.Dictionary{System.DateTimeOffset,TwinCAT.Ads.Internal.NotificationQueueElement[]}},System.Threading.CancellationToken)">
            <summary>
            Adds a DeviceNotification asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="settings">The Notification settings.</param>
            <param name="notificationHandler">The notification handler.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationProvider.UnregisterNotificationInternalAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes a Device Notification.
            </summary>
            <param name="handle">The Notification handle.</param>
            <param name="token">The Notification token.</param>
            <returns>Task&lt;ResultAds&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationProvider.UnregisterNotificationInternal(System.UInt32,System.Int32)">
            <summary>
            Removes / Deletes a Device Notification.
            </summary>
            <param name="handle">The handle.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationProvider.UnregisterNotificationInternal(System.UInt32[],TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Removes / Deletes a Device Notification
            </summary>
            <param name="handles">The Notification handles.</param>
            <param name="subResults">The results of the unregistering process.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IClientNotificationReceiver">
            <summary>
            Interface IClientNotificationReceiver
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ISyncNotificationReceiver">
            <summary>
            Interface ISyncNotificationReceiver
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ISyncMessageReceiver">
            <summary>
            Interface ISyncMessageReceiver
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsNotificationExUserData">
            <summary>
            Class AdsNotificationExUserData.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.NotificationEntry">
            <summary>
            Class NotificationEntry.
            </summary>
            <remarks>This class represents a single Notification Value, bound with Client/Server Handle, VariableHandle, RawData and userData.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationEntry.#ctor(System.UInt32,System.UInt32,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.NotificationEntry" /> class.
            </summary>
            <param name="clientHandle">The client handle.</param>
            <param name="serverHandle">The server handle.</param>
            <param name="maxSize">The maximum size of the notification (or -1 if not checked)</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationEntry.#ctor(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.NotificationEntry" /> class.
            </summary>
            <param name="clientHandle">The client handle.</param>
            <param name="serverHandle">The server handle.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationEntry._userData">
            <summary>
            The user data
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationEntry.UserData">
            <summary>
            Gets the user data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationEntry._clientHandle">
            <summary>
            The client handle
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationEntry.ClientHandle">
            <summary>
            Gets the client handle.
            </summary>
            <value>The client handle.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationEntry._serverHandle">
            <summary>
            The server handle
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationEntry.ServerHandle">
            <summary>
            Gets the server handle.
            </summary>
            <value>The server handle.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationEntry.MaxDataSize">
            <summary>
            Gets the size of the notification data in  bytes.
            </summary>
            <value>The size of the notification data.</value>
            <remarks>
            In some circumstances (e.g. Broadcast search) the size of the Notifications is variable and
            we have to define the maximum size.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase._notificationTable">
            <summary>
            Table Server Notification Handle --> NotificationEntry
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase._clientHandleTable">
            <summary>
            Table Client Notification Handle --> Server NotificationHandle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase.sync">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase.registeringNotifications">
            <summary>
            Actual registering notifications
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiverBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.Internal.NotificationReceiverBase"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiverBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiverBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:TwinCAT.Ads.Internal.NotificationReceiverBase.IsActive">
            <summary>
            Gets a value indicating whether this instance is active/initialized
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase._notificationCount">
            <summary>
            Overall notification statistics.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase._errorCount">
            <summary>
            Overall notification error statistics.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase._unregistrationCount">
            <summary>
            Overall notification invalidates statistics.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase._symbolVersionChangedCount">
            <summary>
            Symbol Version Changed counter.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.NotificationReceiverBase._stateChangedCount">
            <summary>
            State Changed counter.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiverBase.AddDeviceNotificationAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The handle of the notification.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiverBase.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing notification.
            </summary>
            <param name="notificationHandle">Handle of the notification.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;TaskResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiverBase.TryAddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Int32,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="timeout">The timeout.</param>
            <param name="handle">The handle.</param>
            <returns>The handle of the notification.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.NotificationReceiver">
            <summary>
            Summary description for NotificationMngt.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiver.#ctor(TwinCAT.Ads.Internal.INotificationProvider,TwinCAT.Ads.IHandleCache,TwinCAT.Ads.Internal.IClientNotificationReceiver)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.NotificationReceiver" /> class.
            </summary>
            <param name="syncPort">The synchronize port.</param>
            <param name="symbolTable">The symbol table.</param>
            <param name="notReceiver">The not receiver.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiver.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiver.OnAddNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Int32)">
            <summary>
            Called when [add notification].
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="dataSize">Size of the data.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <param name="timeout">The timeout.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NotificationReceiver.AddDeviceNotificationAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            add device notification as an asynchronous operation.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The handle of the notification.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IRequestCompletionSource">
            <summary>
            Interface Representing an AdsRequest completion source
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IRequestCompletionSource.InvokeId">
            <summary>
            Gets the Ads InvokeID
            </summary>
            <value>The invoke identifier.</value>
            <remarks>This is the Identifier the Completion source is triggering its confirmations on.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1">
            <summary>
            Base implementation of a AdsRequest completion source
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:System.Threading.Tasks.TaskCompletionSource`1" />
            <seealso cref="T:TwinCAT.Ads.Internal.IRequestCompletionSource" />
            <remarks>Represents an external asynchronous operation that produces an answer to an ADS Request (as Ads TaskResult). It propagates the asynchronous result of the ADS Confirmation 
            via the Task object to the calling code (the code that starts the Request):
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1.InvokeId">
            <summary>
            Gets the Ads InvokeID
            </summary>
            <value>The invoke identifier.</value>
            <remarks>This is the Identifier the Completion source is triggering its confirmations on.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsRequestCompletionSource">
            <summary>
            Task completion source for an asynchronous AdsRequest (without specific result).
            </summary>
            <seealso cref="T:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsRequestCompletionSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsRequestCompletionSource"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ReadDeviceInfoRequestCompletionSource">
            <summary>
            Task completion source for an asynchronous ReadDeviceInfo request.
            </summary>
            <seealso cref="T:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReadDeviceInfoRequestCompletionSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.ReadDeviceInfoRequestCompletionSource"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ReadDeviceStateRequestCompletionSource">
            <summary>
            Task completion source for an asynchronous ReadDeviceState request.
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReadDeviceStateRequestCompletionSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.ReadDeviceStateRequestCompletionSource"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ReadRequestCompletionSource">
            Task completion source for an asynchronous Read request
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReadRequestCompletionSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.ReadRequestCompletionSource"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ReadBytesRequestCompletionSource">
            <summary>
            Task completion source for an asynchronous Read request with included bytes data.
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.ReadBytesRequestCompletionSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.ReadBytesRequestCompletionSource"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.HandleRequestCompletionSource">
            <summary>
            Task completion source for an asynchronous request that returns and ADS Handle.
            </summary>
            <seealso cref="T:TwinCAT.Ads.Internal.AdsRequestCompletionSourceBase`1" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleRequestCompletionSource.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.HandleRequestCompletionSource"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IAdsClientFactory">
            <summary>
            Interface IAdsClientFactory
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsClientFactory.Create(TwinCAT.ISession)">
            <summary>
            Creates a <see cref="T:TwinCAT.Ads.IAdsConnection"/> specified by the Session object.
            </summary>
            <param name="session">The session.</param>
            <returns>IAdsConnection.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IInterceptedClient">
            <summary>
            Interface for an communication client / <see cref="T:TwinCAT.IConnection"/> that accepts <see cref="T:TwinCAT.Ads.ICommunicationInterceptor">Interceptors.</see>
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IInterceptedClient.Interceptors">
            <summary>
            Gets the communication interceptors.
            </summary>
            <value>The interceptors.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IInterceptedClient.SetCommunicationInterceptor(TwinCAT.Ads.CommunicationInterceptors)">
            <summary>
            Sets additional <see cref="T:TwinCAT.Ads.CommunicationInterceptor">Communication Interceptors</see>.
            </summary>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IInterceptedClient.TryResurrect(TwinCAT.AdsException@)">
            <summary>
            Resurrects the connection
            </summary>
            <param name="error">The error.</param>
            <returns><c>true</c> if resurrection was accepted, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsOnDemandBinder">
            <summary>
            Read Type Binder.
            </summary>
            <remarks>
            This is a binder implementation that reads the Data types on demand from the target.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsOnDemandBinder.#ctor(TwinCAT.Ads.AmsAddress,TwinCAT.TypeSystem.IInternalSymbolProvider,TwinCAT.TypeSystem.ISymbolFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsOnDemandBinder"/> class.
            </summary>
            <param name="imageBaseAddress">The image base address.</param>
            <param name="provider">The provider.</param>
            <param name="symbolFactory">The symbol factory.</param>
            <param name="useVirtualInstance">if set to <c>true</c> [use virtual instance].</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsOnDemandBinder.TryResolveType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Tries to resolve the type (parses it if not found and adds it to the resolver if necessary).
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if the the datatype could be resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsOnDemandBinder.ResolveTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resolves the type asynchronous.
            </summary>
            <param name="name">The name.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultValue&lt;IDataType&gt;&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.SymbolCache">
            <summary>
            Internal Symbol cache
            </summary>
            <remarks>This class builds up a cache for Symbols and DataTypes.
            Depending on the <see cref="T:TwinCAT.ValueAccess.ValueAccessMode"/>, handles are also stored (but not reference counted yet).
            Actually this is a second cache in addition to the <see cref="T:TwinCAT.Ads.Internal.HandleCache"/>.
            TODO: Combine both caches?
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.ValueAccess.IAccessorValue,TwinCAT.ValueAccess.ValueAccessMode,TwinCAT.Ads.Internal.SymbolUploadInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.SymbolCache" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="accessor">The accessor.</param>
            <param name="mode">The mode.</param>
            <param name="uploadInfo">The upload information.</param>
            <exception cref="T:System.ArgumentNullException">accessor</exception>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolCache._handleBag">
            <summary>
            Cache for Symbol Handles (used only for ValueAccesMode.SymbolicByHandle)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.CleanupCache">
            <summary>
            Cleanup the <see cref="T:TwinCAT.Ads.Internal.SymbolCache"/>
            </summary>
            <remarks>
            Because the <see cref="T:TwinCAT.Ads.Internal.SymbolCache"/> holds 'unmanaged' resources in form
            of Symbol handles that must be unregistered, the Cleanup is called by the 
            dispose method.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.WriteValueAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the symbol.
            </summary>
            <param name="instancePath">The name.</param>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported
            or
            Type of symbol not supported</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryReadType(System.String,System.Boolean,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Determines a <see cref="T:TwinCAT.TypeSystem.IDataType"/> from its name (synchronously)
            </summary>
            <param name="name">The type name.</param>
            <param name="lookup">if set to true, the operation first looks in the cached DataTypes table, otherwise an ADS GetDataTypeByName is forced./>.</param>
            <param name="type">The type.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.Internal.SymbolCache.ReadTypeAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.ReadTypeAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:TwinCAT.TypeSystem.IDataType"/> asynchronously.
            </summary>
            <param name="name">The type name.</param>
            <param name="lookup">if set to true, the operation first looks in the cached DataTypes table, otherwise an ADS GetDataTypeByName is forced./>.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadType' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
            <seealso cref="M:TwinCAT.Ads.Internal.SymbolCache.TryReadType(System.String,System.Boolean,TwinCAT.TypeSystem.IDataType@)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.readSymbolHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Updates the symbol handle for Symbolic access
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>AdsErrorCode.</returns>
            <remarks></remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.readSymbolHandleSync(System.String)">
            <summary>
            Updates the symbol handle for Symbolic access
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryWriteValue(System.String,System.Object)">
            <summary>
            Writes the symbol.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotSupportedException">
            Type of symbol not supported
            or
            Type of symbol not supported
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryReadValue(System.String,System.Type,System.Object@)">
            <summary>
            Reads the symbol.
            </summary>
            <param name="symbolPath">The Symbol path.</param>
            <param name="managedType">Managed type</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported
            or
            Type of symbol not supported</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the symbol.
            </summary>
            <param name="symbolPath">The Symbol path.</param>
            <param name="managedType">Managed type</param>
            <param name="cancel">The cancellation token.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported
            or
            Type of symbol not supported</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.onDemandResolveAsync(TwinCAT.Ads.TypeSystem.IAdsSymbol,System.Threading.CancellationToken)">
            <summary>
            Resolve Type Binding asynchronously OnDemand.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="cancel">Cancellation token.</param>
            <remarks>
            Tries to resolve the type (parses it if not found and adds it to the resolver if necessary).
            </remarks>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryOnDemandResolve(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Resolve Type Binding asynchronously OnDemand.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <returns>AdsErrorCode.</returns>
            <remarks>Tries to resolve the type (parses it if not found and adds it to the resolver if necessary).</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.OnDemandResolveAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resolves the type asynchronous.
            </summary>
            <param name="name">The name.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultValue&lt;IDataType&gt;&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.ReadSymbolAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get Symbol
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="bLookup">if set to <c>true</c> then this method looks first in its internal cache, otherwise it directly does an ADS roundtrip.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>TcAdsSymbol.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">name</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryReadSymbol(System.String,System.Boolean,TwinCAT.Ads.TypeSystem.IAdsSymbol@)">
            <summary>
            Get the symbol synchronously
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="bLookup">if set to <c>true</c> then this method looks first in its internal cache, otherwise it directly does an ADS roundtrip.</param>
            <param name="symbol">The symbol.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.Internal.SymbolCache.ReadSymbolAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invoke RPC method as an asynchronous operation.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="rpcMethod">The RPC method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A Task&lt;ResultRpcMethod&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentNullException">rpcMethod</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">The dataType '{para.TypeName}' of RPC parameter '{para.Name}' is not supported!</exception>
            <exception cref="T:TwinCAT.TypeSystem.RpcInvokeException"></exception>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" /></example>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolInfoTable.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the rpc method.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="rpcMethod">The RPC method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentNullException">rpcMethod</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">Not supported!</exception>
            <exception cref="T:TwinCAT.TypeSystem.RpcInvokeException"></exception>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryReadTypesSymbols">
            <summary>
            Loads the data.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.TryReadTypes(System.TimeSpan)">
            <summary>
            Loads the types.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbols asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultSymbols" /> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.GetDataTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data types asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultDataTypes" /> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultDataTypes.DataTypes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolServer.DataTypes" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.OnTypesGenerated(TwinCAT.TypeSystem.DataTypeCollection)">
            <summary>
            Called when [types generated].
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.OnTypeGenerated(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Called when [type generated].
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="E:TwinCAT.Ads.Internal.SymbolCache.TypesGenerated">
            <summary>
            Occurs when a new type was generated.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolCache.OnResolveError(System.String)">
            <summary>
            Called when the data type resolution fails
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="E:TwinCAT.Ads.Internal.SymbolCache.TypeResolveError">
            <summary>
            Occurs when the datatype resolution fails
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.SymbolUploadInfo">
            <summary>
            ADS Info object describing the SymbolUpload data
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.CalcVersion(System.Int32)">
            <summary>
            Calculates the provided version of the <see cref="T:TwinCAT.Ads.Internal.SymbolUploadInfo"/> structure marshalled from target.
            </summary>
            <param name="readBytes">The read bytes.</param>
            <returns>System.Int32.</returns>
            <remarks>The version of the struct data is dependent
            on the count of returned bytes.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.GetMarshalSize(System.Int32)">
            <summary>
            Gets the marshal size of a specific version.
            </summary>
            <param name="version">The version.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.MarshalSize">
            <summary>
            Gets the Marshal size.
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.SymbolUploadInfo"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._version">
            <summary>
            The data Version of the Upload Information.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.Version">
            <summary>
            Gets the data Version of the Upload Information.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.#ctor(System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.SymbolUploadInfo"/> class.
            </summary>
            <param name="buffer">The Raw data</param>
            <param name="version">Symbol info Version (dependent on the size of the Data in the reader)</param>
            <remarks>
            Version 1: SymbolUploadInfo (8 bytes)
            Version 2: AdsSymbolUploadInfo2 (24 bytes)
            Version 3: AdsSymbolUploadInfo3 (64 bytes)
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.SymbolUploadInfo" /> class.
            </summary>
            <param name="symbolCount">The symbol count.</param>
            <param name="symbolsBlockSize">Size of the symbols block.</param>
            <param name="typeCount">The type count.</param>
            <param name="typeBlockSize">Size of the type block.</param>
            <param name="maxDynamicSymbolCount">The maximum dynamic symbol count.</param>
            <param name="usedDynamicSymbolCount">The used dynamic symbol count.</param>
            <param name="symbolPathEncoding">The encoding used for InstancePath marshalling/unmarshalling.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.Marshal(System.Span{System.Byte})">
            <summary>
            Writes to memory.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.Dump">
            <summary>
            Dumps the <see cref="T:TwinCAT.Ads.Internal.SymbolUploadInfo"/>
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SymbolUploadInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._symbolCount">
            <summary>
            The symbols
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.SymbolCount">
            <summary>
            Gets the symbol count.
            </summary>
            <value>The symbol count.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._symbolsBlockSize">
            <summary>
            The symbol size
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.SymbolsBlockSize">
            <summary>
            Gets the size of the symbols block.
            </summary>
            <value>The size of the symbols block.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._dataTypeCount">
            <summary>
            The datatypes
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.DataTypeCount">
            <summary>
            Gets the data type count.
            </summary>
            <value>The data type count.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._dataTypesBlockSize">
            <summary>
            The datatype size
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.DataTypesBlockSize">
            <summary>
            Gets the size of the data types block.
            </summary>
            <value>The size of the data types block.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._maxDynamicSymbolCount">
            <summary>
            The maximum dynamic symbols
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.MaxDynamicSymbolCount">
            <summary>
            Gets the maximum number of the dynamic symbols.
            </summary>
            <value>The maximum dynamic symbol count.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._usedDynamicSymbolCount">
            <summary>
            The used dynamic symbols
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.UsedDynamicSymbolCount">
            <summary>
            Gets the number of used dynamic symbols.
            </summary>
            <value>The used dynamic symbol count.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._invalidDynamicSymbolCount">
            <summary>
            Invalid dynamic symbols
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.InvalidDynamicSymbolCount">
            <summary>
            Gets the number of invalid dynamic symbols.
            </summary>
            <value>The invalid dynamic symbol count.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._encodingCodePage">
            <summary>
            The encoding code page (marshalled from target)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.SymbolNameEncoding">
            <summary>
            Gets the string encoding (marshalled from target)
            </summary>
            <value>The string encoding for symbols and data types (Default: <see cref="P:System.Text.Encoding.Default"/>)</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.DefaultValueEncoding">
            <summary>
            Gets the Encoding of STRING values
            </summary>
            <value>The string value encoding.</value>
            <remarks>This Encoding is changed by Plc Project Setting in TWINCAT 4026 (Name: 'UTF8 Encoding for STRING')
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._flags">
            <summary>
            Symbol Upload Flags
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.Flags">
            <summary>
            Gets the Symbol Upload Flags
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.TargetPointerSize">
            <summary>
            Gets the size of the Pointers on the target system.
            </summary>
            <value>The size of the target pointer.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.ContainsBaseTypes">
            <summary>
            Gets a value indicating whether the symbol server delivers base types also.
            </summary>
            <value><c>true</c> if base types are in the data types collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.SymbolUploadInfo.IsStringDataUtf8Encoded">
            <summary>
            Gets a value indicating whether this instance is string data UTF8 encoded.
            </summary>
            <value><c>true</c> if this instance is string data UTF8 encoded; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadInfo._reserved">
            <summary>
            Reserved bytes for future extensions.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.SymbolUploadFlags">
            <summary>
            Enum SymbolUploadFlags
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadFlags.None">
            <summary>
            None / Unititialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadFlags.Is64BitPlatform">
            <summary>
            Target is 64 Bit Platform
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadFlags.IncludesBaseTypes">
            <summary>
            Symbol Server includes Base types.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.SymbolUploadFlags.Utf8EncodedStringData">
            <summary>
            String Date is encoded in UTF8
            </summary>
            <remarks>
            All PLC STRING data is encoded in UTF8. This flag is used from TwinCAT 4026 on.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsGetDynamicSymbolType">
            <summary>
            Enum AdsGetDynamicSymbolType
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsGetDynamicSymbolType.Next">
            <summary>
            Next
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsGetDynamicSymbolType.Sibling">
            <summary>
            Sibling
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsGetDynamicSymbolType.Child">
            <summary>
            Child
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsGetDynamicSymbolType.Parent">
            <summary>
            Parent
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.BinaryWriterExtension">
            <summary>
            Class BinaryWriterExtension.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcString(System.IO.BinaryWriter,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the PLC string.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiString(System.IO.BinaryWriter,System.String,System.Int32)">
            <summary>
            Writes a string as a PLC string to the current stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The string to write to the stream.</param>
            <param name="length">The length of the string without '\0' terminator!</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeString(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" />
            <remarks>This method is meant for writing single string variables defined in the PlcControl format.
            E.g. to write a 'STRING(80)' (byte size is 81) a length of '80' must be given to the 'length' parameter.
            If the string length is larger or equal than the length parameter, then only length characters are written to the
            <see cref="T:TwinCAT.Ads.AdsStream" /> (without terminating character).
            If the string value character count is shorter than the specified length parameter, the string + a terminating
            \0 will be added to the <see cref="T:TwinCAT.Ads.AdsStream" />.
            This method cannot be used for marshalling purposes, for example several fields of a struct, because no filling
            bytes will be written to the stream. In that case use the <see cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" /> method.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeString(System.IO.BinaryWriter,System.String,System.Int32)">
            <summary>
            Writes a (unicode) string as a PLC string to the current stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The string to write to the stream.</param>
            <param name="length">The length of the string without '\0' terminator!</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiString(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" />
            <remarks>This method is meant for writing single string variables defined in the PlcControl format.
            E.g. to write a 'WSTRING(80)' (byte size is 162) a length of '80' must be given to the 'length' parameter.
            If the string length is larger or equal than the length parameter, then only length characters are written to the
            <see cref="T:TwinCAT.Ads.AdsStream" /> (without terminating character).
            If the string value character count is shorter than the specified length parameter, the string + a terminating
            \0 will be added to the <see cref="T:TwinCAT.Ads.AdsStream" />.
            This method cannot be used for marshalling purposes, for example several fields of a struct, because no filling
            bytes will be written to the stream. In that case use the <see cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" /> method.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)">
            <summary>
            Writes the PLC ANSI string in a data block of the specified size.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="byteSize">Size of the String including the '\0' terminator.</param>
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiString(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeString(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)">
            <summary>
            Writes the PLC UNICODE string into a data block of the specified size.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="byteSize">Size of the String including the '\0' terminator.</param>
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiStringFixedLength(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcUnicodeString(System.IO.BinaryWriter,System.String,System.Int32)" />
            <seealso cref="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcAnsiString(System.IO.BinaryWriter,System.String,System.Int32)" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcType(System.IO.BinaryWriter,System.DateTime)">
            <summary>
            Writes a date as PLC date type to the current stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The date to write to the stream.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcType(System.IO.BinaryWriter,System.DateTimeOffset)">
            <summary>
            Writes a date as PLC date type to the current stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The date to write to the stream.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WritePlcType(System.IO.BinaryWriter,System.TimeSpan)">
            <summary>
            Writes a time span as PLC time type to the current stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The time span to write to the stream.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryWriterExtension.WriteGuid(System.IO.BinaryWriter,System.Guid)">
            <summary>
            Writes the Guid (16 Bytes) to the current stream.
            </summary>
            <param name="writer">The writer.</param>
            <param name="guid">The unique identifier.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryReaderExtension.ReadPlcString(System.IO.BinaryReader,System.Int32,System.Text.Encoding)">
            <summary>
            Reads the PLC string.
            </summary>
            <param name="reader">The reader.</param>
            <param name="byteLength">Length of the byte.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryReaderExtension.ReadGuid(System.IO.BinaryReader)">
            <summary>
            Reads a <see cref="T:System.Guid"/> from the current stream.
            </summary>
            <returns>Guid.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryReaderExtension.ReadPlcAnsiString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a PLC string from the current stream (ANSI Encoding)
            </summary>
            <param name="reader">The reader.</param>
            <param name="byteLength">The length of the string in the PLC (byte length equals character count on PLC + '\0')</param>
            <returns>The string being read (until the first '\0' character)</returns>
            <remarks>The byte length of a String(80) in the PLC is 81.
            The byte length of a WSTRING(80) in the PLC is 162.
            Because of ANSI Encoding the number of Chars could differ with the number of Bytes (e.g on Double Byte Codepages DBCS, Codpage 932, Japan)</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryReaderExtension.ReadPlcUnicodeString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads a PLC string from the current stream (Unicode Encoding)
            </summary>
            <param name="reader">The reader.</param>
            <param name="byteLength">The length of the string in the PLC (byte length equals character count on PLC + '\0')</param>
            <returns>The string being read (until the first '\0' character)</returns>
            <remarks>The byte length of a String(80) in the PLC is 81.
            The byte length of a WSTRING(80) in the PLC is 162.
            Because of ANSI Encoding the number of Chars could differ with the number of Bytes (e.g on Double Byte Codepages DBCS, Codpage 932, Japan)</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryReaderExtension.ReadPlcDATE(System.IO.BinaryReader)">
            <summary>
            Reads a PLC Date type from the current stream.
            </summary>
            <returns>The date being read.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.BinaryReaderExtension.ReadPlcTIME(System.IO.BinaryReader)">
            <summary>
            Reads a PLC Time type from the current stream.
            </summary>
            <returns>The time being read.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsSymbolEntry">
            <summary>
            For internal use only.
            </summary>
            <remarks>This class is also used directly from the Measurement MQTT bridge (IRichter). Therefore it is stated as 'public'</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsSymbolEntry.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/> class from being created.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsSymbolEntry.Parse(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Internal.AdsSymbolEntry@)">
            <summary>
            Parses the specified Span and creates an <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/> object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
            <param name="symbol">The symbol.</param>
            <returns>System.ValueTuple&lt;System.Boolean, System.Int32&gt;.</returns>
            <remarks>The AdsSymbolEntry class is directly used by the Measurement MQTT Bridge and that need to create their own AdsSymbolEntry objects.
            Therefore this Method is public!
            </remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.MinMarshalSize">
            <summary>
            Gets the minimum MarshalSize
            </summary>
            <value>The minimum size of the marshal.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsSymbolEntry.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of this <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/>.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsSymbolEntry.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of this <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/>.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsSymbolEntry.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data into this <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/> objecct.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <exception cref="T:System.ArgumentNullException">marshaler</exception>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._entryLength">
            <summary>
            ADS Entry length (the marshal size, 0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._indexGroup">
            <summary>
            4 indexGroup of symbol: input, output etc.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.IndexGroup">
            <summary>
            Gets the index group of the symbol
            </summary>
            <value>The index group.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._indexOffset">
            <summary>
            8 indexOffset of symbol
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.IndexOffset">
            <summary>
            Gets the index offset of the symbol
            </summary>
            <value>The index offset.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._size">
            <summary>
            12 size of symbol ( in bytes, 0 = bit )
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.Size">
            <summary>
            12 size of symbol ( in bytes, 0 = bit )
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._dataTypeId">
             <summary>
            16 adsDataType of symbol
             </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.DataTypeId">
            <summary>
            Gets the DataType ID
            </summary>
            <value>The type of the ads data.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._flags">
            <summary>
            20 see above
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.Flags">
            <summary>
            Gets the flags of the <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/>
            </summary>
            <value>The flags.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._extendedFlags">
            <summary>
            ExtendedFlags
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.ExtendedFlags">
            <summary>
            Gets the extended symbol flags of the <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/>
            </summary>
            <value>The extended flags.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._reservedUShort">
            <summary>
            Reserved must be 0, legacy Array Dimension count (22)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._nameLength">
            <summary>
            24 length of symbol name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._typeNameLength">
            <summary>
            26 length of type name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._commentLength">
            <summary>
            //28 length of comment (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._name">
            <summary>
            Symbol name string (max. 30 characters on ADS Stream, C++ struct)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.Name">
            <summary>
            Gets the symbol name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsSymbolEntry.SetNameInternal(System.String)">
            <summary>
            Sets the name (only for internal purposes)
            </summary>
            <param name="name">The name.</param>
            <remarks>This method is only used by Measurement MQTT bridge (IRichter). Therefore it is stated as 'public'
            Be aware, that the nameLength and EntryLength of the <see cref="T:TwinCAT.Ads.Internal.AdsSymbolEntry"/> is not maintained for further use.
            </remarks>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._typeName">
            <summary>
            Symbol Type Name (30 +namelength +1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._comment">
            <summary>
            The comment (30 +namelength+1 +typelenght + 1)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.Comment">
            <summary>
            Gets the symbol comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._typeGuid">
            <summary>
            The type unique identifier (16 Bytes)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._attributeCount">
            <summary>
            The attribute count (2 Bytes)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.AttributeCount">
            <summary>
            Gets the attribute count.
            </summary>
            <value>The attribute count.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._attributeEntries">
            <summary>
            The attributes
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._refactorInfos">
            <summary>
            The refactor infos
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.RefactorInfos">
            <summary>
            Gets the refactor infos.
            </summary>
            <value>The refactor infos.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolEntry._reserved">
            <summary>
            The reserved
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsSymbolEntry.ContextMask">
            <summary>
            Gets the context mask of this instance.
            </summary>
            <value>The context mask.</value>
            <remarks>The Size of the internal data is 4-Bit</remarks>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsAttributeEntry">
            <summary>
            Class describing attribute entries.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsAttributeEntry._name">
            <summary>
            Attribute Name
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsAttributeEntry.Name">
            <summary>
            Gets the attribute name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsAttributeEntry._value">
            <summary>
            Gets the Attribute Value.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsAttributeEntry.Value">
            <summary>
            Gets the value of the Attribute
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsAttributeEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsAttributeEntry"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsAttributeEntry.#ctor(TwinCAT.TypeSystem.StringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsAttributeEntry" /> class.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsAttributeEntry.#ctor(TwinCAT.TypeSystem.ITypeAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsAttributeEntry"/> class.
            </summary>
            <param name="att">The att.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsAttributeEntry.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data into this <see cref="T:TwinCAT.Ads.Internal.AdsAttributeEntry"/> object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <exception cref="T:System.ArgumentNullException">marshaler</exception>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsAttributeEntry.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of the <see cref="T:TwinCAT.Ads.Internal.AdsAttributeEntry"/> object into the buffer.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">marshaler</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsAttributeEntry.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of this <see cref="T:TwinCAT.Ads.Internal.AdsAttributeEntry"/>.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.DataTypeFlagConverter">
            <summary>
            Class DataTypeFlagConverter.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.DataTypeFlagConverter.Convert(TwinCAT.Ads.Internal.AdsDataTypeFlags)">
            <summary>
            Converts <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeFlags"/> to <see cref="T:TwinCAT.Ads.Internal.AdsSymbolFlags"/>
            </summary>
            <param name="dataTypeFlags">The sub item flags.</param>
            <returns>AdsSymbolFlags.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.SubItemFlagConverter">
            <summary>
            Class DataTypeFlagConverter.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SubItemFlagConverter.Convert(TwinCAT.Ads.Internal.AdsDataTypeFlags)">
            <summary>
            Converts <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeFlags"/> to <see cref="T:TwinCAT.Ads.Internal.AdsSymbolFlags"/>
            </summary>
            <param name="dataTypeFlags">The sub item flags.</param>
            <returns>AdsSymbolFlags.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IAdsCustomMarshal`1">
            <summary>
            Interface IAdsCustomMarshal
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsCustomMarshal`1.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data into the <typeparamref name="T"/> type object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsCustomMarshal`1.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of <typeparamref name="T"/>
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsCustomMarshal`1.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of  <typeparamref name="T"/>.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IAdsEnumCustomMarshal`1">
            <summary>
            Interface IAdsEnumCustomMarshal
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsEnumCustomMarshal`1.Unmarshal(System.UInt32,TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data for the type <typeparamref name="T"/>.
            </summary>
            <param name="enumValueSize">The size of the Enum data type</param>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer..</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsEnumCustomMarshal`1.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of <typeparamref name="T"/>
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>The amount of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IAdsEnumCustomMarshal`1.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of  <typeparamref name="T"/>.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>The marshal size of the type <paramref name="marshaler"/>.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.SubStructureReader`1">
            <summary>
            Helper class Marshalling ADS Substructures.
            </summary>
            <typeparam name="T">Substructure to read elements of</typeparam>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SubStructureReader`1.Unmarshal(System.UInt32,TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte},`0[]@)">
            <summary>
            Unmarshals the specified amount of substructures from the reader.
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
            <param name="subStructures">The sub structures.</param>
            <returns>T[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SubStructureReader`1.Marshal(`0[],TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the specified sub structures.
            </summary>
            <param name="subStructures">The sub structures.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.SubStructureReader`1.MarshalSize(`0[],TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of the substructures.
            </summary>
            <param name="subStructures">The sub structures.</param>
            <param name="marshaler">The marshaler.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.EnumSubStructureReader`1">
            <summary>
            Helper class Marshalling Enum ADS Substructures
            </summary>
            <typeparam name="T">Enum substructure to read.</typeparam>
        </member>
        <member name="M:TwinCAT.Ads.Internal.EnumSubStructureReader`1.Unmarshal(System.UInt32,System.UInt32,TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte},`0[]@)">
            <summary>
            Unmarshals the specified element count.
            </summary>
            <param name="elementCount">The element count.</param>
            <param name="valueSize">Size of the value.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
            <param name="subStructures">The sub structures.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.EnumSubStructureReader`1.Marshal(`0[],TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the specified enum values.
            </summary>
            <param name="enumValues">The enum values.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.EnumSubStructureReader`1.MarshalSize(`0[],TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of the enum values.
            </summary>
            <param name="enumValues">The enum values.</param>
            <param name="marshaler">The marshaler.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsMethodEntry">
            <summary>
            Class AdsMethodEntry.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.entryLength">
            <summary>
            length of complete datatype entry
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.version">
            <summary>
            version of datatype structure
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.vTableIndex">
            <summary>
            vTable index of this method
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.returnSize">
            <summary>
            size of datatype ( in bytes )
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.returnAlignSize">
            <summary>
             size of biggest element for alignment
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.reserved">
            <summary>
            The reserved
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.returnTypeGuid">
            <summary>
            The return type unique identifier
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.returnDataType">
            <summary>
            adsDataType of symbol (if alias)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.flags">
            <summary>
            Internal option flags
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.nameLength">
            <summary>
            length of datatype name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.returnTypeLength">
            <summary>
            length of dataitem type name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.commentLength">
            <summary>
            length of comment (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.parameterCount">
            <summary>
            The parameter count
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.name">
            <summary>
            name of datatype with terminating \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.returnType">
            <summary>
             type name of dataitem with terminating \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.comment">
            <summary>
            comment of datatype with terminating \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodEntry.parameters">
            <summary>
            Parameters Collection
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsMethodEntry"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodEntry.#ctor(TwinCAT.TypeSystem.StringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsMethodEntry" /> class.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodEntry.#ctor(TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsMethodEntry"/> class.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodEntry.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content this <see cref="T:TwinCAT.Ads.Internal.AdsMethodEntry"/>.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodEntry.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data into the <see cref="T:TwinCAT.Ads.Internal.AdsMethodEntry"/> object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodEntry.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of this <see cref="T:TwinCAT.Ads.Internal.AdsMethodEntry"/> object.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsMethodParaInfo">
            <summary>
            Class AdsMethodParaInfo.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.entryLength">
            <summary>
            length of complete datatype entry
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.size">
            <summary>
            size of datatype ( in bytes )
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.alignSize">
            <summary>
            size of biggest element for alignment (biggest element used for marshalling ???)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.dataType">
            <summary>
            adsDataType of symbol (if alias)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.flags">
            <summary>
            The flags
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.reserved">
            <summary>
            The reserved
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.typeGuid">
            <summary>
            The type unique identifier
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.lengthIsPara">
            <summary>
            index-1 of corresponding parameter with length info - 0 = no para, 1 = first para...
            </summary>
            <remarks>This field references to the Parameter that defines the length for this
            generic one. Equally to the marshalling attributes of COM (sizeof, lenght)
            this enables to transport parameter of type (PVOID)
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.nameLength">
            <summary>
            length of datatype name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.typeLength">
            <summary>
            length of dataitem type name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.commentLength">
            <summary>
            length of comment (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.name">
            <summary>
            name of datatype with terminating \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.type">
            <summary>
            type name of dataitem with terminating \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsMethodParaInfo.comment">
            <summary>
            comment of datatype with terminating \0
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodParaInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsMethodParaInfo"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodParaInfo.#ctor(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsMethodParaInfo" /> class.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodParaInfo.#ctor(TwinCAT.TypeSystem.IRpcMethodParameter,TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsMethodParaInfo"/> class.
            </summary>
            <param name="para">The para.</param>
            <param name="marshaler">The marshaler.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodParaInfo.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of this <see cref="T:TwinCAT.Ads.Internal.AdsMethodParaInfo"/> object.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodParaInfo.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of this <see cref="T:TwinCAT.Ads.Internal.AdsMethodParaInfo"/> into the buffer.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsMethodParaInfo.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data into the <see cref="T:TwinCAT.Ads.Internal.AdsMethodParaInfo"/> object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsEnumInfoEntry">
            <summary>
            Class AdsEnumInfoEntry.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsEnumInfoEntry.nameLength">
            <summary>
            The name length
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsEnumInfoEntry.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsEnumInfoEntry.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsEnumInfoEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsEnumInfoEntry"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsEnumInfoEntry.#ctor(System.String,System.Byte[],TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsEnumInfoEntry"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="marshaler">The marshaler.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsEnumInfoEntry.#ctor(System.UInt32,TwinCAT.TypeSystem.StringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsEnumInfoEntry" /> class.
            </summary>
            <param name="valueSize">Size of the value.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsEnumInfoEntry.Unmarshal(System.UInt32,TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals the specified value size.
            </summary>
            <param name="valueSize">Size of the value.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
            <returns>System.ValueTuple&lt;System.Boolean, System.Int32&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsEnumInfoEntry.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of this <see cref="T:TwinCAT.Ads.Internal.AdsEnumInfoEntry"/> object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>The amount of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsEnumInfoEntry.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of this <see cref="T:TwinCAT.Ads.Internal.AdsEnumInfoEntry"/> object.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>The marshal size of the type <paramref name="marshaler"/>.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsFieldEntry">
            <summary>
            Class AdsFieldEntry (for internal use only)
            </summary>
            <seealso cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry" />
            <seealso cref="T:TwinCAT.Ads.Internal.IAdsCustomMarshal`1" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsFieldEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsFieldEntry"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsFieldEntry.#ctor(TwinCAT.TypeSystem.IMember)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsFieldEntry"/> class.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsFieldEntry.SubItemName">
            <summary>
            Gets the name of the sub item.
            </summary>
            <value>The name of the sub item.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsFieldEntry.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the specified marshaler.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsFieldEntry.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Marshals the size.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsFieldEntry.IsStatic">
            <summary>
            Gets a value indicating whether the <see cref="T:TwinCAT.Ads.Internal.AdsFieldEntry"/> is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsFieldEntry.IsProperty">
            <summary>
            Gets a value indicating whether the <see cref="T:TwinCAT.Ads.Internal.AdsFieldEntry"/> is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsFieldEntry.IsSubItem">
            <summary>
            Determines whether this object is an SubItem (DataType Member, true) or a native DataType (false)
            </summary>
            <value><c>true</c> if this instance is sub item; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsRefactorInfo">
            <summary>
            Class AdsRefactorInfo.
            Implements the <see cref="T:TwinCAT.Ads.Internal.IAdsCustomMarshal`1" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.Internal.IAdsCustomMarshal`1" />
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsRefactorInfo.RefactorCount">
            <summary>
            Gets the refactor count.
            </summary>
            <value>The refactor count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsRefactorInfo.NextRefactorInfo">
            <summary>
            Gets a value indicating whether [next refactor information].
            </summary>
            <value><c>true</c> if [next refactor information]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsRefactorInfo.Name">
            <summary>
            Gets the name of the RefactorInfo
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsRefactorInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsRefactorInfo"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsRefactorInfo.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of <see cref="T:TwinCAT.Ads.Internal.AdsRefactorInfo"/> />
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsRefactorInfo.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of  <see cref="T:TwinCAT.Ads.Internal.AdsRefactorInfo"/> />.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsRefactorInfo.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data into the <see cref="T:TwinCAT.Ads.Internal.AdsRefactorInfo"/> type object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsSoftwareProtection">
            <summary>
            Class AdsSoftwareProtection.
            Implements the <see cref="T:TwinCAT.Ads.Internal.IAdsCustomMarshal`1" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.Internal.IAdsCustomMarshal`1" />
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsDataTypeEntry">
            <summary>
            Class AdsDatatypeEntry (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._entryLength">
            <summary>
            0 length of complete datatype entry
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._version">
            <summary>
            4 version of datatype structure
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._hashValue">
            <summary>
            8 hashValue of datatype to compare datatypes
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._typeHashValue">
            <summary>
            12 hashValue of base type / Code Offset to setter Method (typeHashValue or offsSetCode)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.TypeHashValue">
            <summary>
            ashValue of base type / Code Offset to setter Method (typeHashValue or offsSetCode)
            </summary>
            <value>The type hash value.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._size">
            <summary>
            16 size of datatype ( in bytes or bits depending on the BitValues flag )
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._offset">
            <summary>
            20 offs of dataitem in parent datatype ( in bytes or bits depending on the BitValues flag )
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Offset">
            <summary>
            Gets the offset of the SubItem
            </summary>
            <value>The offset.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._baseTypeId">
            <summary>
            24 adsDataType of symbol (if alias)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._flags">
            <summary>
            The flags (28)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Flags">
            <summary>
            Gets the DataType Flags
            </summary>
            <value>The flags.</value>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._entryNameLength">
            <summary>
            length 32 length of datatype name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._typeNameLength">
            <summary>
            34 length of dataitem type name (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._commentLength">
            <summary>
            36 length of comment (excl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._arrayDim">
            <summary>
            38, count of array dimensions
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._subItems">
            <summary>
            40, count of SubItems
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.SubItemCount">
            <summary>
            Gets the number of SubItems.
            </summary>
            <value>The sub item count.</value>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._entryName">
            <summary>
            42, Name of the Entry (Name of the DataType on DataType, Fieldname on Field / SubItem)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._typeName">
            <summary>
            Datatype name (42 + nameLength + 1 ) (only for fields)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._comment">
            <summary>
            Comment (42 + typeLength +1 + typeLength+1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._arrayInfos">
            <summary>
            The array infos
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._subEntries">
            <summary>
            The sub entries
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._typeGuid">
            <summary>
            The type unique identifier
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._copyMask">
            <summary>
            The copy mask
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._methodCount">
            <summary>
            The method count
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._methods">
            <summary>
            The methods
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._attributeCount">
            <summary>
            The attribute count
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._attributes">
            <summary>
            The attributes
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._enumInfoCount">
            <summary>
            The enum information count
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._enums">
            <summary>
            The enums
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._reserved">
            <summary>
            The reserved
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry.s_idCount">
            <summary>
            The s_id count
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._rootEntry">
            <summary>
            The _root entry
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeEntry._id">
            <summary>
            The _id
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsDataTypeEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsDataTypeEntry.#ctor(TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="symbolNameMarshaler">The symbol name marshaler.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsDataTypeEntry.#ctor(System.Boolean,TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry" /> class.
            </summary>
            <param name="rootEntry">if set to <c>true</c> [root entry].</param>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.MinMarshalSize">
            <summary>
            Gets the minimum MarshalSize
            </summary>
            <value>The minimum size of the marshal.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsDataTypeEntry.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of this <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry"/>.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsDataTypeEntry.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of this <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry"/>.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsDataTypeEntry.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data into this <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry"/> object.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <exception cref="T:System.ArgumentNullException">marshaler</exception>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.IsSubItem">
            <summary>
            Determines whether this object is an SubItem (DataType Member, true) or a native DataType (false)
            </summary>
            <value><c>true</c> if this instance is sub item; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.HasAttributes">
            <summary>
            Gets a value indicating whether this instance has attributes.
            </summary>
            <value><c>true</c> if this instance has attributes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC methods.
            </summary>
            <value><c>true</c> if this instance has RPC methods; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
            <value>The size.</value>
            <remarks>If <see cref="P:TwinCAT.TypeSystem.IBitSize.IsBitType" /> indicates 'BitSize' then this value will be in Bits, otherwise Bytes.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.IsBitType">
            <summary>
            Indicates, that the <see cref="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Size" /> and Offset values of the SubItems are in Bit size
            </summary>
            <value><c>true</c> if this instance is bit size; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.IsAnySizeArray">
            <summary>
            Indicates, that the <see cref="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Size" /> and Offset values of the SubItems are in Bit size
            </summary>
            <value><c>true</c> if this instance is bit size; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.DataTypeId">
            <summary>
            Gets the data type identifier.
            </summary>
            <value>The data type identifier.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Name">
            <summary>
            Gets the name of the symbol.
            </summary>
            <value>Name of the symbol.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Attributes">
            <summary>
            Gets the attributes of the <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbol" />
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.RpcMethods">
            <summary>
            Gets the RPC method descriptions
            </summary>
            <value>The RPC methods.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.BaseTypeName">
            <summary>
            Gets the name of the base type (if enum, alias, array)
            </summary>
            <value>The name of the base type.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.Dimensions">
            <summary>
            Gets the dimensions of an array type
            </summary>
            <value>The array infos.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.EnumInfos">
            <summary>
            Gets the enum infos.
            </summary>
            <value>The enum infos.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.BitSize">
            <summary>
            Gets the size of this <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry"/> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.AdsDataTypeEntry.ByteSize">
            <summary>
            Gets the (aligned) size of of the Type/Instance in Bytes
            </summary>
            <value>The size of the byte.</value>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsDataTypeFactory">
            <summary>
            Factory class, producing <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/>s from <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.AdsDataTypeFactory.CreateType(TwinCAT.Ads.Internal.AdsDataTypeEntry,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Creates the type.
            </summary>
            <param name="entry">The entry.</param>
            <param name="factoryServices">The factory services.</param>
            <returns>DataType.</returns>
            <exception cref="T:TwinCAT.AdsException">Enum base type mismatch!</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsDataTypeEntryExtensions">
            <summary>
            Extension class for <see cref="T:TwinCAT.Ads.Internal.AdsDataTypeEntry"/>
            </summary>
            <remarks>Specifies some supporting methods.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.AdsClientServer">
            <summary>
            Server implementation for the <see cref="T:TwinCAT.Ads.AdsClient"/>.
            Implements the <see cref="T:TwinCAT.Ads.Server.AdsServer" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.Server.AdsServer" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientServer._requestThrottle">
            <summary>
            The request throttle indicates how many Requests can be send concurrently to one Server
            </summary>
            <remarks>-1 means there is no limit (as many Background threads as available from the Pool)
            API V4 worked internally with a throttle comparable to 1!
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.AdsClientServer.RequestThrottle">
            <summary>
            The request throttle indicates how many Requests can be send concurrently to one Server
            </summary>
            <remarks>-1 means there is no limit (as many Background threads as available from the Pool)
            API V4 worked internally with a throttle comparable to 1!
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientServer._requestThrottleSema">
            <summary>
            Semaphore used for the Request throttle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientServer._notificationReceiver">
            <summary>
            The notification receiver
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientServer._notificationScheduler">
            <summary>
            The notification scheduler
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnConnected">
            <summary>
            Handler function that is called, when the <see cref="T:TwinCAT.Ads.Server.AdsServer" /> is connected.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnDisconnect">
            <summary>
            Called when the <see cref="T:TwinCAT.Ads.Server.AdsServer" /> is about to be disconnected.
            </summary>
            <returns><c>true</c> if disconnected, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientServer._invokeIdDict">
            <summary>
            Invoke Dictionary InvokeID --&gt;> IRequestCompletionSource
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientServer._invokeIdSync">
            <summary>
            Invoke Dictionary InvokeID --&gt;> ManuelResetEventSlim
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestAsync``2(System.Func{System.UInt32,``0},System.Func{System.UInt32,System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode}},System.Func{TwinCAT.Ads.AdsErrorCode,System.UInt32,``1},System.Action{``1},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Request as an asynchronous operation.
            </summary>
            <typeparam name="S">The Request completion source.</typeparam>
            <typeparam name="R">The communication result (ADS Result)</typeparam>
            <param name="createCompletionSource">The create completion source.</param>
            <param name="request">The request.</param>
            <param name="createDefaultResult">The create default result.</param>
            <param name="confirmResult">Called when the Result is ready (after received Ads confirmation) to confirm the result.</param>
            <param name="timeout">The timeout in ms.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;R&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnReadDeviceInfoConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.String,TwinCAT.Ads.AdsVersion,System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Read Write confirmation is received.
            Overwrite this method in derived classes to react on ADS Read Write confirmations.
            </summary>
            <param name="target">The target address.</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnReadWriteConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" /> operation. The <see cref="T:System.Threading.Tasks.Task`1" /> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> as
            <see cref="P:System.Threading.Tasks.Task`1.Result" />.</returns>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientServer.s_confirmationTimeout">
            <summary>
            Default Confirmation Timeout (2 min)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestAndReceiveSync``2(System.Func{System.UInt32,``0},System.Func{System.UInt32,TwinCAT.Ads.AdsErrorCode},System.Func{TwinCAT.Ads.AdsErrorCode,System.UInt32,``1},System.Action{``1},System.Int32)">
            <summary>
            Sending an Request synchronously and waiting for the result.
            </summary>
            <typeparam name="S"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="createCompletionSource">The create completion source.</param>
            <param name="request">The request.</param>
            <param name="createDefaultResult">The create default result.</param>
            <param name="confirmResult">Called when the Result is ready (after received Ads confirmation) to confirm the result.</param>
            <param name="timeout">The timeout.</param>
            <returns>Task&lt;R&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestReadDeviceStateAsync(System.Func{System.UInt32,System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode}},System.Action{TwinCAT.Ads.ResultReadDeviceState},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends the AdsRequest for a ReadState operation asynchronously
            </summary>
            <param name="readStateRequest">The inner request / operation.</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The Request timeout.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;TaskResultReadState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestReadDeviceState(System.Func{System.UInt32,TwinCAT.Ads.AdsErrorCode},System.Action{TwinCAT.Ads.ResultReadDeviceState},System.Int32)">
            <summary>
            Sends the AdsRequest for a ReadDeviceState operation (synchronous)
            </summary>
            <param name="timeout">The Request timeout.</param>
            <param name="readStateRequest">The inner request / operation.</param>
            <param name="confirmResult">The confirm result.</param>
            <returns>Task&lt;TaskResultReadState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestReadDeviceInfoAsync(System.Func{System.UInt32,System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode}},System.Action{TwinCAT.Ads.ResultDeviceInfo},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends the AdsRequest for a ReadDeviceInfo operation (asynchronously)
            </summary>
            <param name="readStateRequest">The inner request / operation.</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The Request timeout.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;TaskResultReadState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestReadDeviceInfoSync(System.Func{System.UInt32,TwinCAT.Ads.AdsErrorCode},System.Action{TwinCAT.Ads.ResultDeviceInfo},System.Int32)">
            <summary>
            Sends the AdsRequest for a ReadDeviceInfo operation (Synchronously)
            </summary>
            <param name="readStateRequest">The inner request / operation.</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The Request timeout.</param>
            <returns>Task&lt;TaskResultReadState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestReadAsync(System.Func{System.UInt32,System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode}},System.Action{TwinCAT.Ads.ResultRead},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends an asynchronous read request 
            </summary>
            <param name="readRequest">The inner request operation.</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The timeout.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;TaskResultRead&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestAsync(System.Func{System.UInt32,System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode}},System.Action{TwinCAT.Ads.ResultAds},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends an asynchronous AdsRequest for a Simple Ads Call (without return value, just AdsErrorCode)
            </summary>
            <param name="request">The inner request/operation.</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The Request timeout.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;TaskResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestAndReceiveSync(System.Func{System.UInt32,TwinCAT.Ads.AdsErrorCode},System.Action{TwinCAT.Ads.ResultAds},System.Int32)">
            <summary>
            Sends an Request for a simple Ads Call (without return value, just AdsErrorCode) and waits for the response (synchronous)
            </summary>
            <param name="request">The inner request/operation.</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The Request timeout.</param>
            <returns>Task&lt;TaskResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestReadBytesAsync(System.Func{System.UInt32,System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode}},System.Action{TwinCAT.Ads.ResultReadBytes},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends the AdsRequest asynchronously for operations that return data (Read, ReadWrite requests)
            </summary>
            <param name="readRequest">The inner read / readWrite operation</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The timeout.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>Task&lt;TaskResultReadBytes&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestAndReceiveReadBytesSync(System.Func{System.UInt32,TwinCAT.Ads.AdsErrorCode},System.Action{TwinCAT.Ads.ResultReadBytes},System.Int32)">
            <summary>
            Sends the AdsRequest and receives synchronously return data (Read, ReadWrite requests)
            </summary>
            <param name="readRequest">The inner read / readWrite operation</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The timeout.</param>
            <returns>Task&lt;TaskResultReadBytes&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestHandleAsync(System.Func{System.UInt32,System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode}},System.Action{TwinCAT.Ads.ResultHandle},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends the AdsRequest for an operation that returns ADS handles (asynchronously)
            </summary>
            <param name="handleRequest">The handle request operation</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The timeout.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;TaskResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.RequestAndReceiveHandleSync(System.Func{System.UInt32,TwinCAT.Ads.AdsErrorCode},System.Action{TwinCAT.Ads.ResultHandle},System.Int32)">
            <summary>
            Sends the AdsRequest and receive synchronously for an operation that returns ADS handles.
            </summary>
            <param name="handleRequest">The handle request operation</param>
            <param name="confirmResult">The confirm result.</param>
            <param name="timeout">The timeout.</param>
            <returns>Task&lt;TaskResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ConfirmRequest``2(TwinCAT.Ads.AmsAddress,System.UInt32,``1)">
            <summary>
            Confirms the outstanding request with the specified invokeId
            </summary>
            <typeparam name="S">The type of the TaskCompletionSource"/&gt;</typeparam>
            <typeparam name="R">The <see cref="T:TwinCAT.Ads.ResultAds" /> type.</typeparam>
            <param name="sourceAddress">Source address of the confirmation.</param>
            <param name="invokeId">Source address of the confirmation.</param>
            <param name="result">The TaskResult</param>
            <returns><c>true</c> if the the request is confirmed, otherwise false (Timeout???)</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ConfirmRequest(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.ResultReadBytes)">
            <summary>
            Confirms the outstanding Read Bytes request with the specified invokeID.
            </summary>
            <param name="sourceAddress">The source Address.</param>
            <param name="invokeId">The invoke identifier.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ConfirmRequest(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.ResultReadDeviceState)">
            <summary>
            Confirms the outstanding ReadState-Request with the specified invoke id.
            </summary>
            <param name="sourceAddress">The source address.</param>
            <param name="invokeId">The invoke identifier.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ConfirmRequest(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.ResultHandle)">
            <summary>
            Confirms the outstanding Handle-Request with the specified invoke id.
            </summary>
            <param name="sourceAddress">The source address.</param>
            <param name="invokeId">The invoke identifier.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ConfirmRequest(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.ResultAds)">
            <summary>
            Confirms the outstanding Request with the specified invoke id.
            </summary>
            <param name="sourceAddress">The source address.</param>
            <param name="invokeId">The invoke identifier.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnReadDeviceStateConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsState,System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Read State confirmation is received.
            Overwrite this method in derived classes to react on ADS Read State confirmations.
            </summary>
            <param name="target">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="result">The ADS error code provided by the sender</param>
            <param name="adsState">The ADS state of the sender</param>
            <param name="deviceState">The device state of the sender</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnReadDeviceStateConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsState,System.UInt16,System.Threading.CancellationToken)" /> operation. The <see cref="T:System.Threading.Tasks.Task`1" /> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> as
            <see cref="P:System.Threading.Tasks.Task`1.Result" />.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnReadConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Read confirmation is received.
            Overwrite this method in derived classes to react on ADS Read confirmations.
            </summary>
            <param name="sender">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="errorCode">The ADS error code provided by the sender</param>
            <param name="readData">The read data buffer</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnReadConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/> operation. The <see cref="T:System.Threading.Tasks.Task`1"/> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode"/> as
            <see cref="P:System.Threading.Tasks.Task`1.Result"/>.
            </returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnWriteConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Write confirmation is received.
            </summary>
            <remarks>
            Overwrite this method in derived classes to react on ADS Write confirmations.
            </remarks>
            <param name="target">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="errorCode">The ADS error code provided by the sender</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnWriteConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.Threading.CancellationToken)" /> operation. The <see cref="T:System.Threading.Tasks.Task`1" /> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> as
            <see cref="P:System.Threading.Tasks.Task`1.Result" />.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnReadWriteConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Read Write confirmation is received.
            Overwrite this method in derived classes to react on ADS Read Write confirmations.
            </summary>
            <param name="address">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="errorCode">The ADS error code provided by the sender</param>
            <param name="readData">The read data buffer</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnReadWriteConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" /> operation. The <see cref="T:System.Threading.Tasks.Task`1" /> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> as
            <see cref="P:System.Threading.Tasks.Task`1.Result" />.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnAddDeviceNotificationConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Add Device Notification confirmation is received.
            Overwrite this method in derived classes to react on ADS Add Device Notification confirmations.
            </summary>
            <param name="target">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="errorCode">The ADS error code provided by the sender</param>
            <param name="notificationHandle">The notification handle provided by the sender</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnAddDeviceNotificationConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.UInt32,System.Threading.CancellationToken)" /> operation. The <see cref="T:System.Threading.Tasks.Task`1" /> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> as
            <see cref="P:System.Threading.Tasks.Task`1.Result" />.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnDeleteDeviceNotificationConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Delete Device Notification confirmation is received.
            Overwrite this method in derived classes to react on ADS Delete Device Notification confirmations.
            </summary>
            <param name="target">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="errorCode">The ADS error code provided by the sender</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnDeleteDeviceNotificationConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.Threading.CancellationToken)" /> operation. The <see cref="T:System.Threading.Tasks.Task`1" /> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> as
            <see cref="P:System.Threading.Tasks.Task`1.Result" />.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnWriteControlConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.Threading.CancellationToken)">
            <summary>
            Called when an ADS Write Control confirmation is received.
            Overwrite this method in derived classes to react on ADS Write Control confirmations.
            </summary>
            <param name="target">The sender's AMS address</param>
            <param name="invokeId">The invoke id provided by this server during the corresponding request</param>
            <param name="errorCode">The ADS error code provided by the sender</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous <see cref="M:TwinCAT.Ads.AdsClientServer.OnWriteControlConfirmationAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsErrorCode,System.Threading.CancellationToken)" /> operation. The <see cref="T:System.Threading.Tasks.Task`1" /> parameter contains the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> as
            <see cref="P:System.Threading.Tasks.Task`1.Result" />.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ReadDeviceInfoRequestSync(TwinCAT.Ads.AmsAddress,System.UInt32)">
            <summary>
            Sends an ReadDeviceInfo request operation (synchronously)
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ReadRequestAsync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Sends an ReadRequest asynchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="length">The length of the data to read.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ReadWriteRequestAsync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Sends an ReadWriteRequest asynchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readLength">Length of the read.</param>
            <param name="writeData">The data to write.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ReadWriteRequestSync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Sends a synchronous ReadWriteRequest.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readLength">Length of the read.</param>
            <param name="span">The span.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.WriteControlRequestAsync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsState,System.UInt16,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Sends an asynchronous WriteControlRequest.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="adsState">State of the ads.</param>
            <param name="deviceState">State of the device.</param>
            <param name="span">The span.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.WriteControlRequestSync(TwinCAT.Ads.AmsAddress,System.UInt32,TwinCAT.Ads.AdsState,System.UInt16,System.ReadOnlySpan{System.Byte})">
            <summary>
            Sends a synchronous WriteControlRequest.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="adsState">State of the ads.</param>
            <param name="deviceState">State of the device.</param>
            <param name="span">The span.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ReadDeviceStateRequestAsync(TwinCAT.Ads.AmsAddress,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Sends and asynchronous ReadDeviceStateRequest.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="cancel">Cancellation token</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ReadDeviceStateRequestSync(TwinCAT.Ads.AmsAddress,System.UInt32)">
            <summary>
            Sends an ReadDeviceState Request synchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.ReadRequestSync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Sends an ReadRequest synchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="length">The length.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.WriteRequestAsync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Sends an WriteRequest asynchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="span">The span.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.WriteRequestSync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Sends an WriteRequest synchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="span">The span.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.AddDeviceNotificationRequestAsync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Threading.CancellationToken)">
            <summary>
            Sends an AddDeviceNotificationRequest Asynchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="settings">The settings.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.DeleteDeviceNotificationRequestAsync(TwinCAT.Ads.AmsAddress,System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Sends an DeleteDeviceNotification asynchronously.
            </summary>
            <param name="target">The target.</param>
            <param name="id">The identifier.</param>
            <param name="handle">The handle.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientServer.OnRouterNotification(TwinCAT.Ads.AmsRouterState)">
            <summary>
            Handler Function for a Router Notification.
            </summary>
            <param name="state">The route state.</param>
        </member>
        <member name="T:TwinCAT.Ads.TransportProtocols">
            <summary>
            Enum ADS TransportProtocol
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TransportProtocols.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TransportProtocols.Router">
            <summary>
            ADS via Router
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TransportProtocols.TcpIp">
            <summary>
            ADS via TCP/IP (without router)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TransportProtocols.All">
            <summary>
            Indicates that <see cref="F:TwinCAT.Ads.TransportProtocols.Router"/> and <see cref="F:TwinCAT.Ads.TransportProtocols.TcpIp"/> are appropriate (for establishing connections)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsClientSettings">
            <summary>
            Settings object for the <see cref="T:TwinCAT.Ads.AdsClient"/> class.
            </summary>
            <remarks>This <see cref="T:TwinCAT.Ads.AdsClientSettings" /> object is used to initalize the <see cref="T:TwinCAT.Ads.AdsClient" /> with application appropriate
            settings.
            Several predefined application dependant settings are available as static properties:
            <list type="bullet">
            <item><see cref="P:TwinCAT.Ads.AdsClientSettings.Default"/></item>
            <item><see cref="P:TwinCAT.Ads.AdsClientSettings.FastWriteThrough"/></item>
            <item><see cref="P:TwinCAT.Ads.AdsClientSettings.CompatibilityDefault"/></item>
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientSettings.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TwinCAT.Ads.AdsClientSettings"/> class from being created.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientSettings.#ctor(System.Int32)">
            <summary>
            Creates a Default settings <see cref="T:TwinCAT.Ads.AdsClientSettings"/> object with custom timeout.
            </summary>
            <param name="timeout">The timeout of the <see cref="T:TwinCAT.Ads.AdsClient"/> in milliseconds.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsClientSettings.Default">
            <summary>
            Gets the default settings (Default interceptors, Timout 5000 ms)
            </summary>
            <value>The default.</value>
            <remarks>Creates an settings object, with specification for <see cref="F:TwinCAT.Ads.TransportProtocols.All"/> and
            <see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/>.
            <list type="bullet">
            <item><description><see cref="F:TwinCAT.Ads.TransportProtocols.All"/></description></item>
            <item><description><see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/> is active.</description></item>
            <item><description>Default communication timeout 5000ms.</description></item>
            <item><description>Not synchronized Notifications.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.AdsClientSettings.FastWriteThrough">
            <summary>
            Gets a Settings object that configures the AdsClient for FastWriteThrough
            </summary>
            <value>Client settings for a fast write through (with 200 ms Timeout).</value>
            <remarks>The settings typically can be used for polling clients, where the "FailFast"
            feature will be bypassed. That means, that communication fails doesn't trigger
            the FailFast interceptor and every Request will go out via ADS.
            This has the Drawback that communication Timeouts are longer and subsequent timeouts
            block the ADS mailbox (with the danger of overflows). So use this setting with care 
            for specific purposes and should not be used for standard communication.
            <list type="bullet">
            <item><description>No <see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/> active.</description></item>
            <item><description>Default communicationtimeout 200ms.</description></item>
            <item><description>Not synchronized Notifications.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.AdsClientSettings.CompatibilityDefault">
            <summary>
            Compatibility settings object
            </summary>
            <value>The settings object.</value>
            <remarks>The compatibility settings intitialize the AdsClient the same way
            as it is done in earlier versions of the TwinCAT.Ads.dll (earlier than Version 4.2)
            <list type="bullet">
            <item><description><see cref="F:TwinCAT.Ads.TransportProtocols.All"/></description></item>
            <item><description>No <see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/> active.</description></item>
            <item><description>Default communicationtimeout 5000ms.</description></item>
            <item><description>Synchronized Notifications.</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsClientSettings._protocol">
            <summary>
            The Protocol settings
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsClientSettings.Protocol">
            <summary>
            Gets the protocol settings
            </summary>
            <value>The protocol.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsClientSettings.Interceptors">
            <summary>
            Gets the interceptors.
            </summary>
            <value>The interceptors.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientSettings.CreateDefaultInterceptors">
            <summary>
            Creates the default interceptors.
            </summary>
            <returns>CommunicationInterceptors.</returns>
            <remarks>The Default is to create a FailFastHandlerInterceptor, which is the default now also for a standard <see cref="T:TwinCAT.Ads.AdsClient"/>
            </remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsClientSettings.Timeout">
            <summary>
            The communication Timeout that is set initially on the <see cref="T:TwinCAT.Ads.AdsClient"/>
            </summary>
            <value>The timeout.</value>
            <remarks>Setting the Settings Timeout doesn't change the IConnection timout after the
            connection is established.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.TaskResultExtensions">
            <summary>
            Extension class for <see cref="T:TwinCAT.Ads.ResultAds"/>
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TaskResultExtensions.ThrowOnError(TwinCAT.Ads.ResultAds)">
            <summary>
            Throws an error, if the <see cref="T:TwinCAT.Ads.ResultAds"/> has failed.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorException">
            <summary>
            The exception that is thrown when an ADS error occurs.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorException._errorCode">
            <summary>
            The _error code
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.#ctor">
            <summary>
            Initializes a new Instance of the AdsErrorException class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.#ctor(System.String,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new Instance of the AdsErrorException class.
            </summary>
            <param name="message">The message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsErrorException"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsErrorException.ErrorCode">
            <summary>
            Gets the error code of the Exception.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.Create(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates the AdsErrorException
            </summary>
            <param name="adsErrorCode">The ads error code.</param>
            <returns>AdsErrorException.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.Create(System.String,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates the AdsErrorException
            </summary>
            <param name="message">The message.</param>
            <param name="adsErrorCode">The ads error code.</param>
            <returns>AdsErrorException.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.CreateException(System.String,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates the an exception object from Error Code
            </summary>
            <param name="message">The message.</param>
            <param name="adsErrorCode">The ads error code.</param>
            <returns>AdsErrorException.</returns>
            <exception cref="T:System.ArgumentException">No error indicated!;adsErrorCode</exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:TwinCAT.Ads.AdsInvalidNotificationException">
            <summary>
            This AdsInvalidNotificationException is created if the length of the notification data is 0.
            This indicates that the notification handle is not valid any more. This exception is passed
            to the AdsNotificationErrorEvent.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsInvalidNotificationException._handle">
            <summary>
            The _handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsInvalidNotificationException._timeStamp">
            <summary>
            The _time stamp
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsInvalidNotificationException.#ctor(System.UInt32,System.DateTimeOffset)">
            <summary>
            Initializes the class AdsInvalidNotificationException.
            </summary>
            <param name="handle">The handle.</param>
            <param name="timeStamp">The time stamp.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsInvalidNotificationException.Handle">
            <summary>
            Handle of the notification.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsInvalidNotificationException.TimeStamp">
            <summary>
            Gets the Time stamp as long
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsInvalidNotificationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="M:TwinCAT.Ads.AdsInvalidNotificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsInvalidNotificationException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.Ads.AdsSumCommandException">
            <summary>
            The exception that is thrown when an ADS SumCommandBase error occurs.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsSumCommandException.#ctor(System.String,TwinCAT.Ads.SumCommand.ISumCommand)">
            <summary>
            Initializes a new Instance of the AdsErrorException class.
            </summary>
            <param name="message">The message.</param>
            <param name="command">The command.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsSumCommandException.SumCommand">
            <summary>
            Gets the sum command.
            </summary>
            <value>The sum command.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsSumCommandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="M:TwinCAT.Ads.AdsSumCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSumCommandException"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.Ads.Extensions.ConnectionStateExtension">
            <summary>
            Class ConnectionStateExtension.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.WaitForTargetState(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.Ads.AdsState},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits until the target AdsServer reaches the requested state.
            </summary>
            <param name="connection">The client.</param>
            <param name="endingStates">The requested states / EndingStates</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="waitTimeout">The timeout.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns><c>true</c> if the requestedState was reached, <c>false</c> if WaitUntilTargetState ran into the waitTimeout.</returns>
            <remarks> The polling rate should not be faster than the client timeout.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.WaitForTargetStateAsync(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.Ads.AdsState},System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits until the target AdsServer reaches the requested state (asynchronous)
            </summary>
            <param name="client">The client.</param>
            <param name="endingStates">The requested states / endingStates</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="waitTimeout">The timeout.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Boolean&gt; representing if the requested state was reached (true), or the method ran into timeout (false).</returns>
            <remarks> The polling rate should not be faster than the client timeout.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.PollAdsState(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit})">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadAdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trigger">The polling trigger</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.PollAdsState(TwinCAT.Ads.IAdsConnection,System.TimeSpan)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.ResultReadAdsState" />s via Polling.
            </summary>
            <param name="connection">The connnection.</param>
            <param name="pollingIntervall">The polling interval.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.PollAdsStateAsync(TwinCAT.Ads.IAdsConnection,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="pollingInterval">The interval.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.PollAdsStateAsync(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit},System.Threading.CancellationToken)">
            <summary>
            Gets an observable sequence of <see cref="T:TwinCAT.Ads.AdsState" />s via Polling.
            </summary>
            <param name="connection">The connection.</param>
            <param name="trigger">The polling trigger</param>
            <param name="cancel">The cancellation token.</param>
            <returns>IObservable&lt;AdsState&gt;.</returns>
            <example>
            The following sample shows how observe <see cref="T:TwinCAT.Ads.AdsState" /> via polling with the reactive <see cref="T:TwinCAT.Ads.AdsClientExtensions" /><code language="C#" title="Observe changing ADS States with reactive extensions." source="..\..\Samples\TwinCAT.ADS.NET_Samples\80_ADS.NET_Reactive\Program.cs" region="CODE_SAMPLE_STATECHANGEPOLLING" /></example>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.WaitForStateChangeAsync(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.AdsState,System.TimeSpan,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits until the target AdsServer reaches the requested state (asynchronous)
            </summary>
            <param name="connection">The client.</param>
            <param name="startState">The starting/original state to start from.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="ignoreInvalidState">if set to <c>true</c> [ignore invalid state].</param>
            <param name="waitTimeout">The wait timeout.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>System.ValueTuple&lt;System.Boolean, AdsState, TimeSpan&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.calcEndingStates(TwinCAT.Ads.AdsState,System.Int32,System.Boolean@)">
            <summary>
            Calculates the ending states.
            </summary>
            <param name="command">The command.</param>
            <param name="port">The port.</param>
            <param name="necessaryStateChange">if set to <c>true</c> [necessary state change].</param>
            <returns>System.Nullable&lt;AdsState&gt;[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.calcNoChangeState(TwinCAT.Ads.AdsStateCommand,System.Int32)">
            <summary>
            Calculates the state that can be used for the noReinit setting.
            </summary>
            <param name="command">The command.</param>
            <param name="port">The port.</param>
            <returns>AdsState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.calcEndingStates(TwinCAT.Ads.AdsStateCommand,System.Int32,System.Boolean@)">
            <summary>
            Calculates the ending states.
            </summary>
            <param name="command">The command.</param>
            <param name="port">The port.</param>
            <param name="necessaryStateChange">if set to <c>true</c> [necessary state change].</param>
            <returns>System.Nullable&lt;AdsState&gt;[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.SetAdsState(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.AdsStateCommand,System.TimeSpan,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary>
            Sets an AdsState/AdsStateCommand to an AdsServer and waits until the StateChange finishes.
            </summary>
            <param name="connection">The connection.</param>
            <param name="requested">The requested state / command.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="waitTimeout">The wait timeout.</param>
            <param name="noReinit">Checks first for the actual state and decides to return immediatly if the device is already in the expected target state.  This is a <see cref="F:TwinCAT.Ads.AmsPort.SystemService"/> specific.</param>
            <param name="noWait">if set to <c>true</c> [no wait].</param>
            <returns>ResultWriteControl.</returns>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exception cref="T:TwinCAT.AdsException">Polling rate higher than connection timeout!</exception>
            <exception cref="T:TwinCAT.AdsException">Cannot set '{address}' to '{requested}'. This would leave the target system unavailable for ADS!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Extensions.ConnectionStateExtension.SetAdsStateAsync(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.AdsStateCommand,System.TimeSpan,System.TimeSpan,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sets an AdsState/AdsStateCommand to an AdsServer and waits until the StateChange finishes.
            </summary>
            <param name="connection">The connection.</param>
            <param name="requested">The requested state / command.</param>
            <param name="pollingRate">The polling rate.</param>
            <param name="waitTimeout">The wait timeout.</param>
            <param name="noReinit">Checks first for the actual state and decides to return immediatly if the device is already in the expected target state. This is a <see cref="F:TwinCAT.Ads.AmsPort.SystemService"/> specific.</param>
            <param name="noWait">if set to <c>true</c> [no wait].</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>ResultWriteControl.</returns>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exception cref="T:TwinCAT.AdsException">Polling rate higher than connection timeout!</exception>
            <exception cref="T:TwinCAT.AdsException">Cannot set '{address}' to '{requested}'. This would leave the target system unavailable for ADS!</exception>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorCodeExtension2">
            <summary>
            Extension class for <see cref="T:TwinCAT.Ads.AdsErrorCode"/>.
            </summary>
            <seealso cref="T:TwinCAT.Ads.AdsErrorCodeExtension"/>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorCodeExtension2.ThrowOnError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Throws an <see cref="T:TwinCAT.Ads.AdsErrorException" /> with the specified error code.
            </summary>
            <param name="adsErrorCode">The ads error code.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorCodeExtension2.ThrowOnError(TwinCAT.Ads.AdsErrorCode,System.String)">
            <summary>
            Throws an <see cref="T:TwinCAT.Ads.AdsErrorException" /> with the specified error code.
            </summary>
            <param name="message">The message.</param>
            <param name="adsErrorCode">The ads error code.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.ICommunicationInterceptor">
            <summary>
            Interface for intercepting communication
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.ICommunicationInterceptor.ID">
            <summary>
            Gets the identifier of the <see cref="T:TwinCAT.Ads.ICommunicationInterceptor" />
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.Communicate(System.Boolean,System.Func{System.Boolean,TwinCAT.Ads.ResultAds})">
            <summary>
            Communication handler
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="action">The communication action to be called.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.CommunicateAsync``1(System.Func{System.Boolean,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Communication handler (asynchronous)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The communication action to be called.</param>
            <param name="resurrect">Resurrection flag.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object representing the 'Communication' operation, returning a future result <typeparamref name="T" />.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.Connect(System.Func{TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Handler function for establishing the communication connection
            </summary>
            <param name="action">Wrapped handler function.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.BeforeDisconnect(System.Func{TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Handler function for shutting the communication connection down.
            </summary>
            <param name="action">Wrapped handler function.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.Disconnect(System.Func{TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Handler function for shutting the communication connection down.
            </summary>
            <param name="action">Wrapped handler function.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.CommunicateReadState(System.Func{TwinCAT.Ads.ResultReadDeviceState})">
            <summary>
            Interceptor handler for 'ReadState'
            </summary>
            <param name="action">The read state action.</param>
            <returns>ResultReadDeviceState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.CommunicateReadStateAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{TwinCAT.Ads.ResultReadDeviceState}},System.Threading.CancellationToken)">
            <summary>
            Asynchronous Interceptor handler for 'ReadState'
            </summary>
            <param name="action">The asynchronous action.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object representing the 'ReadState' operation, returning a future result <see cref="T:TwinCAT.Ads.ResultReadDeviceState"/> which contains the
            <see cref="P:TwinCAT.Ads.ResultReadDeviceState.State"/> and the communication result <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/></returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.CommunicateWriteState(System.Func{TwinCAT.Ads.ResultWrite},TwinCAT.Ads.StateInfo@)">
            <summary>
            Interceptor handler for 'WriteState'
            </summary>
            <param name="action">The write state action.</param>
            <param name="adsState">The ADS state.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptor.CommunicateWriteStateAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{TwinCAT.Ads.ResultWrite}},TwinCAT.Ads.StateInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronous handler for 'WriteState'
            </summary>
            <param name="action">The action.</param>
            <param name="adsState">State of the ads.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object representing the 'WriteState' operation, returning a future result <see cref="T:TwinCAT.Ads.ResultWrite"/> which contains the
            communication return code <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ICommunicationInterceptHandler">
            <summary>
            Interface ICommunicationInterceptHandler
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.BeforeCommunicate">
            <summary>
            Called before communication
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.AfterCommunicate(System.Boolean,TwinCAT.Ads.ResultAds)">
            <summary>
            Called after communication
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="result">Communication error/result.</param>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.BeforeConnect">
            <summary>
            Called before the communication channel is established.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.AfterConnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Called after the communication channel is established.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.BeforeDisconnect">
            <summary>
            Called before the communication channel shuts down.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.AfterDisconnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Called after the communication channel has shut down.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.BeforeWriteState(TwinCAT.Ads.StateInfo)">
            <summary>
            Called before an ADS state is written
            </summary>
            <param name="adsState">State of the ads.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.AfterWriteState(TwinCAT.Ads.StateInfo,TwinCAT.Ads.ResultAds)">
            <summary>
            Called after an ADS state is written.
            </summary>
            <param name="adsState">Ads state..</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.BeforeReadState">
            <summary>
            Called before the AdsState is read.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ICommunicationInterceptHandler.AfterReadState(TwinCAT.Ads.ResultReadDeviceState)">
            <summary>
            Called after the ADS state is read.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:TwinCAT.Ads.CommunicationInterceptor">
            <summary>
            Communication interceptor class (abstract base class for cross cutting communication issues).
            </summary>
            <remarks>The <see cref="T:TwinCAT.Ads.CommunicationInterceptor"/></remarks> is used for 'cross concern' communication issues. E.g. when a client has to interact just before and after
            the <see cref="T:TwinCAT.Ads.AdsClient"/> communicates with the connected AdsServer.
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.CommunicationInterceptor"/> class.
            </summary>
            <param name="id">The identifier.</param>
        </member>
        <member name="F:TwinCAT.Ads.CommunicationInterceptor._id">
            <summary>
            The Identifier
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.CommunicationInterceptor.ID">
            <summary>
            Gets the identifier of the <see cref="T:TwinCAT.Ads.ICommunicationInterceptor" />
            </summary>
            <value>The identifier.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.Communicate(System.Boolean,System.Func{System.Boolean,TwinCAT.Ads.ResultAds})">
            <summary>
            Communicates the specified action.
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="action">The action.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.CommunicateAsync``1(System.Func{System.Boolean,System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Communication handler (asynchronous)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The communication action to be called.</param>
            <param name="resurrect">Resurrection flag.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object representing the 'Communication' operation, returning a future result <typeparamref name="T" />.</returns>
            <exception cref="T:System.ArgumentNullException">action</exception>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.CommunicateReadState(System.Func{TwinCAT.Ads.ResultReadDeviceState})">
            <summary>
            Interceptor handler for 'ReadState'
            </summary>
            <param name="action">The read state action.</param>
            <returns>ResultReadDeviceState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.CommunicateReadStateAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{TwinCAT.Ads.ResultReadDeviceState}},System.Threading.CancellationToken)">
            <summary>
            Asynchronous Interceptor handler for 'ReadState'
            </summary>
            <param name="action">The asynchronous action.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object representing the 'ReadState' operation, returning a future result <see cref="T:TwinCAT.Ads.ResultReadDeviceState"/> which contains the
            <see cref="P:TwinCAT.Ads.ResultReadDeviceState.State"/> and the communication result <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/></returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.CommunicateWriteState(System.Func{TwinCAT.Ads.ResultWrite},TwinCAT.Ads.StateInfo@)">
            <summary>
            Interceptor handler for 'WriteState'
            </summary>
            <param name="action">The write state action.</param>
            <param name="adsState">The ADS state.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.CommunicateWriteStateAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{TwinCAT.Ads.ResultWrite}},TwinCAT.Ads.StateInfo,System.Threading.CancellationToken)">
            <summary>
            Asynchronous handler for 'WriteState'
            </summary>
            <param name="action">The action.</param>
            <param name="adsState">State of the ads.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object representing the 'WriteState' operation, returning a future result <see cref="T:TwinCAT.Ads.ResultWrite"/> which contains the
            communication return code <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.Connect(System.Func{TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Calls the specified connection action
            </summary>
            <param name="action">Wrapped handler function.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.BeforeDisconnect(System.Func{TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Handler function for shutting the communication connection down.
            </summary>
            <param name="action">Wrapped handler function.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.Disconnect(System.Func{TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Handler function for shutting the communication connection down.
            </summary>
            <param name="action">Wrapped handler function.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.BeforeCommunicate">
            <summary>
            Called before communication
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnBeforeCommunicate">
            <summary>
            Handler function called before the communication action occurs.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.AfterCommunicate(System.Boolean,TwinCAT.Ads.ResultAds)">
            <summary>
            Called After communication
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnAfterCommunicate(System.Boolean,TwinCAT.Ads.ResultAds)">
            <summary>
            Handler function called after communication
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.BeforeConnect">
            <summary>
            Called before the communication channel is established.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnBeforeConnect">
            <summary>
            Handler function called before the connection is established.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.AfterConnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Called after the connection has been established.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnAfterConnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the connection has been established.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.TwinCAT#Ads#ICommunicationInterceptHandler#BeforeDisconnect">
            <summary>
            Called before the communication channel shuts down.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnBeforeDisconnect">
            <summary>
            Handler function called before the communication channel is shut down.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.AfterDisconnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Called after the disconnect.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnAfterDisconnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the disconnection of the communication channel.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.BeforeWriteState(TwinCAT.Ads.StateInfo)">
            <summary>
            Called before an ADS state is written
            </summary>
            <param name="adsState">State of the ads.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnBeforeWriteState(TwinCAT.Ads.StateInfo)">
            <summary>
            Handler function called before the ADS state is written.
            </summary>
            <param name="adsState">State of the ads.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.AfterWriteState(TwinCAT.Ads.StateInfo,TwinCAT.Ads.ResultAds)">
            <summary>
            Called after an ADS state is written.
            </summary>
            <param name="adsState">Ads state..</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnAfterWriteState(TwinCAT.Ads.StateInfo,TwinCAT.Ads.ResultAds)">
            <summary>
            Handler function called after an ADS state is written.
            </summary>
            <param name="adsState">ADS state.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.BeforeReadState">
            <summary>
            Called before the AsdState is read.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnBeforeReadState">
            <summary>
            Handler function called before an ADS State is read.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.AfterReadState(TwinCAT.Ads.ResultReadDeviceState)">
            <summary>
            Called after the ADS state is read.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptor.OnAfterReadState(TwinCAT.Ads.ResultReadDeviceState)">
            <summary>
            Handler function called after the ADS state is read.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:TwinCAT.Ads.CommunicationInterceptors">
            <summary>
            Class CommunicationInterceptors is used for combinations (collections) of <see cref="T:TwinCAT.Ads.ICommunicationInterceptor"/> objects.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.CommunicationInterceptors._list">
            <summary>
            Internal list of interceptors.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.CommunicationInterceptors"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.Ads.ICommunicationInterceptHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.CommunicationInterceptors"/> class.
            </summary>
            <param name="interceptors">The interceptors.</param>
        </member>
        <member name="P:TwinCAT.Ads.CommunicationInterceptors.CombinedInterceptors">
            <summary>
            Gets the internal (combined) Interceptors
            </summary>
            <value>The combined interceptors.</value>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.Find``1">
            <summary>
            Finds the communication interceptor by base type.
            </summary>
            <returns>IEnumerable&lt;ICommunicationInterceptor&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.Find(System.String)">
            <summary>
            Finds the communication interceptor by id
            </summary>
            <param name="id">The identifier.</param>
            <returns>ICommunicationInterceptor.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.Combine(TwinCAT.Ads.ICommunicationInterceptor)">
            <summary>
            Combines the specified interceptor with the current <see cref="T:TwinCAT.Ads.CommunicationInterceptors"/>.
            </summary>
            <param name="interceptor">The interceptor.</param>
            <returns>ICommunicationInterceptor.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnBeforeCommunicate">
            <summary>
            Handler function called before the communication action occurs.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnAfterCommunicate(System.Boolean,TwinCAT.Ads.ResultAds)">
            <summary>
            Handler function called after communication
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnBeforeConnect">
            <summary>
            Handler function called before the connection is established.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnAfterConnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the connection has been established.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnBeforeDisconnect">
            <summary>
            Handler function called before the communication channel is shut down.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnAfterDisconnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the disconnection of the communication channel.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnBeforeReadState">
            <summary>
            Handler function called before an ADS State is read.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnAfterReadState(TwinCAT.Ads.ResultReadDeviceState)">
            <summary>
            Handler function called after the ADS state is read.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnBeforeWriteState(TwinCAT.Ads.StateInfo)">
            <summary>
            Handler function called before the ADS state is written.
            </summary>
            <param name="adsState">State of the ads.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.OnAfterWriteState(TwinCAT.Ads.StateInfo,TwinCAT.Ads.ResultAds)">
            <summary>
            Handler function called after an ADS state is written.
            </summary>
            <param name="adsState">ADS state.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationInterceptors.Lookup(System.Type)">
            <summary>
            Lookups the specified interceptor type.
            </summary>
            <param name="interceptorType">Type of the interceptor.</param>
            <returns>ICommunicationInterceptor.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IFailFastHandler">
            <summary>
            Interface for a fast failing (Circuit breaker) ads handler
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandler.Guard">
            <summary>
            Guards the <see cref="T:TwinCAT.Ads.IFailFastHandler"/> from state changes that allow unintended communication.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandler.Trip(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Trips to the internal <see cref="T:TwinCAT.Ads.Internal.LostCommunicationState" /> (Open circuit) state.
            </summary>
            <param name="errorCode">The causing error.</param>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandler.SetSucceeded">
            <summary>
            Indicates that the communication has been succeeded (sets the internal State to NoError)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.IFailFastHandler.CurrentState">
            <summary>
            Gets the current state of the Fail Fast handler.
            </summary>
            <value>Current state.</value>
        </member>
        <member name="P:TwinCAT.Ads.IFailFastHandler.IsActive">
            <summary>
            Gets a value indicating whether interceptor state is active
            </summary>
            <value><c>true</c> if communication state is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.IFailFastHandler.IsReconnecting">
            <summary>
            Gets a value indicating whether interceptor state is 'ready to connect'
            </summary>
            <value><c>true</c> if this instance is reconnecting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.IFailFastHandler.IsLost">
            <summary>
            Gets a value indicating whether the interceptor is in open / lost state
            </summary>
            <value><c>true</c> if communication is lost / open; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandler.Reset">
            <summary>
            Resets the <see cref="T:TwinCAT.Ads.IFailFastHandler"/>
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.IFailFastHandler.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TwinCAT.Ads.IFailFastHandler"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.IFailFastHandlerState">
            <summary>
            State interface for the different <see cref="T:TwinCAT.Ads.IFailFastHandler"/> states.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandlerState.NextState">
            <summary>
            Transition to the next state of the state machine (state machine pattern).
            </summary>
            <returns>IFailFastHandlerState.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandlerState.Guard">
            <summary>
            Guards the <see cref="T:TwinCAT.Ads.IFailFastHandler"/> from state changes that allow unintended communication.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandlerState.Trip(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Trips to the internal <see cref="T:TwinCAT.Ads.Internal.LostCommunicationState" /> (Open circuit) state.
            </summary>
            <param name="errorCode">The causing error.</param>
        </member>
        <member name="M:TwinCAT.Ads.IFailFastHandlerState.Succeed">
            <summary>
            Indicates that the communication has been succeeded.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.FailFastHandlerInterceptor">
            <summary>
            Fail Fast handler for ADS communication (Circuit breaker)
            </summary>
            <remarks>If a target is not available it will throw Timeout exceptions after a Default time of 5 seconds.
            To prevent hanging applications and bring more robustness into the communication (less consumption of ADS Mailbox memory), a second try to call the target
            should fail fast - not waiting for the Timeout. Only after a dedicated reconnection timeout timespan, real communication
            should be retried.
            The <see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/> is responsible for implementing this behavior.
            </remarks>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.FailFastHandlerInterceptor._synchronizer">
            <summary>
            Synchronizer object.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/> class with the Default FailFast timeout of 21 s
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/> class.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="F:TwinCAT.Ads.FailFastHandlerInterceptor._preventRejectedConnection">
            <summary>
            Value indicating whether Connection refused errors (AdsErrorCode.WSA_ConnRefused) trigger internal error conditions
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.TwinCAT#Ads#Internal#IPreventRejected#PreventRejectedConnection">
            <summary>
            Gets or sets a value indicating whether Connection refused errors (AdsErrorCode.WSA_ConnRefused) trigger internal error conditions
            </summary>
            <value><c>true</c> if connection refused is prevented; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.FailFastHandlerInterceptor._timeout">
            <summary>
            The actual Fail fast timeout
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.Timeout">
            <summary>
            Gets the actual FailFast Timeout
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="F:TwinCAT.Ads.FailFastHandlerInterceptor._state">
            <summary>
            State of the internal state machine.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.CurrentState">
            <summary>
            Gets the current state of the Fail Fast handler.
            </summary>
            <value>Current state.</value>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.OnBeforeConnect">
            <summary>
            Handler function called before the connection is established.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.OnAfterConnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the connection has been established.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.OnAfterDisconnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the disconnection of the communication channel.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.OnBeforeCommunicate">
            <summary>
            Handler function called before the communication action occurs.
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.OnAfterCommunicate(System.Boolean,TwinCAT.Ads.ResultAds)">
            <summary>
            Handler function called after communication
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="result">The ADS communication result object.</param>
        </member>
        <member name="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors">
            <summary>
            The tripping errors (Error codes that a classified as communication errors
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>ErrorCode</term>
            <term>Description</term>>
            </listheader>
            <item>
            <term><see cref="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnRefused"/></term>
            <term></term>
            </item>
            <item>
            <term><see cref="F:TwinCAT.Ads.AdsErrorCode.PortDisabled"/></term>
            <term></term>
            </item>
            <item>
            <term><see cref="F:TwinCAT.Ads.AdsErrorCode.PortNotConnected"/></term>
            <term></term>
            </item>
            <item>
            <term><see cref="F:TwinCAT.Ads.AdsErrorCode.ClientSyncTimeOut"/></term>
            <term></term>
            </item>
            <item>
            <term><see cref="F:TwinCAT.Ads.AdsErrorCode.TargetMachineNotFound"/></term>
            <term></term>
            </item>
            <item>
            <term><see cref="F:TwinCAT.Ads.AdsErrorCode.TargetPortNotFound"/></term>
            <term></term>
            </item>
            <item>
            <term><see cref="F:TwinCAT.Ads.AdsErrorCode.ClientPortNotOpen"/></term>
            <term></term>
            </item>
            </list>
            
            The <see cref="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnRefused"/> can be temporarily switched off by the
            <see cref="T:TwinCAT.Ads.Internal.IPreventRejected"/> interface.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.IsTrippingError(TwinCAT.Ads.AdsErrorCode,System.Boolean)">
            <summary>
            Determines whether an error is tripped by the <see cref="T:TwinCAT.Ads.AdsErrorCode" />.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="preventRejectedConnectionError">if set to <c>true</c> [prevent rejected connection error].</param>
            <returns><c>true</c> if the error code is an tripping error.</returns>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.Guard">
            <summary>
            Guards the <see cref="T:TwinCAT.Ads.IFailFastHandler" /> from state changes that allow unintended communication.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.FailFastHandlerInterceptor._trippedError">
            <summary>
            The causing error for the trip.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.TrippedError">
            <summary>
            Causing error for the Trip
            </summary>
            <value>The tripped error.</value>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.IsActive">
            <summary>
            Gets a value indicating whether interceptor state is active
            </summary>
            <value><c>true</c> if communication state is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.IsReconnecting">
            <summary>
            Gets a value indicating whether interceptor state is 'ready to connect'
            </summary>
            <value><c>true</c> if this instance is reconnecting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.IsLost">
            <summary>
            Gets a value indicating whether the interceptor is in open / lost state
            </summary>
            <value><c>true</c> if communication is lost / open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.FailFastHandlerInterceptor.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:TwinCAT.Ads.IFailFastHandler" /> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.Trip(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Trips the <see cref="T:TwinCAT.Ads.FailFastHandlerInterceptor"/> with the specified error.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerInterceptor.SetSucceeded">
            <summary>
            Succeeds this instance.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.ConnectionStateInterceptor">
            <summary>
            Connection state observer (Interceptor)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.#ctor(TwinCAT.Ads.IAdsSession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ConnectionStateInterceptor" /> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._session">
            <summary>
            The session
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._synchronizer">
            <summary>
            Synchronizer object
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._connectionState">
            <summary>
            Current connection state.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._lastSucceeded">
            <summary>
            The Date/Time of the last succeeded Roundtrip
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.LastSucceededAt">
            <summary>
            Gets the Date/Time of the last succeeded ADS communication/Roundtrip.
            </summary>
            <value>The Date/Time value.</value>
            <remarks>A successful communication is also a negative ADS response (not  <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>) that is not classified as communication/tripping error (<see cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>).
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._lastAccess">
            <summary>
            DateTime of the last read/write access
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.LastAccessAt">
            <summary>
            Gets the DateTime of the last read/write access
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._lastErrorCode">
            <summary>
            Last Error Code
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.LastErrorCode">
            <summary>
            Gets the response ErrorCode of the last read/write access.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.OnAfterCommunicate(System.Boolean,TwinCAT.Ads.ResultAds)">
            <summary>
            Handler function called after communication
            </summary>
            <param name="resurrect">Resurrection flag.</param>
            <param name="result">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.setState(TwinCAT.ConnectionState)">
            <summary>
            Sets the connection state.
            </summary>
            <param name="newState">The new state.</param>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.OnAfterConnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the connection has been established.
            </summary>
            <param name="error">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.OnAfterDisconnect(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Handler function called after the disconnection of the communication channel.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._errorCount">
            <summary>
            Total number of negative ADS responses.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.TotalErrors">
            <summary>
            Gets the total number of negative ADS responses.
            </summary>
            <value>The total number of negative ADS responses.
            </value>
            <remarks>This number includes all communication/tripping errors and succeeded negative ADS responses.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._communicationErrorCountSinceLastSucceeeded">
            <summary>
            Error count since last acces.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.CommunicationErrorsSinceLastSucceeded">
            <summary>
            Gets the number of communication errors since the last successful access
            </summary>
            <value></value>
            <remarks>Only communication (tripping, <see cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>) errors count here. A succeeded roundtrip (non tripping)
            sets this value to zero.
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.LastErrorAt">
            <summary>
            Gets the last error (negative response) time
            </summary>
            <value>The last error time.</value>
            <remarks>This is the Date/Time of the last ADS request that was responded <b>not</b> with <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>.
            This can mean simply a negative response.
            </remarks>
            <seealso cref="P:TwinCAT.Ads.ConnectionStateInterceptor.LastCommunicationErrorAt"/>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.LastCommunicationErrorAt">
            <summary>
            Gets the last communication error date/time.
            </summary>
            <value>The last communication error date/time.
            </value>
            <remarks>The communication errors are the errors that are classified as communication tripping errors (Network communication problems e.g. device not reachable, <see cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>)</remarks>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.TotalCommunicationErrors">
            <summary>
            Gets the communication error count.
            </summary>
            <value>The communication error count.</value>
            <remarks>The communication errors are the errors that are classified as communication tripping errors (Network communication problems e.g. device not reachable, <see cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>)</remarks>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.ConnectionState">
            <summary>
            Gets the current Connection state of the <see cref="T:TwinCAT.Ads.ConnectionStateInterceptor" />
            </summary>
            <value>The state of the connection.</value>
        </member>
        <member name="E:TwinCAT.Ads.ConnectionStateInterceptor.ConnectionStateChanged">
            <summary>
            Occurs when the connection state has been changed.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.ConnectionStateInterceptor.AdsStateChanged">
            <summary>
            Occurs when the ads state has been changed.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.OnConnectionStatusChanged(TwinCAT.ConnectionState,TwinCAT.ConnectionState)">
            <summary>
            Called when [connection status changed].
            </summary>
            <param name="oldState">The old state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._totalCycles">
            <summary>
            Number of total accesses.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.TotalCycles">
            <summary>
            Gets the total number of ADS Accesses (Succeeded or Failed)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._succeededCycles">
            <summary>
            Number of succeeded communication roundtrips
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.TotalSucceded">
            <summary>
            Gets the number of succeeded Accesses.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.TimeToLastSucceed">
            <summary>
            Gets the age of the last succeeded access.
            </summary>
            <remarks>Returns the TimeSpan to the time with the last succeeded Access. This Information can be used to get a measure of the Quality of the current
            connection - at least when frequent communciation is done over the connection.
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.StateInfo">
            <summary>
            Gets the current state of the connected ADS Server.
            </summary>
            <value>ADS state</value>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._preventRejectedConnection">
            <summary>
            Indicates that Connection refused errors (AdsErrorCode.WSA_ConnRefused) are prevented temporarily.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ConnectionStateInterceptor.TwinCAT#Ads#Internal#IPreventRejected#PreventRejectedConnection">
            <summary>
            Gets or sets a value indicating whether Connection refused errors (AdsErrorCode.WSA_ConnRefused) trigger internal error conditions
            </summary>
            <value><c>true</c> if connection refused is prevented; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.OnAfterReadState(TwinCAT.Ads.ResultReadDeviceState)">
            <summary>
            Handler function called after the ADS state is read.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.OnAfterWriteState(TwinCAT.Ads.StateInfo,TwinCAT.Ads.ResultAds)">
            <summary>
            Handler function called after an ADS state is written.
            </summary>
            <param name="adsState">ADS state.</param>
            <param name="result">The result.</param>
        </member>
        <member name="F:TwinCAT.Ads.ConnectionStateInterceptor._adsState">
            <summary>
            The current ADS state.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.setAdsState(TwinCAT.Ads.StateInfo)">
            <summary>
            Sets the ADS state.
            </summary>
            <param name="adsState">Ads state.</param>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.OnAdsStateChanged(TwinCAT.Ads.StateInfo,TwinCAT.Ads.StateInfo)">
            <summary>
            Called when the ADS state has been changed.
            </summary>
            <param name="oldState">The old state.</param>
            <param name="newState">State of the _ads.</param>
        </member>
        <member name="M:TwinCAT.Ads.ConnectionStateInterceptor.GetConnectionStatistics">
            <summary>
            Get connection statistics
            </summary>
            <returns>ConnectionStatisticsInfo.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ClientNetIdResearcher">
            <summary>
            Class ClientNetIdResearcher.
            Implements the <see cref="T:TwinCAT.Ads.LocalNetIdResearcher" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.LocalNetIdResearcher" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ClientNetIdResearcher.TryGetLocalNetId(TwinCAT.Ads.AmsNetId@)">
            <summary>
            Tries to get the Local NetId.
            </summary>
            <param name="local">The local <see cref="T:TwinCAT.Ads.AmsNetId" /></param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ClientNetIdResearcher.TryGetFromRouter(TwinCAT.Ads.AmsNetId@)">
            <summary>
            Tries to get the Local NetId from the router.
            </summary>
            <param name="local">The local.</param>
            <returns><c>true</c> if the AmsNetId is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsNotificationsBase">
            <summary>
            Interface for Notification management.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotificationsBase.AddDeviceNotificationAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="cancel">The cancellation token.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotificationsBase.TryAddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Int32,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="timeout">The timeout.</param>
            <param name="handle">The handle.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException">Thrown when the ADS call fails.</exception>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotificationsBase.TryDeleteDeviceNotification(System.UInt32,System.Int32)">
            <summary>
            Deletes an existing notification.
            </summary>
            <param name="notificationHandle">Handle of the notification.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotificationsBase.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing notification.
            </summary>
            <param name="notificationHandle">Handle of the notification.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;TaskResult&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResMan">
            <summary>
            Resource Manager (static)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResMan.GetString(System.String,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Gets the error string of the specified <see cref="T:TwinCAT.Ads.AdsErrorCode"/>.
            </summary>
            <param name="message">The message.</param>
            <param name="adsErrorCode">The ads error code.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:TwinCAT.Ads.ResMan.ResourceManager">
            <summary>
            Gets the (internal) resource manager.
            </summary>
            <value>The resource manager.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResMan.GetString(System.String)">
            <summary>
            Gets the string.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsSession">
            <summary>
            AdsSession class
            </summary>
            <remarks>On top of the well known <see cref="T:TwinCAT.Ads.AdsClient"/> class that is used traditionally for ADS communication,
            the <see cref="T:TwinCAT.Ads.AdsSession"/> class provides the following additionally abilities out of the box:
            
            These are used to provide more stable connections to ADS Servers than the <see cref="T:TwinCAT.Ads.AdsClient"/> can provide. The main issues are Resurrection / Self-Healing
            after communication timeouts, faster and less error prone reaction to communication errors (not necessarily waiting for communication timeouts) und enhanced
            communication diagnosis.
            
            These enhanced features are provided by the following additions to the TwinCAT.Ads API:
            <list type="bullet">
            <item><description><see cref="T:TwinCAT.Ads.AdsConnection"/> class.</description></item>
            <item><description>Enhanced diagnosis in form of communication statistics <see cref="P:TwinCAT.Ads.AdsSessionBase.Statistics"/></description></item>
            <item><description>(semi-automatic) Resurrectable client communication with <see cref="T:TwinCAT.Ads.AdsConnection"/> objects.</description></item>
            <item><description>Symbol caching <see cref="P:TwinCAT.Session.SymbolServer"/></description></item>
            <item><description>Fail fast handler for connection stabilization <see cref="T:TwinCAT.Ads.IFailFastHandler"/></description></item>
            </list>
            
            The <see cref="T:TwinCAT.Ads.AdsConnection"/> is established by calling the <see cref="M:TwinCAT.Session.Connect"/> method. The returned <see cref="T:TwinCAT.Ads.AdsConnection"/> can be used
            as long the <see cref="T:TwinCAT.Ads.AdsSessionBase"/> exists.
            </remarks>
            <example>
            The following sample shows a simple use of the <see cref="T:TwinCAT.Ads.AdsSessionBase"/> object. The AdsSession object (and the dynamic SymbolLoader features) are only
            available from .NET 4 and upwards.
            <code language="C#" title="Use Session (async)" source="..\..\Samples\Sample.Ads.AdsClientCore\SessionAsync.cs" region="CODE_SAMPLE" />
            <code language="C#" title="Use Session (sync)" source="..\..\Samples\Sample.Ads.AdsClientCore\Session.cs" region="CODE_SAMPLE" />
            </example>
            <seealso cref="T:TwinCAT.Session" />
            <seealso cref="T:TwinCAT.Ads.IAdsSession" />
            <seealso cref="T:TwinCAT.Ads.IInterceptionFactory" />
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.SessionSettings,Microsoft.Extensions.Logging.ILogger,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession" /> class.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <param name="logger">The logger interface.</param>
            <param name="owner">The session owner</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.SessionSettings,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession" /> class.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <param name="owner">The session owner</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsNetId,System.Int32,TwinCAT.Ads.SessionSettings,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession" /> class.
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
            <param name="settings">The settings.</param>
            <param name="logger">The logger interface.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsNetId,System.Int32,TwinCAT.Ads.SessionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession"/> class.
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.SessionSettings,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession" /> class.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <param name="logger">The logger interface.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.SessionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsNetId,System.Int32,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession" /> class.
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
            <param name="logger">The logger interface.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession"/> class.
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsAddress,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession" /> class.
            </summary>
            <param name="address">The address.</param>
            <param name="logger">The logger interface.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSession.#ctor(TwinCAT.Ads.AmsAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSession"/> class.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:TwinCAT.Ads.ClientFactory.createInterceptors(TwinCAT.ISession)">
            <summary>
            Creates the interceptors.
            </summary>
            <returns>CommunicationInterceptors.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsConnection">
            <summary>
            ADS Connection class
            </summary>
            <remarks>The ADS Connection class represents an ADS Point-to-Point Connection between client and server. It is established by using the
            Connect method of the <see cref="T:TwinCAT.Ads.AdsSession" /> object.
            An ADS Connection can have different <see cref="P:TwinCAT.Ads.AdsConnection.ConnectionState">ConnectionStates</see>, which represent the state of the logical ADS connection.</remarks>    
            <seealso cref="T:TwinCAT.Ads.AdsSession"/>
            <seealso cref="T:TwinCAT.Ads.IAdsConnection" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.#ctor(TwinCAT.Ads.AdsSessionBase,TwinCAT.Ads.Internal.IAdsClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsConnection"/> class.
            </summary>
            <param name="session">The session.</param>
            <param name="factory">The client factory</param>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._session">
            <summary>
            The session
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Session">
            <summary>
            Gets the Session object of the <see cref="T:TwinCAT.Ads.AdsConnection"/> object.
            </summary>
            <value>The client.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._id">
            <summary>
            Connection ID
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Id">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AdsConnection"/> identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._client">
            <summary>
            Internal used client.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Client">
            <summary>
            Gets the used <see cref="T:TwinCAT.Ads.AdsClient"/> of the <see cref="T:TwinCAT.Ads.AdsConnection"/> object.
            </summary>
            <value>The client.</value>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._beforeAccessDelegate">
            <summary>
            Handler that is called before Read/Write
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._afterAccessDelegate">
            <summary>
            Handler that is called after Read/Write
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.createResurrectionHandler">
            <summary>
            Creates the interceptor delegates/handlers.
            </summary>
            <remarks>
            This implementation resurrects when ConnectionState is Lost,
            which means the connection IsConnected.
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.AccessWaitTime">
            <summary>
            Gets the access wait time.
            </summary>
            <remarks>
            Gets the Wait Time until the next communication try will be done.
            This time is calculated as follows:
                ResurrectionTime - (DateTime.Now - ConnectionLostTime)
            </remarks>
            <value>The access wait time.</value>
            <seealso cref="P:TwinCAT.Ads.AdsConnection.ConnectionLostTime"/>
            <seealso cref="P:TwinCAT.Ads.SessionSettings.ResurrectionTime"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.BeforeAccess">
            <summary>
            Handler that is called before the Connection access (enables the Resurrection)
            </summary>
            <remarks>
            Calling this is important for the Connection Resurrection Handler!
            Resurrection is only tried when the Connection is neither Disposed nor
            Disconnected
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AfterAccess">
            <summary>
            Handler that is called after Connection access.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.OnResurrect">
            <summary>
            Resurrection handler of the <see cref="T:TwinCAT.Ads.AdsConnection"/>.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Resurrect">
            <summary>
            Resurrects the <see cref="T:TwinCAT.Ads.AdsConnection"/>
            </summary>
            <exception cref="T:TwinCAT.AdsException"></exception>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.TryResurrect(TwinCAT.AdsException@)"/>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryResurrect(TwinCAT.AdsException@)">
            <summary>
            Tries to resurrect the <see cref="T:TwinCAT.Ads.AdsConnection"/>
            </summary>
            <param name="error">The error.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.AdsConnection"/> is resurrected, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Connect">
            <summary>
            (Re)Connects the <see cref="T:TwinCAT.IConnection" /> when disconnected.
            </summary>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.AdsConnection"/> is reconnected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.OnConnect">
            <summary>
            Connect handler.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._connectionState">
            <summary>
            The actual connection state
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.State">
            <summary>
            Gets the current <see cref="P:TwinCAT.Ads.AdsConnection.ConnectionState" />
            </summary>
            <value>The state.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ConnectionObserver_ConnectionStateChanged(System.Object,TwinCAT.ConnectionStateChangedEventArgs)">
            <summary>
            Handles the ConnectionStateChanged event of the ConnectionObserver control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwinCAT.SessionConnectionStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ConnectionState">
            <summary>
            Gets the current Connection state of the <see cref="T:TwinCAT.Ads.AdsConnection" />
            </summary>
            <value>The state of the connection.</value>
            <remarks>The Connection state changes only if the <see cref="T:TwinCAT.IConnection"/> is established / shut down
            or active communication is triggered by the User of the <see cref="T:TwinCAT.IConnection"/> object.
            </remarks>
            <example>
            The following sample shows how to keep the <see cref="P:TwinCAT.Ads.AdsConnection.ConnectionState"/> updated by triggering ADS Communication.
            <code language="C#" title="Trigger ConnectionState changes in WPF Applications" source="..\..\Samples\TwinCAT.ADS.NET_Samples\40_ADS.NET_WPFConnectionObserver\MainWindow.xaml.cs" region="CODE_SAMPLE" />
            </example>   
            <seealso cref="E:TwinCAT.Ads.AdsConnection.ConnectionStateChanged"/>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.ConnectionStateChanged">
            <summary>
            Occurs when connection status of the <see cref="T:TwinCAT.Ads.AdsConnection"/> has been changed.
            </summary>
            <remarks>The Connection state changes only if the <see cref="T:TwinCAT.IConnection"/> is established / shut down
            or active communication is triggered by the User of the <see cref="T:TwinCAT.IConnection"/> object.
            </remarks>
            <example>
            The following sample shows how to keep the <see cref="P:TwinCAT.Ads.AdsConnection.ConnectionState"/> updated by triggering ADS Communication.
            <code language="C#" title="Trigger ConnectionState changes in WPF Applications" source="..\..\Samples\TwinCAT.ADS.NET_Samples\40_ADS.NET_WPFConnectionObserver\MainWindow.xaml.cs" region="CODE_SAMPLE" />
            </example>   
            <seealso cref="P:TwinCAT.Ads.AdsConnection.ConnectionState"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.OnConnectionStatusChanged(TwinCAT.ConnectionStateChangedEventArgs)">
            <summary>
            Handles the <see cref="E:ConnectionStatusChanged" /> event.
            </summary>
            <param name="args">The <see cref="T:TwinCAT.ConnectionStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.DeviceStateChanged">
            <summary>
            Occurs when Device state has been changed.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.OnAdsStateChanged(TwinCAT.Ads.AdsStateChangedEventArgs2)">
            <summary>
            Handles the <see cref="E:AdsStateChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:TwinCAT.Ads.AdsStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ConnectionObserver">
            <summary>
            Gets the connection observer.
            </summary>
            <value>The connection observer.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.AdsStateObserver">
            <summary>
            Gets the ads state observer.
            </summary>
            <value>The ads state observer.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.OnConnected">
            <summary>
            Called when the <see cref="T:TwinCAT.Ads.AdsConnection"/> is established.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.OnDisconnected">
            <summary>
            Called when the <see cref="T:TwinCAT.Ads.AdsConnection"/> is closed.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._lostTime">
            <summary>
            The timestamp of the connection loss
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ConnectionLostTime">
            <summary>
            Gets the connection lost time.
            </summary>
            <value>The connection lost time.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.OnLost">
            <summary>
            Called when the connection has been lost.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.IsLost">
            <summary>
            Gets a value indicating whether the communication is in lost / open state
            </summary>
            <value><c>true</c> if this instance is lost; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.IsActive">
            <summary>
            Gets a value indicating whether communication is in active state
            </summary>
            <value><c>true</c> if this instance is active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.IsReconnecting">
            <summary>
            Gets a value indicating whether communication is ready for reconnecting
            </summary>
            <value><c>true</c> if this instance is reconnecting; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ConnectionObserver_AdsStateChanged(System.Object,TwinCAT.Ads.AdsStateChangedEventArgs2)">
            <summary>
            Handles the AdsStateChanged event of the ConnectionObserver control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwinCAT.Ads.AdsStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InjectError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Error injection only for Unit-Test purposes to simulate error conditions
            </summary>
            <param name="error">The error.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InjectSymbolVersionChanged">
            <summary>
            Injection of an SymbolVersionChanged event (just for Testing purposes)
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ClientAddress">
            <summary>
            Get the <see cref="T:TwinCAT.Ads.AmsAddress" /> of the ADS client.
            </summary>
            <value>The client address.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.IsConnected">
            <summary>
            Gets a value indicating whether the local ADS port was opened successfully. It
            does not indicate if the target port is available. Use the method ReadState to
            determine if the target port is available.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.IsLocal">
            <summary>
            Gets a value indicating whether the ADS client is connected to a ADS Server on the local
            computer.
            </summary>
            <value><c>true</c> if this instance is local; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Address">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress" /> of the ADS server.
            </summary>
            <value>The server address.</value>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.AdsSumNotification">
            <summary>
            Occurs when Notifications are send (bundled notifications)
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsSumNotification" /> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\03_ADS.NET_EventReading\Form1.cs" region="CODE_SAMPLE_SUMNOTIFICATIONS_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications" /></example>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <remarks>As an optimization, this event receives all ADS Notifications that occurred at one
            point in time together. As consequence, the overhead of handler code is reduced, what can be important
            if notifications are triggered in a high frequency and the event has to be synchronized to the UI thread
            context. Because multiple notifications are bound together, less thread synchronization is necessary.
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" /> and <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" /> events shouldn't be used when SumNotifications are registered, because they
            have an performance side effect to this <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsSumNotification" /> event. The full performance is reached only, when all notifications are handled
            on this event.</remarks>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.AdsNotification">
            <summary>
            Occurs when the ADS device sends a notification to the client.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" /> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\03_ADS.NET_EventReading\Form1.cs" region="CODE_SAMPLE_NOTIFICATIONS_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications" /></example>
            <remarks>The Event Argument contains the raw data value of the notification, not marshalled to .NET types.</remarks>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.AdsNotificationError">
            <summary>
            Occurs when a exception has occurred during notification management.
            </summary>
            <remarks>
            The occurrence of this event can have two different reasons:
            <list type="number">
            <item>Indicates an internal error occurred during Notification management.</item>
            <item>The registered notification becomes invalid on the server, eg. after a PLC Download / Online Change. If the ADS Server detects that the (still registered) Notification Sender is getting invalid, it sends 
            an error notification so that the client will be informed about detached notifications. The event arguments contains the <see cref="T:TwinCAT.Ads.AdsInvalidNotificationException"/> which describes the invalid notification handle
            by its <see cref="P:TwinCAT.Ads.AdsInvalidNotificationException.Handle"/> property.</item>
            </list>
            </remarks>
            <seealso cref="T:TwinCAT.Ads.AdsInvalidNotificationException"/>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotification"/>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx">
            <summary>
            Occurs when the ADS devices sends a notification to the client.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" /> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\14_ADS.NET_ReadWriteAnyType\Form1.cs" region="CODE_READWRITEANYNOT_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications" /></example>
            <remarks>The Notification event arguments marshals the data value automatically to the specified .NET Type with ANY_TYPE marshallers.</remarks>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.AdsStateChanged">
            <summary>
            Occurs when ADS State has been changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <remarks>This event occurs asynchronously if the synchronized flag is not set.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.RegisterAdsStateChangedAsync(System.EventHandler{TwinCAT.Ads.AdsStateChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers for <see cref="E:TwinCAT.Ads.AdsConnection.AdsStateChanged"/> events as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to be registered for AdsStateChanged calls.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'RegisterAdsStateChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.UnregisterAdsStateChangedAsync(System.EventHandler{TwinCAT.Ads.AdsStateChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers for <see cref="E:TwinCAT.Ads.AdsConnection.AdsStateChanged"/> events as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to be unregistered.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UnregisterAdsStateChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.AdsSymbolVersionChanged">
            <summary>
            Occurs when the symbol version has been changed.
            </summary>
            <remarks>This is the case when the connected ADS server restarts. This invalidates all actual opened
            symbol handles.
            The SymbolVersion counter doesn't trigger, when an online change is made on the PLC (ports 801, ..., 851 ...)</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.RegisterSymbolVersionChangedAsync(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers the symbol version changed asynchronously.
            </summary>
            <param name="handler">The handler function to register.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'RegisterSymbolVersionChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.UnregisterSymbolVersionChangedAsync(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Unregisters the symbol version changed asynchronous.
            </summary>
            <param name="handler">The handler function to unregister.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UnregisterSymbolVersionChangedAsync' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.RegisterSymbolVersionChanged(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs})">
            <summary>
            Registers the symbol version changed.
            </summary>
            <param name="handler">The handler function to register.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.UnregisterSymbolVersionChanged(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs})">
            <summary>
            Unregisters the symbol version changed.
            </summary>
            <param name="handler">The handler function to unregister.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="E:TwinCAT.Ads.AdsConnection.RouterStateChanged">
            <summary>
            (Local) Router state changed event.
            </summary>
            <remarks>This event indicates, that a changed event is received from the Local AmsRouter independant of the connected target address.
            A remote system RouterStateChanged event cannot be received at another system - it cannot traverse TwinCAT systems.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotification(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" /> event.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <returns>The notification handle.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <returns>The notification handle.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryAddDeviceNotification(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" /> event.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS ErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.TryDeleteDeviceNotification(System.UInt32)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.TryDeleteDeviceNotification(System.UInt32)" /> should always
            be called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryAddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="symbolPath">The symbol path..</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <param name="args">Additional arguments.</param>
            <param name="handle">The handle.</param>
            <returns>The handle of the notification.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationError"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive ('AnyType') types are allowed for the parameter <paramref name="type"/>.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <param name="args">Additional arguments for 'AnyType' types.</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.CreateVariableHandle(System.String)">
            <summary>
            Generates a unique handle for an ADS variable.
            </summary>
            <param name="variableName">Name of the ADS variable</param>
            <returns>The handle of the ADS Variable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)">
            <summary>
            Deletes an existing notification.
            </summary>
            <param name="notificationHandle">Handle of the notification.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.DeleteVariableHandle(System.UInt32)">
            <summary>
            Releases the handle of a ADS variable again.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryDeleteVariableHandle(System.UInt32)">
            <summary>
            Releases the specified symbol/variable handle synchronously.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.TryCreateVariableHandle(System.String,System.UInt32@)" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteVariableHandle(System.UInt32)" />
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsConnection.TryDeleteVariableHandle(System.UInt32)" /> is the <see cref="M:TwinCAT.Ads.AdsConnection.TryCreateVariableHandle(System.String,System.UInt32@)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Read(System.UInt32,System.Memory{System.Byte})">
            <summary>
            Reads the value from the symbol that is represented by the handle.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Read(System.UInt32,System.UInt32,System.Memory{System.Byte})">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given <paramref name="readBuffer"/>
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">Memory location, where to read the data.</param>
            <returns>Number of successfully returned (read) data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny(System.UInt32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync(System.UInt32,System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync(System.UInt32,System.UInt32,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync(System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync(System.UInt32,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <remarks>
            As object types only primitive types are supported.
            </remarks>
            <param name="variableHandle">The variable/symbol handle.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsync(System.UInt32,System.UInt32,System.Object,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            write any as an asynchronous operation.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite" /> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" />.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsync(System.UInt32,System.Object,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Writes an object asynchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks><list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsync(System.UInt32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite" /> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" />.</returns>
            <remarks><list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsync(System.UInt32,System.UInt32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes an object asynchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite"/> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines the Symbol handle by its instance path asynchronously.
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'CreateVariableHandle' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> parameter contains the variable handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.TryCreateVariableHandle(System.String,System.UInt32@)" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.CreateVariableHandle(System.String)" />
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.AdsConnection.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" /> is the <see cref="M:TwinCAT.Ads.AdsConnection.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Releases the handle of a ADS variable again (asynchronously)
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.TryDeleteVariableHandle(System.UInt32)" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteVariableHandle(System.UInt32)" />
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" /> is the <see cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny(System.UInt32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny(System.UInt32,System.UInt32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny(System.UInt32,System.UInt32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny(System.UInt32,System.UInt32,System.Type,System.Int32[],System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <param name="timeout">The timeout.</param>
            <returns>The Value of the data marshalled to the specified <paramref name="type" />.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            The <paramref name="type" /> is limited to Primitive types ('AnyType').</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyString(System.UInt32,System.UInt32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads as string from a specified address.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="len">The string length to be read.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyStringAsync(System.UInt32,System.UInt32,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            read any string as an asynchronous operation.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="len">The string length to be read.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="F:TwinCAT.Ads.ResultAnyValue.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyString(System.UInt32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string from the specified symbol/variable.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="len">The length.</param>
            <param name="encoding">The encoding.</param>
            <returns>The string value.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyStringAsync(System.UInt32,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Reads a string asynchronously from the specified symbol/variable
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="len">The length.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read string
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadDeviceInfo">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <returns>DeviceInfo struct containing the name of the device and the version information.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadDeviceInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadDeviceState' operation. The <see cref="T:TwinCAT.Ads.ResultDeviceInfo" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultDeviceInfo.DeviceInfo" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadState">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <returns>The ADS statue and device status.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>Not all ADS Servers support the State ADS Request.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValue(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object. Strings and all primitive datatypes(UInt32, Int32, Bool etc.) are supported. 
            Arrays and structures cannot be read.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol as an object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol and returns it as an object. Strings and all primitive datatypes (UInt32, Int32, Bool etc.) are supported.
            Arrays and structures cannot be read.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <param name="cancel">The cancel token.</param>
            <returns>The value of the symbol as an object.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadValue(System.String,System.Type,System.Object@)">
            <summary>
            Reads the value of a symbol and returns the value as object.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <param name="value">The read value of the Symbol.</param>
            <returns>The <see cref="T:TwinCAT.Ads.AdsErrorCode" />.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadValue(TwinCAT.TypeSystem.ISymbol,System.Object@)">
            <summary>
            Reads the value of a symbol and returns the value as object. The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <param name="value">The value.</param>
            <returns>Value of the symbol</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'. Structs are not supported.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValue(System.String,System.Type)">
            <summary>
            Reads the value of a symbol and returns the value as object. The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <returns>Value of the symbol</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadSymbol(System.String)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="name">Name of the symbol.</param>
            <returns>A <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbol"/> containing the requested symbol information or null if symbol could not
            be found.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadSymbolAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="name">Name of the symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'ReadSymbolInfo' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadDataType(System.String)">
            <summary>
            Call this method to obtain information about the specified data type.
            </summary>
            <param name="typeName">Name of the data type (without namespace)</param>
            <returns>An <IDataType></IDataType> containing the requested type.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typeName</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)" />
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Call this method to obtain information about the specified data type.
            </summary>
            <param name="typeName">Name of the symbol.</param>
            <param name="dataType">The symbol.</param>
            <returns>A <see cref="T:TwinCAT.TypeSystem.IDataType" /> containing the requested symbol information or null if symbol could not
            be found.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typeName</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataType(System.String)" />
            <see cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            read data type as an asynchronous operation.
            </summary>
            <param name="typeName">Name of the data type.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'ReadDataType' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typeName</exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataType(System.String)" />
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device into the <paramref name="readBuffer" />
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Number of successfully returned (read) data bytes.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from that target.
            </summary>
            <param name="variableHandle">Variable handle.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Number of successfully returned data bytes.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.TryReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.ReadWriteAsync(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadWriteAsync(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            ReadWrites value data asynchronously to/from the symbol represented by the <paramref name="variableHandle" />.
            </summary>
            <param name="variableHandle">Variable handle.</param>
            <param name="readBuffer">The read data / value</param>
            <param name="writeBuffer">The write data / value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultReadWrite" /> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadState(TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS status and the device status from an ADS server. Unlike the ReadState method this method does not call an exception on failure. Instead an AdsErrorCode is returned.
            If the return value is equal to AdsErrorCode.NoError the call was successful.
            </summary>
            <param name="stateInfo">The ADS statue and device status.</param>
            <returns>AdsErrorCode of the ads read state call. Check for AdsErrorCode.NoError to see if call was successful.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadStateAsync(System.Threading.CancellationToken)">
            <summary>
            Read the ADS State asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultReadDeviceState.State" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <remarks>Not all ADS Servers support the State ADS Request</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadState(System.Int32)">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>The ADS statue and device status.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadState(System.Int32,TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS status and the device status from an ADS server. Unlike the ReadState method this method does not call an exception on failure. Instead an AdsErrorCode is returned.
            If the return value is equal to AdsErrorCode.NoError the call was successful.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="stateInfo">The ADS statue and device status.</param>
            <returns>AdsErrorCode of the ads read state call. Check for AdsErrorCode.NoError to see if call was successful.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Write(System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="writeBuffer">The write buffer / value to be written</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryWrite(System.UInt32,System.ReadOnlyMemory{System.Byte})" />
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.WriteAsync(System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Write(System.UInt32,System.UInt32)">
            <summary>
            Trigger Client Method/Command.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <remarks>This method is used to trigger Client Methods/Commands without parameters.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Write(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The data to write.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryRead(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32@)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="readBytes">The number of read bytes.</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)">
            <summary>
            Writes data synchronously to an ADS device and reads data from that device.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="readBytes">The read bytes.</param>
            <returns>The ADS Error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWrite(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The data buffer to be written.</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Read(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>Number of successfully returned data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Thhe index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>Number of successfully returned data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Write(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Trigger Client Method/Command.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="timeout">The timeout.</param>
            <remarks>This method is used to trigger Client Methods/Commands without parameters.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Write(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryRead(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32,System.Int32@)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="timeout">The timeout.</param>
            <param name="readBytes">The read bytes.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32@)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read stream.</param>
            <param name="writeBuffer">The write stream.</param>
            <param name="timeout">The timeout.</param>
            <param name="readBytes">The read bytes.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWrite(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAny(System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAny(System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAny(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAny(System.UInt32,System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAny(System.UInt32,System.UInt32,System.Object,System.Int32[],System.Int32)">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteControl(TwinCAT.Ads.StateInfo,System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteControlAsync(TwinCAT.Ads.AdsState,System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Changes the ADS status and device status of the ADS server asynchronously.
            </summary>
            <param name="state">The ADS state.</param>
            <param name="deviceState">The device state.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteControl' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteControlAsync(TwinCAT.Ads.AdsState,System.UInt16,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:TwinCAT.Ads.AdsState"/> and device state to the ADS device.
            </summary>
            <param name="adsState">State of the ads.</param>
            <param name="deviceState">State of the device.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the 
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteControl(TwinCAT.Ads.StateInfo,System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <param name="cancel">The cancel token.</param>
            <returns>Task.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteValue(System.String,System.Object)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteValue(System.String,System.Object)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteSymbolAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._disposed">
            <summary>
            Indicates that the <see cref="T:TwinCAT.Ads.AdsConnection"/> is disposed.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.AdsConnection"/> is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Disconnect">
            <summary>
            Disconnects this <see cref="T:TwinCAT.IConnection" />.
            </summary>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.AdsConnection"/> is disconnected, <c>false</c> if the connection was already disconnected.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.Close">
            <summary>
            Closes the <see cref="T:TwinCAT.Ads.AdsConnection"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryRead(System.UInt32,System.Memory{System.Byte},System.Int32@)">
            <summary>
            Reads the value synchronously data of the symbol, that is represented by the variable handle into the <paramref name="readBuffer" />.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer/data</param>
            <param name="readBytes">Number of read bytes.</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)">
            <summary>
            ReadWrites value data synchronously to/from the symbol represented by the <paramref name="variableHandle" />.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer / read data.</param>
            <param name="writeBuffer">The write buffer / write data.</param>
            <param name="readBytes">Number of read bytes.</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWrite(System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the value data synchronously that is represented in the <paramref name="writeBuffer" /> to the symbol with the specified <paramref name="variableHandle" />.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="writeBuffer">The write buffer / value.</param>
            <returns>The ADS error code.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.CreateSymbolLoader(TwinCAT.ISession,TwinCAT.ISymbolLoaderSettings)">
            <summary>
            Creates a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader">Symbol loader</see> with the specified mode.
            </summary>
            <param name="session">The session (for session orientated loads/symbols). Can be NULL if not present.</param>
            <param name="settings">The settings.</param>
            <returns>The <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader" /> interface of the Symbol loader.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <example>
            The following sample shows how to create a dynamic version of the SymbolLoader V2. The dynamic symbol loader makes use of the Dynamic Language Runtime (DLR) of the .NET Framework.
            That means Structures, Arrays and Enumeration types and instances are generated 'on-the-fly' during symbol Browsing. These created dynamic objects are a one to one representation
            of the Symbol Server target objects (e.g the IEC61131 types on the PLC).
            Dynamic language features are only available from .NET4 upwards.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE" />
            The following sample shows how to create a static (non dynamic) version of the SymbolLoader V2.
            The static symbol loader in version 2 is a nearly code compatible version of the Dynamic Loader, only the dynamic creation of objects is not available. The reason for supporting
            this mode is that .NET Framework Versions lower than Version 4.0 (CLR2) doesn't support the Dynamic Language Runtime (DLR).
            The SymbolLoader V2 static object is supported from .NET 2.0 on.
            <code language="C#" title="Virtual Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE" /></example>
            <example>
            The SymbolLoader V2 static object is supported from .NET 2.0 on.
            <code language="C#" title="Flat Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2Flat.cs" region="CODE_SAMPLE" /></example>
            <example>
              <code language="C#" title="Argument Parser" source="..\..\Samples\Sample.Ads.AdsClientCore\ArgParser.cs" region="CODE_SAMPLE" />
              <code language="C#" title="Dumping Symbols" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolDump.cs" region="CODE_SAMPLE" />
            </example>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) with Virtual Symbols
            <code language="C#" title="RPC Call in Virtual Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) with Dynamic Symbols.
            <code language="C#" title="RPC Call in Dynamic Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory" />
            <remarks>The Symbol Loader (V2) supports the following <see cref="T:TwinCAT.SymbolsLoadMode">modes</see>.
            <list type="Table">
            <listheader>
            <term></term><description></description>
            </listheader>
            <item>
            <term><see cref="F:TwinCAT.SymbolsLoadMode.Flat" /></term>
            <description>The flat mode organizes the Symbols in a flat list. At the beginning this List caches only the root symbol objects, which can be enumerated.
            To access the sub elements like structure fields or array elements use the <see cref="P:TwinCAT.TypeSystem.ISymbol.SubSymbols"/> collection. The property get
            accessor generates the subsymbols lazy on the fly (performance optimized) and stores them internally as weak reference (memory optimized).
            This mode is available in all .NET versions.</description>
            </item>
            <item>
            <term><see cref="F:TwinCAT.SymbolsLoadMode.VirtualTree" /></term>
            <description>On top of the behaviour of the <see cref="F:TwinCAT.SymbolsLoadMode.Flat"/>, the virtual tree mode organizes the Symbols hierarchically with parent-child relationships.
            That eases the access to the hierarchical structure but needs slightly more preprocessing of the data.
            This mode is available in all .NET Versions.
            </description>
            </item>
            <item>
            <term><see cref="F:TwinCAT.SymbolsLoadMode.DynamicTree" /></term>
            <description>The Dynamic tree mode organizes the Symbols hierarchically and (dynamically) creates struct members,
            array elements and enum fields on the fly. 'Dynamically' means here not only lazy creation like in <see cref="F:TwinCAT.SymbolsLoadMode.Flat"/>, but furthermore
            real creation of type safe .NET complex types/instances as represetantives of the TwinCAT Symbol objects/types. This feature is only available on platforms that support the Dynamic
            Language Runtime (DLR); actually all .NET Framework Version larger than 4.0.
            </description>
            </item>
            </list>
            Virtual instances means, that all Symbols are ordered within a tree structure. For that symbol nodes that are not located on a fixed address, a Virtual Symbol will be created.
            Setting the virtualInstance parameter to 'false' means, that the located symbols will be returned in a flattened list.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyString(System.UInt32,System.UInt32,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
            <exclude />
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyStringAsync(System.UInt32,System.UInt32,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            write any string as an asynchronous operation.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyString(System.UInt32,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <exclude />
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyString(System.String,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyStringAsync(System.UInt32,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            write any string as an asynchronous operation.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyStringAsync(System.String,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            write any string as an asynchronous operation.
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with the specified encoding.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryCreateVariableHandle(System.String,System.UInt32@)">
            <summary>
            Read (determine) the Symbol handle by its name/path
            </summary>
            <param name="symbolName">SymbolName / Path.</param>
            <param name="variableHandle">The handle.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAsync(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the data asynchronously from specified IndexGroup/IndexOffset
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readBuffer">The read buffer, memory area where the data is written.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadWriteAsync(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read/Writes data asynchronously to/from the specified <paramref name="writeBuffer"/>, <paramref name="readBuffer"/>
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultReadWrite"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAsync(System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Triggers a write call at the specified IndexGroup/IndexOffset asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAsync(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the data / Value asynchronously into the specified <paramref name="writeBuffer" />.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'Write' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAsync(System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the value data of the symbol asynchronously into the <paramref name="readBuffer" />.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead" /> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution..</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAsync(System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the value data asynchronously that is represented by the <paramref name="writeBuffer"/> to the symbol specified by the
            <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="writeBuffer">The write buffer/value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation. The <see cref="T:TwinCAT.Ads.ResultWrite"/> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TwinCAT#Ads#IAdsHandleCacheProvider#GetHandleCache">
            <summary>
            Gets the symbol table.
            </summary>
            <returns>SymbolTable.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TwinCAT#Ads#IAdsHandleCacheProvider#CreateHandleBag(System.String[],System.Boolean)">
            <summary>
            Creates a handle bag from symbol paths.
            </summary>
            <param name="instancePath">A list of symbol paths.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <returns>A handle bag that can be disposed.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TwinCAT#Ads#IAdsHandleCacheProvider#CreateNotificationHandleBag(TwinCAT.TypeSystem.ISymbol[],System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates a notification handle bag form the specified symbols.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">The user data.</param>
            <returns>A handle bag that can be disposed.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TwinCAT#Ads#IAdsHandleCacheProvider#CreateNotificationExHandleBag(System.Collections.Generic.IList{TwinCAT.TypeSystem.AnySymbolSpecifier},System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates the notification ex handle bag.
            </summary>
            <param name="symbols">The symbols</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <returns>IDisposableHandleBag.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TwinCAT#Ads#IAdsHandleCacheProvider#UnregisterHandleBag(TwinCAT.Ads.Internal.IDisposableHandleBag)">
            <summary>
            Unregisters the handle bag from this <see cref="T:TwinCAT.Ads.IAdsHandleTableProvider" />.
            </summary>
            <param name="bag">The handle bag.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" /> event.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="F:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" />
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" /> should always
            be called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryAddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" /> event.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS error code.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.TryDeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications..AddDeviceNotificationAsync" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryAddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx" /> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">The 'AnyType' arguments.</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS Error code.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />
            <remarks>If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive types (AnyType) are supported by this method.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationExAsync(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx" /> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument, only Primitive 'AnyTypes' allowed.</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="F:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />
            <remarks>If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive types (AnyType) are supported by this method.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationExAsync(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/> should always
            be called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryDeleteDeviceNotification(System.UInt32)">
            <summary>
            Deletes a registered notification.
            </summary>
            <param name="notificationHandle">Notification handle.</param>
            <returns>The ADS error code.</returns>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="E:TwinCAT.Ads.AdsConnection.AdsNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" /> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes a registered notification asynchronously.
            </summary>
            <param name="notificationHandle">Notification handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'DeleteDeviceNotification' operation. The <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property contains the
            ADS error code after execution.</returns>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" /> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.AddDeviceNotificationAsync(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" /> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="F:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.AdsConnection.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" /> should always
            be called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadSymbol(System.String,TwinCAT.Ads.TypeSystem.IAdsSymbol@)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="symbolPath">Name of the symbol.</param>
            <param name="symbol">The symbol.</param>
            <returns>A <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbol"/> containing the requested symbol information or null if symbol could not
            be found.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.  Array and structures are not supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny``1(System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <returns>The value of the read symbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsResult``1(System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an result object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <returns>The result.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude />
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync``1(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Reads data synchronously from an ADS device.
            </summary>
            <remarks>
            As object types only primitive types are supported.
            </remarks>
            <typeparam name="T">The Type of the value to be read.</typeparam>
            <param name="variableHandle">The variable/symbol handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync``1(System.UInt32,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">Type of the object to be read</typeparam>
            <param name="variableHandle">The variable handle.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync``1(System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The asynchronous result.</returns>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny``1(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsync``1(System.UInt32,System.UInt32,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the result value.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny``1(System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The value of the read symbol.</returns>
            <remarks>As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table"><listheader><term>Type of value Parameter</term><description>Necessary Arguments (args)</description></listheader><item><term>string</term><description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description></item><item><term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item><item><term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAny``1(System.UInt32,System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.CleanupSymbolTable">
            <summary>
            Clears the internal symbol cache.
            </summary>
            <remarks>Previously stored symbol information is cleared. As a consequence the symbol information must be obtained from the ADS server again if accessed, which
            which needs an extra ADS round trip.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValue``1(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol.</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadValue``1(TwinCAT.TypeSystem.ISymbol,``0@)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <param name="value">The value.</param>
            <returns>The ADS Error Code</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValueAsync``1(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValue``1(System.String)">
            <summary>
            Reads the value of a symbol and returns the value. The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <returns>Value of the symbol</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryReadValue``1(System.String,``0@)">
            <summary>
            Reads the value of a symbol and returns the value as object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">The read value of the Symbol.</param>
            <returns>The <see cref="T:TwinCAT.Ads.AdsErrorCode" />.</returns>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadValueAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>The parameter type must have the same layout as the ADS symbol.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteValueAsync``1(TwinCAT.TypeSystem.ISymbol,``0,System.Threading.CancellationToken)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteValue``1(System.String,``0)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">the value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryWriteValue``1(System.String,``0)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteValueAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InvokeRpcMethod(System.String,System.String,System.Object[])">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>This method only supports primitive data types as <paramref name="inParameters"/>. Any available outparameters will be ignored.
            Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InvokeRpcMethod(System.String,System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <param name="outParameters">The output parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retSpecifier">The ret specifier (specifiying the return value) or NULL.</param>
            <returns>The return value of the Method (as object).</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" /></example>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" /> and <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="retSpecifier" />) is not necessary and should not be set.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifiying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifiying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters"/>, <paramref name="outParameters"/>, <paramref name="outSpecifiers"/>, <paramref name="retSpecifier"/>
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers"/> and <paramref name="retSpecifier"/>) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryInvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the rpc method.
            </summary>
            <param name="symbolPath">The symbol.</param>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InvokeRpcMethodAsync(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbolPath">The symbol/Instance path of the symbol.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the rpc method.
            </summary>
            <param name="symbol">The RPC callable symbol</param>
            <param name="method">The method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" /></example>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />,
            are allowed to be empty or NULL.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbol">The RPC callable symbol."</param>
            <param name="method">The method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers.</param>
            <param name="retSpecifier">The ret specifier.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />
            are allowed to be empty or NULL.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" /></example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryInvokeRpcMethod(System.String,System.String,System.Object[],System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <returns>The ADS Error Code.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.TryInvokeRpcMethod(System.String,System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The ADS Error Code.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.InvokeRpcMethodAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbolPath">The symbol/Instance path of the symbol.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains
            the return value together with the output parameters.
            </returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsResult``1(System.UInt32,System.Int32[])">
            <summary>
            Reads any as result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="variableHandle">The variable handle.</param>
            <param name="args">The arguments.</param>
            <returns>TwinCAT.Ads.ResultValue&lt;T&gt;.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsResult``1(System.UInt32,System.UInt32)">
            <summary>
            Reads any as result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <returns>TwinCAT.Ads.ResultValue&lt;T&gt;.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.ReadAnyAsResult``1(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Reads any as result.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="args">The arguments.</param>
            <returns>TwinCAT.Ads.ResultValue&lt;T&gt;.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsResult(System.UInt32,System.Object)">
            <summary>
            Writes any as result.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <returns>TwinCAT.Ads.ResultWrite.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsResult(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes any as result.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <returns>TwinCAT.Ads.ResultWrite.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsResult(System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes any type as result.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="args">The arguments.</param>
            <returns>TwinCAT.Ads.ResultWrite.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsConnection.WriteAnyAsResult(System.UInt32,System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes any type as result.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="args">The arguments.</param>
            <returns>TwinCAT.Ads.ResultWrite.</returns>
            <exception cref="T:System.ObjectDisposedException">this.Name</exception>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Name">
            <summary>
            Gets the name of this <see cref="T:TwinCAT.Ads.AdsConnection"/>.
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._connectionEstablishTime">
            <summary>
            The connection establish time
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ConnectionEstablishedAt">
            <summary>
            Gets the UTC time when the Connection was originally established.
            </summary>
            <value>The connection established at.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._connectionActiveSince">
            <summary>
            The UTC time when tha last active/resurrected Connection was established
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ActiveSince">
            <summary>
            Gets the UTC time when tha last active/resurrected Connection was established
            </summary>
            <value>The active since.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ResurrectingTries">
            <summary>
            Gets the number of tries to resurrect the <see cref="T:TwinCAT.Ads.AdsConnection"/>.
            </summary>
            <value>The number of tried resurrections of the <see cref="T:TwinCAT.IConnection"/>.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.TotalResurrectingTries">
            <summary>
            Gets the number of tries to resurrect the <see cref="T:TwinCAT.Ads.AdsConnection"/>.
            </summary>
            <value>The number of tried resurrections of the <see cref="T:TwinCAT.IConnection"/>.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Resurrections">
            <summary>
            Gets the number of succeeded connection resurrections.
            </summary>
            <value>The resurrection count.</value>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsConnection._resurrections">
            <summary>
            The number of resurrections.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.TotalResurrections">
            <summary>
            Gets the number of succeeded connection resurrections.
            </summary>
            <value>The resurrection count.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.ConnectionLostCount">
            <summary>
            Gets the connection lost count.
            </summary>
            <value>The connection lost count.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.TotalConnectionLosses">
            <summary>
            Gets the connection lost count.
            </summary>
            <value>The connection lost count.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsConnection.Timeout">
            <summary>
            Gets the timeout (in milliseconds)
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:TwinCAT.Ads.AdsTimeoutSetter">
            <summary>
            Helper class for overwrite the Timeout on <see cref="T:TwinCAT.Ads.AdsClient"/> temporarily.
            </summary>
            <seealso cref="T:System.IDisposable" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsTimeoutSetter.#ctor(TwinCAT.IConnection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsTimeoutSetter"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:System.ArgumentNullException">client</exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsTimeoutSetter.#ctor(TwinCAT.IConnection,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsTimeoutSetter"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsTimeoutSetter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.AdsTimeoutSetter"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTimeoutSetter._disposed">
            <summary>
            Disposed flag
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsTimeoutSetter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsTimeoutSetter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:TwinCAT.Ads.FailFastHandlerResetter">
            <summary>
            Class FailFastHandlerResetter.
            </summary>
            <remarks>Resets the FailFastHandler</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerResetter.Reset(TwinCAT.IConnection)">
            <summary>
            Resets the <see cref="T:TwinCAT.Ads.IFailFastHandler"/> for the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <remarks>This can be used to reset the FailFast errors state before timeout.
            </remarks>
            <returns>true, if the connection has a FailFastHandler, otherwise false.</returns>
        </member>
        <member name="T:TwinCAT.Ads.FailFastHandlerDisabler">
            <summary>
            Class FailFastHandlerDisabler.
            </summary>
            <remarks>Disables the FailFastHandler for the Lifetime of this class.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerDisabler.#ctor(TwinCAT.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.FailFastHandlerDisabler"/> class.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerDisabler.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.FailFastHandlerDisabler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.PreventConnectionRejectedError">
            <summary>
            Helper class for preventing ConnectionRejected Errors (preventing the Error Trip on WSA_ConnRefused)
            </summary>
            <exclude/>
            <seealso cref="T:System.IDisposable" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.PreventConnectionRejectedError._oldSetting">
            <summary>
            The cached old setting
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.PreventConnectionRejectedError._actualSetting">
            <summary>
            The actual (my) setting
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.PreventConnectionRejectedError._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.PreventConnectionRejectedError.#ctor(TwinCAT.Ads.AdsConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.PreventConnectionRejectedError"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">client</exception>
        </member>
        <member name="M:TwinCAT.Ads.PreventConnectionRejectedError.getCurrentValue">
            <summary>
            Gets the actual configured value (to restore it afterwards)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.PreventConnectionRejectedError.register(System.Boolean)">
            <summary>
            Registers the new setting
            </summary>
            <param name="set">if set to <c>true</c> [set].</param>
        </member>
        <member name="M:TwinCAT.Ads.PreventConnectionRejectedError.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.AdsTimeoutSetter"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.PreventConnectionRejectedError._disposed">
            <summary>
            Disposed flag
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.PreventConnectionRejectedError.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.PreventConnectionRejectedError.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:TwinCAT.Ads.IInterceptionFactory">
            <summary>
            Interface IInterceptionFactory
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IInterceptionFactory.CreateInterceptor">
            <summary>
            Creates the communication interceptor(s).
            </summary>
            <returns>ICommunicationInterceptor.</returns>
        </member>
        <member name="T:TwinCAT.Ads.SessionSettings">
            <summary>
            Session settings class
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SessionSettings.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SessionSettings"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SessionSettings.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SessionSettings"/> class.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="fastWriteThrough">if set to <c>true</c> [fast write through].</param>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.Timeout">
            <summary>
            Gets the ADS timeout in milliseconds.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.Default">
            <summary>
            Gets the default Settings (Synchronized).
            </summary>
            <remarks>
            The following defaults are set here:
            <list type="table">
            <listheader><term>Setting</term><description>Description</description></listheader>
                <item><term>Communication Timeout (<see cref="P:TwinCAT.Ads.SessionSettings.Timeout"/>)</term><description>Default communication timeout (<see cref="P:TwinCAT.Ads.SessionSettings.DefaultCommunicationTimeout"/>, default 5s)</description></item>
                <item><term>Resurrection Timeout (<see cref="P:TwinCAT.Ads.SessionSettings.ResurrectionTime"/>)</term><description>Default communication timeout (<see cref="P:TwinCAT.Ads.SessionSettings.DefaultResurrectionTime"/>, default 21s)</description></item>
                <item><term>Dynamic SymbolLoader settings <see cref="P:TwinCAT.Ads.SessionSettings.SymbolLoader"/></term><description>Synchronized mode activated (<see cref="P:TwinCAT.SymbolLoaderSettings.DefaultDynamic"/>)</description></item>
            </list>
            </remarks>
            <value>The default settings.</value>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.FastWriteThrough">
            <summary>
            Gets a Settings object that configures the AdsSession for FastWriteThrough
            </summary>
            <value>Session settings for a fast write through (with 200 ms Timeout).</value>
            <remarks>The settings typically can be used for polling clients, where the "FailFast"
            feature will be bypassed. That means, that communication fails doesn't trigger
            the FailFast interceptor and every Request will go out via ADS.
            This has the Drawback that communication Timeouts are longer and subsequent timeouts
            block the ADS mailbox (with the danger of overflows). So use this setting with care 
            for specific purposes and should not be used for standard communication.
            <list type="bullet">
            <item><description>No Resurrection time and therefore:</description></item>
            <item><description>No <see cref="T:TwinCAT.Ads.IFailFastHandler">FailFastHandler</see> active.</description></item>
            <item><description>Default communication timeout 200ms.</description></item>
            <item><description>Not synchronized Notifications.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.DefaultCommunicationTimeout">
            <summary>
            The default communication timeout (5 Seconds)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.DefaultResurrectionTime">
            <summary>
            The default resurrection time (21 Seconds)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.ResurrectionTime">
            <summary>
            Gets or sets the resurrection time (Default: <see cref="P:TwinCAT.Ads.SessionSettings.DefaultResurrectionTime"/>)
            </summary>
            <value>The resurrection time.</value>
            <remarks>The resurrection time is the time after a lost connection <see cref="F:TwinCAT.ConnectionState.Lost"/>
            can be 'resurrected'. This time is set to 21 Seconds by default (a value greater than the standard
            Ethernet connection timeout of 20s). The reason for this timeout is not to flood the ADS mailbox
            with requests that cannot be handled by the ethernet infrastructure.
            As long this Timespan is not expired after a recognized <see cref="F:TwinCAT.ConnectionState.Lost"/>, no further
            data communication is done, and requests are immediately ('FailFast') answered by communication
            exceptions.
            <b>Change this value only for edge cases.</b>
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.SymbolLoader">
            <summary>
            Gets or sets the symbol loader settings
            </summary>
            <value>The symbol loader.</value>
        </member>
        <member name="P:TwinCAT.Ads.SessionSettings.DefaultValueStringEncoding">
            <summary>
            Gets or sets the default value string encoding
            </summary>
            <value>The default value string encoding.</value>
            <remarks>If set, the Standard Value Encoding is overridden.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.IAdsSessionSettings">
            <summary>
            Interface for ADS Session Settings
            </summary>
            <seealso cref="T:TwinCAT.ISessionSettings" />
        </member>
        <member name="P:TwinCAT.Ads.IAdsSessionSettings.Timeout">
            <summary>
            Gets the ADS timeout in milliseconds.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:TwinCAT.Ads.IAdsSessionSettings.ResurrectionTime">
            <summary>
            Gets or sets the resurrection time.
            </summary>
            <value>The resurrection time.</value>
        </member>
        <member name="P:TwinCAT.Ads.IAdsSessionSettings.SymbolLoader">
            <summary>
            Gets or sets the symbol loader settings
            </summary>
            <value>The symbol loader.</value>
        </member>
        <member name="P:TwinCAT.Ads.IAdsSessionSettings.DefaultValueStringEncoding">
            <summary>
            Gets or sets the default value string encoding
            </summary>
            <remarks>If set, the Standard Value Encoding is overridden.</remarks>
            <value>The default value string encoding.</value>
        </member>
        <member name="T:TwinCAT.Ads.AdsSessionBase">
            <summary>
            Abstract base class for ADS Sessions.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.#ctor(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.SessionSettings,TwinCAT.Ads.Internal.IAdsClientFactory,Microsoft.Extensions.Logging.ILogger,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSessionBase" /> class.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <param name="factory">The client factory</param>
            <param name="logger">The logger.</param>
            <param name="owner">The session owner</param>
            <exception cref="T:System.ArgumentNullException">address</exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.AdsSessionBase"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsSessionBase._address">
            <summary>
            The address
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.Address">
            <summary>
            Gets the target address of the <see cref="T:TwinCAT.Ads.AdsSessionBase"/>
            </summary>
            <value>The address.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.OnGetAddress">
            <summary>
            Handler function getting the address of the session.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="F:TwinCAT.Ads.AdsSessionBase._settings">
            <summary>
            The Session Settings settings
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.Settings">
            <summary>
            Gets the settings of the Session/Connection.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsSessionBase._logger">
            <summary>
            The logger interface
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.Logger">
            <summary>
            Gets the logger interface or null.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.EnsureConnection">
            <summary>
            Ensures, that the <see cref="T:TwinCAT.ISession" /> is connected and returns the <see cref="T:TwinCAT.IConnection" /> object.
            </summary>
            <returns>IConnection.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>If the session is actually not connected an exception will be thrown.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.OnConnect(System.Boolean)">
            <summary>
            Handler function connecting the Session.
            </summary>
            <returns>IConnection.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.OnDisconnect">
            <summary>
            Handler function disconnecting the session.
            </summary>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Session" /> is disconnected, <c>false</c> if the <see cref="T:TwinCAT.Session" /> was disconnected before.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.OnRouterStateChanged(System.Object,TwinCAT.Ads.AmsRouterNotificationEventArgs)">
            <summary>
            Handles the AmsRouterNotification event of the _connection control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwinCAT.Ads.AmsRouterNotificationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.GetSessionName">
            <summary>
            Gets the name/string identifier of the session.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:TwinCAT.Ads.AdsSessionBase._interceptor">
            <summary>
            Interceptor collection
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsSessionBase._failFastHandlerInterceptor">
            <summary>
            Fail fast handler
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsSessionBase._connectionStateObserver">
            <summary>
            Connection observer
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.ConnectionObserver">
            <summary>
            Gets the Connection observer
            </summary>
            <value>Connection observer.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.TwinCAT#Ads#IInterceptionFactory#CreateInterceptor">
            <summary>
            Creates the interceptor.
            </summary>
            <returns>ICommunicationInterceptor.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionBase.OnCreateSymbolServer">
            <summary>
            Handler function creating the symbol server object.
            </summary>
            <returns>ISymbolServer.</returns>
            <exception cref="T:TwinCAT.SessionNotConnectedException">The connection is not established!</exception>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.Statistics">
            <summary>
            Gets the Communication / Session statistics.
            </summary>
            <value>The communication / Session statistics.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.NetId">
            <summary>
            Gets the NetId of the Session
            </summary>
            <value>The net identifier.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.Port">
            <summary>
            Gets the Ams Port of the Session
            </summary>
            <value>The port.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsSessionBase._owner">
            <summary>
            The session owner
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionBase.Owner">
            <summary>
            Gets the Session owner.
            </summary>
            <value>The owner or NULL</value>
        </member>
        <member name="T:TwinCAT.Ads.AdsSessionProvider">
            <summary>
            ADS Session Provider class.
            </summary>
            <seealso cref="T:TwinCAT.SessionProvider`3" />
            <Exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSessionProvider"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionProvider.Name">
            <summary>
            Gets the name of the SessionProvider
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionProvider.Create(System.Object,TwinCAT.ISessionSettings)">
            <summary>
            Creates the Session with address and communication settings.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <returns>ISession.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsSessionProvider.Create(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.SessionSettings)">
            <summary>
            Creates the specified address.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <returns>S.</returns>
        </member>
        <member name="P:TwinCAT.Ads.AdsSessionProvider.Self">
            <summary>
            Gets the Singleton instance
            </summary>
            <value>The self.</value>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumCommandBase">
            <summary>
            Abstract base class for ADS Sum Commands.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},TwinCAT.Ads.SumCommand.SumCommandMode,TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="N:TwinCAT.Ads.SumCommand" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="sumEntities">The sym information.</param>
            <param name="accessMode">The access mode.</param>
            <param name="readWriteMode">The read write mode.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.SumCommand.SumCommandMode,TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="N:TwinCAT.Ads.SumCommand" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="commandMode">The command mode.</param>
            <param name="readWriteMode">The access mode.</param>
            <param name="errorStrategy">The error strategy.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.connection">
            <summary>
            The connection used for communication.
            </summary>
            <remarks>This can be the <seealso cref="T:TwinCAT.Ads.AdsConnection"/> or <see cref="T:TwinCAT.Ads.AdsClient"/> object.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.Connection">
            <summary>
            The connection used for communication.
            </summary>
            <remarks>This can be the <seealso cref="T:TwinCAT.Ads.AdsConnection"/> or <see cref="T:TwinCAT.Ads.AdsClient"/> object.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase._errorStrategy">
            <summary>
            The error strategy of the SumCommand
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.ErrorStrategy">
            <summary>
            Gets the error strategy of the SumCommand
            </summary>
            <value>The error strategy.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.calcReadLength">
            <summary>
            Calculates the length of the complete read Stream (all Read data)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.calcWriteLength">
            <summary>
            Calculates the length of the complete write stream (all written data)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.MarshalSumReadHeader(System.UInt32,System.UInt32,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshals the header information for a single Sum entity object (for a sum read)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="bytes">The byte size of the date to Read or Write</param>
            <param name="writer">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.MarshalSumWriteHeader(System.UInt32,System.UInt32,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshals the header information for a single Sum entity object (for a sum write)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="bytes">The byte size of the date to Read or Write</param>
            <param name="writer">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.MarshalSumReadWriteHeader(System.UInt32,System.UInt32,System.Int32,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshals the header information for a single Sum entity object (for a sum read/write)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readBytes">The read bytes.</param>
            <param name="writeBytes">The write bytes.</param>
            <param name="writer">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.sumEntities">
            <summary>
            List of single entities that build up the SumCommandBase
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.mode">
            <summary>
            Sum Access Mode
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.commandMode">
            <summary>
            Sum Command Mode
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.ig">
            <summary>
            IndexGroup Used by the SumCommandBase
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.result">
            <summary>
            SumCommand main result.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.Result">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AdsErrorCode" /> of the main SumCommandBase ADS Request
            </summary>
            <value>The result.</value>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.subResults">
            <summary>
            Sum Command sub results.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.SubResults">
            <summary>
            Gets the sub results of the single Sub Requests.
            </summary>
            <value>The sub results.</value>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandBase.executed">
            <summary>
            Indicates, that the <see cref="N:TwinCAT.Ads.SumCommand"/> has executed already one time.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.Executed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" /> was already executed.
            </summary>
            <value><c>true</c> if executed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.Succeeded">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" /> is succeeded.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.Failed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" /> faled.
            </summary>
            <remarks>The <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/> is classified as 'Failed' if the main ADS request, or one of the SubRequests failed!</remarks>
            <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.SucceededCount">
            <summary>
            Gets the count of succeeded subcommands.
            </summary>
            <value>The succeeded count.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandBase.FailedCount">
            <summary>
            Gets the count of failed subcommands.
            </summary>
            <value>The failed count.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.Execute(System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,System.Int32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Executes the sum Command.
            </summary>
            <param name="writeData">The data to write.</param>
            <param name="readData">The data to read.</param>
            <param name="readDataSizes">ReadDataSizes (only in ReadWrite mode).</param>
            <param name="returnCodes">Return Codes.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.ExecuteAsync(System.Nullable{System.ReadOnlyMemory{System.Byte}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes the <see cref="N:TwinCAT.Ads.SumCommand"/>.
            </summary>
            <param name="writeData">The data to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ExecuteAsync' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumReadRaw"/>. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> property.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.OnWriteSumEntityData(TwinCAT.Ads.SumCommand.SumDataEntity,System.Span{System.Byte})">
            <summary>
            Marshals (writes) a single entitiy.
            </summary>
            <param name="entity">Single entity description.</param>
            <param name="writeData">The data to write.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandBase.OnReadReturnData(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,System.Int32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Unmarshals (reads) the result from the Reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readData">The read data.</param>
            <param name="readDataSizes">The read data sizes.</param>
            <param name="returnCodes">The return codes.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumCommandWrapper`1">
            <summary>
            SumCommandBase Adapter object to wrap inner SumCommands.
            </summary>
            <typeparam name="T"></typeparam>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.#ctor(TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCommandWrapper`1"/> class.
            </summary>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.innerCommand">
            <summary>
            The inner sum command.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.Result">
            <summary>
            Gets teh <see cref="T:TwinCAT.Ads.AdsErrorCode" /> of the main SumCommandBase ADS Request
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.SubResults">
            <summary>
            Gets the sub results of the single Sub Requests.
            </summary>
            <value>The sub results.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.Executed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" /> was already executed.
            </summary>
            <value><c>true</c> if executed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.Succeeded">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" /> is succeeded.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.Failed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" /> failed.
            </summary>
            <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.Connection">
            <summary>
            The connection used for communication.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandWrapper`1._errorStrategy">
            <summary>
            The error strategy
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.ErrorStrategy">
            <summary>
            Gets the error strategy of the <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" />
            </summary>
            <value>The error strategy.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.SucceededCount">
            <summary>
            Gets the count of succeeded subcommands.
            </summary>
            <value>The succeeded count.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.FailedCount">
            <summary>
            Gets the count of failed subcommands.
            </summary>
            <value>The failed count.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCommandWrapper`1.OnGetConnection">
            <summary>
            Gets the connection object.
            </summary>
            <returns>IAdsConnection.</returns>
            <exception cref="T:TwinCAT.ClientNotConnectedException"></exception>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumRead">
            <summary>
            The ADS SumRead Command.
            </summary>
            <remarks>Reads the data as Raw list of byte[].</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumRead" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="sumEntities">The SumCommandBase entities.</param>
            <param name="readWriteMode">The read write mode.</param>
            <param name="errorStrategy">The error strategy.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.IgIoSumReadEntity},TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumRead"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="readInfos">The read infos.</param>
            <param name="errorStrategy">The error strategy.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.SumCommand.SumAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumRead" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="readWriteMode">The read write mode.</param>
            <remarks>Using <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/>.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumRead" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="readWriteMode">The read write mode.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.calcReadLength">
            <summary>
            Calculates the length of the read Stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.calcWriteLength">
            <summary>
            Calculates the length of the write stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.TryReadRaw(System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Try Read
            </summary>
            <param name="readData">The read data.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.ReadRaw"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.ReadRawAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.TryReadRaw(TwinCAT.Ads.SumCommand.ResultSumReadRaw@)">
            <summary>
            Try Read
            </summary>
            <param name="result">The result.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.ReadRaw" />
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.ReadRawAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.ReadRawAsync(System.Threading.CancellationToken)">
            <summary>
            Read the <see cref="T:TwinCAT.Ads.SumCommand.SumRead"/> data in raw bytes.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'Read' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumReadRaw" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.ReadRaw"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.TryReadRaw(System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.ReadRaw">
            <summary>
            Reads the values (as list of byte arrays)
            </summary>
            <returns>IList&lt;System.Byte[]&gt;.</returns>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumRead failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.TryReadRaw(System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumRead.ReadRawAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.OnReadReturnData(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,System.Int32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Unmarshals (reads) the result from the Reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readData">The read data.</param>
            <param name="readDataSizes">The read data sizes.</param>
            <param name="returnCodes">The return codes.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumRead.OnWriteSumEntityData(TwinCAT.Ads.SumCommand.SumDataEntity,System.Span{System.Byte})">
            <summary>
            Marshals (writes) a single entitiy.
            </summary>
            <param name="entity">Single entity description.</param>
            <param name="writer">The writer.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumWrite">
            <summary>
            ADS Sum Write Command.
            </summary>
            <remarks>Write data is raw array of byte[].</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumWrite" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="sumEntities">The sym information.</param>
            <param name="readWriteMode">The read write mode.</param>
            <param name="errorStrategy">The error strategy.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.SumCommand.SumAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumWrite" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="readWriteMode">The read write mode.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/> by default.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumWrite" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="readWriteMode">The read write mode.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.calcReadLength">
            <summary>
            Calculates the length of the read Stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.calcWriteLength">
            <summary>
            Calculates the length of the write stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.TryWriteRaw(System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to write the data in raw list of byte arrays.
            </summary>
            <param name="writeData">The write data.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRaw(System.ReadOnlyMemory{System.Byte})"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.TryWriteRaw(System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.SumCommand.ResultSumCommand@)">
            <summary>
            Tries to write the data in raw list of byte arrays.
            </summary>
            <param name="writeData">The write data.</param>
            <param name="result">The result.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRaw(System.ReadOnlyMemory{System.Byte})" />
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Tries to write the data in raw list of byte arrays.
            </summary>
            <param name="writeData">The write data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'WriteRaw' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumCommand" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRaw(System.ReadOnlyMemory{System.Byte})"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.TryWriteRaw(System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRaw(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the data in form of raw list of byte arrays.
            </summary>
            <param name="writeData">The write data.</param>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumWriteCommand failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.TryWriteRaw(System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumWrite.WriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.OnWriteSumEntityData(TwinCAT.Ads.SumCommand.SumDataEntity,System.Span{System.Byte})">
            <summary>
            Marshals (writes) a single entitiy.
            </summary>
            <param name="entity">Single entity description.</param>
            <param name="writer">The writer.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumWrite.OnReadReturnData(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,System.Int32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Unmarshals (reads) the result from the Reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readData">The read data.</param>
            <param name="readDataSizes">The read data sizes.</param>
            <param name="returnCodes">The return codes.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumReadWrite">
            <summary>
            Ads SumReadWrite Command.
            </summary>
            Read/Write value data is expected as already marshalled list of byte[].
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumReadWrite" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="sumEntities">The sym information.</param>
            <param name="readWriteMode">The read write mode.</param>
            <param name="errorStrategy">The error strategy</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.calcReadLength">
            <summary>
            Calculates the length of the read Stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.calcWriteLength">
            <summary>
            Calculates the length of the write stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.TryReadWriteRaw(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries the read write.
            </summary>
            <param name="writeData">The write data.</param>
            <param name="readData">The read data.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRaw(System.ReadOnlyMemory{System.Byte})"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.TryReadWriteRaw(System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.SumCommand.ResultSumReadRaw@)">
            <summary>
            Tries the read write.
            </summary>
            <param name="writeData">The write data.</param>
            <param name="result">The result.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRaw(System.ReadOnlyMemory{System.Byte})" />
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Processes the <see cref="T:TwinCAT.Ads.SumCommand.SumReadWrite"/> asynchronously.
            </summary>
            <param name="writeData">The write data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReadWriteRaw' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumCommand" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRaw(System.ReadOnlyMemory{System.Byte})"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.TryReadWriteRaw(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRaw(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Reads/Writes the data in Raw form (as list of byte arrays)
            </summary>
            <param name="writeData">The write data.</param>
            <returns>IList&lt;System.Byte[]&gt;.</returns>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumReadWriteCommand failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.TryReadWriteRaw(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReadWrite.ReadWriteRawAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.OnWriteSumEntityData(TwinCAT.Ads.SumCommand.SumDataEntity,System.Span{System.Byte})">
            <summary>
            Marshals (writes) a single entitiy.
            </summary>
            <param name="entity">Single entity description.</param>
            <param name="writer">The writer.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReadWrite.OnReadReturnData(System.ReadOnlyMemory{System.Byte},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@,System.Int32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Unmarshals (reads) the result from the Reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readData">The read data.</param>
            <param name="readDataSizes">The read data sizes.</param>
            <param name="returnCodes">The return codes.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2">
            <summary>
            SumCommand that uses the instance path as symbol identifier (Abstract).
            </summary>
            <remarks></remarks>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2.OnGetConnection">
            <summary>
            Gets the connection object.
            </summary>
            <returns>IAdsConnection.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{System.ValueTuple{`1,System.Type,System.Int32[]}})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolCommand`1" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="typeSpecs">The type specs.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/>.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{System.ValueTuple{`1,System.Type,System.Int32[]}},TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolCommand`1" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="typeSpecs">The type specs.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2.instancePaths">
            <summary>
            The symbols
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2.InstancePaths">
            <summary>
            The symbols
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathCommand`2.CreateSumEntityInfos">
            <summary>
            Creates the information list.
            </summary>
            <returns>IList&lt;SumSymbolInfo&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumSymbolCommand`1">
            <summary>
            Base class that implements SumAccess for a set of <see cref="T:TwinCAT.TypeSystem.ISymbol"/> objects. (abstract)
            </summary>
            <remarks>This class gives the choice between different <see cref="P:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.AccessMode">Access modes, but depend on the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> object.</see></remarks>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumSymbolCommand`1._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.OnGetConnection">
            <summary>
            Gets the connection object.
            </summary>
            <returns>IAdsConnection.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.SumCommand.SumAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolCommand`1" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to access.</param>
            <param name="accessMode">The access mode.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/>.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolCommand`1" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to access.</param>
            <param name="accessMode">The access mode.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IReadOnlyList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.SumCommand.SumAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolCommand`1" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to access.</param>
            <param name="accessMode">The access mode.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/>.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IReadOnlyList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.SumCommand.SumAccessMode,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolCommand`1" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to access.</param>
            <param name="accessMode">The access mode.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.symbols">
            <summary>
            The symbols
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.Symbols">
            <summary>
            The symbols (readOnly)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.accessMode">
            <summary>
            The access mode
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.AccessMode">
            <summary>
            Gets the access mode.
            </summary>
            <value>The access mode.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.CreateSumEntityInfos">
            <summary>
            Creates the information list.
            </summary>
            <returns>IList&lt;SumSymbolInfo&gt;.</returns>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.UnwrappedSymbols">
            <summary>
            Gets the unwrapped symbols (Decoupled from DynamicSymbols)
            </summary>
            <value>The unwrapped symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumSymbolCommand`1.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor.</value>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumSymbolReadBase">
            <summary>
            Abstract base class for Symbolic ADS Sum read access
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolReadBase.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.SumCommand.SumAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumRead"/> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to read</param>
            <param name="accessMode">The access mode.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolReadBase.CreateSumEntityInfos">
            <summary>
            Creates the information list.
            </summary>
            <returns>IList&lt;SumSymbolInfo&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolReadBase.OnRead(System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@,System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}}@)">
            <summary>
            Handler function reading the raw data synchronously
            </summary>
            <param name="infoList">The information list.</param>
            <param name="values">The values.</param>
            <param name="returnCodes">The return codes.</param>
            <param name="readData">The read data.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotSupportedException">SumAccessMode '{base.AccessMode}' is not supported!</exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolReadBase.OnReadAsync(System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},System.Threading.CancellationToken)">
            <summary>
            Handler function reading the data asynchronously
            </summary>
            <param name="infoList">The information list.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultSumReadRaw&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolReadBase.createResults(System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}},TwinCAT.Ads.AdsErrorCode[])">
            <summary>
            Creates the SumCommand results (abstract)
            </summary>
            <param name="infoList">The information list.</param>
            <param name="readBlocks">The read blocks.</param>
            <param name="subErrors">The sub errors.</param>
            <returns>ResultReadValueAccess2[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolReadBase.marshalInstancePathEntities(System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity})">
            <summary>
            Marshals the instance path entities.
            </summary>
            <param name="infoList">The information list.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumSymbolRead">
            <summary>
            Symbolic ADS Sum read access (automatic marshalling)
            </summary>
            <remarks>The <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolRead"/> implements symbolic read access with automatic (dynamic) value marshalling.
            The advantage of the symbolic access is (in contrast to the handle access classes <see cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>,<see cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/>)
            that all type information is available when using this ADS Sum Command. The disadvantage is, that the Symbolic information must be loaded beforehand, see examples.
            The <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/> defaults to an InstancPath/SymbolName read (<see cref="F:TwinCAT.Ads.SumCommand.SumAccessMode.ValueByName"/>). 
            </remarks>
            <example>
            <code language="C#" title="Usage of SumSymbolRead/SumSymbolWrite with AdsSession" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYSESSION"/>
            </example>
            <example>
            <code language="C#" title="Usage of SumSymbolRead/SumSymbolWrite with AdsClient" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYCLIENT"/>
            </example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumAnyTypeRead"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolRead"/> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to read</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.SumCommand.SumAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolRead"/> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to read</param>
            <param name="accessMode">The access mode.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Reads the specified symbols.
            </summary>
            <remarks>The returned values are automatically marshalled to their appropriate .NET types.
            </remarks>
            <param name="values">The values.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolRead.Read"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolRead.ReadAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads Symbol values as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'Read' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolRead.Read"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.Read2">
            <summary>
            Reads the Values.
            </summary>
            <returns>System.Object[].</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2`1.Read2Async(System.Threading.CancellationToken)" />
            <remarks>The return values are automatically marshalled to their appropriate .NET types.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.Read2Async(System.Threading.CancellationToken)">
            <summary>
            Read2 as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A Task&lt;ResultSumValues2`1&gt; representing the asynchronous operation.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2`1.Read2" />
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.createResults(System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}},TwinCAT.Ads.AdsErrorCode[])">
            <summary>
            Creates the SumCommand results (abstract)
            </summary>
            <param name="infoList">The information list.</param>
            <param name="readBlocks">The read blocks.</param>
            <param name="subErrors">The sub errors.</param>
            <returns>ResultReadValueAccess2[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.Read">
            <summary>
            Reads the combined (Sum) Symbols and returns them as value array.
            </summary>
            <returns>The value array.</returns>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumSymbolRead failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)" />
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.ReadAsync(System.Threading.CancellationToken)" />
            <remarks>The return values are automatically marshalled to their appropriate .NET types.
            This method throws Exceptions, when the Read access fails.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolRead.ReadAsResult">
            <summary>
            Reads the combined (Sum) Symbols and returns them as <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues">Result</see> object.
            </summary>
            <returns>The Result object.</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumAnyTypeRead">
            <summary>
            Symbolic ADS Sum read access (ANY_TYPE marshalling) on already loaded symbols.
            </summary>
            <example>
              <code language="C#" title="Usage of the SumAnyTypeRead SumCommand" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMSYMBOLANYTYPEREAD" />
            </example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand" />
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumRead2`1"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumRead" />
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite" />
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead" />
            <remarks>The <see cref="T:TwinCAT.Ads.SumCommand.SumAnyTypeRead" /> implements symbolic read with predefined value marshalling. The requested value types are specified before
            calling the read operation an must fit to its symbol definition.
            The advantage of the symbolic access is (in contrast to the handle access classes <see cref="T:TwinCAT.Ads.SumCommand.SumHandleRead" />,<see cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite" />) or the acess
            by instance path (<see cref="T:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead" />) that all type information is available when using this ADS Sum Command. The disadvantage is, that the Symbolic information must be loaded before using this SumCommand, see examples.
            The <see cref="T:TwinCAT.Ads.SumCommand.SumAnyTypeRead" /> defaults to an InstancePath/SymbolName read (<see cref="F:TwinCAT.Ads.IndexGroupSymbolAccess.ValueByName" /><see cref="F:TwinCAT.Ads.SumCommand.SumAccessMode.ValueByName" />).</remarks>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumAnyTypeRead._marshaler">
            <summary>
            The ANY_TYPE Marshaler
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAnyTypeRead.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{System.ValueTuple{TwinCAT.TypeSystem.ISymbol,System.Type,System.Int32[]}})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumAnyTypeRead"/> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbolSpec">The symbols specifier (ANY_TYPE)</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAnyTypeRead.Read2Async(System.Threading.CancellationToken)">
            <summary>
            Read as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A Task&lt;ResultSumValues2&gt; representing the asynchronous operation.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2.Read" />
            <seealso cref="!:TryRead(out object[], out AdsErrorCode[])" />
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAnyTypeRead.Read2">
            <summary>
            Reads the Values.
            </summary>
            <returns>System.Object[].</returns>
            <seealso cref="!:TryRead(out object[], out AdsErrorCode[])" />
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2.ReadAsync(System.Threading.CancellationToken)" />
            <remarks>The return values are automatically marshaled to their appropriate .NET types.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAnyTypeRead.createResults(System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}},TwinCAT.Ads.AdsErrorCode[])">
            <summary>
            Creates the SumCommand results (abstract)
            </summary>
            <param name="infoList">The information list.</param>
            <param name="readBlocks">The read blocks.</param>
            <param name="subErrors">The sub errors.</param>
            <returns>ResultReadValueAccess2[].</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead">
            <summary>
            SumRead Command that uses the instancePath as symbol ID / Address and returns objects as Values (ANY Type marshaling)
            </summary>
            <example>
              <code language="C#" title="Usage of the SumInstancePathAnyTypeRead SumCommand" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMSYMBOLANYTYPEREAD" />
            </example>
            <remarks>The return value results will be produced by the <see cref="T:TwinCAT.TypeSystem.AnyTypeMarshaler" /> and must be predefined following the ANY_TYPE concept.
            Therefore a list of specifiers must be specified for the <see cref="T:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead" /> constructor.
            The internal single value reads are done by <see cref="F:TwinCAT.Ads.IndexGroupSymbolAccess.ValueByName"/> / <see cref="F:TwinCAT.Ads.SumCommand.SumAccessMode.ValueByName"/>.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead._marshaler">
            <summary>
            The used type marshaler (ANY_TYPE).
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{System.ValueTuple{System.String,System.Type,System.Int32[]}})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumRead" /> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="typeSpecs">List of InstancePath / ANY_TYPE specifiers to specify the types of the return values.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead.CreateSumEntityInfos">
            <summary>
            Creates the information list.
            </summary>
            <returns>IList&lt;SumSymbolInfo&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads all the values as an asynchronous operation in one ADS roundtrip and returns an result object containing all the SumCommand SubResults.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A Task&lt;ResultSumValues2&gt; representing the asynchronous operation.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2.Read" />
            <seealso cref="!:TryRead(out object[], out AdsErrorCode[])" />
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead.Read">
            <summary>
            Reads all the values in one ADS roundtrip and returns an result object containing all the SumCommand SubResults.
            </summary>
            <returns>System.Object[].</returns>
            <seealso cref="!:TryRead(out object[], out AdsErrorCode[])" />
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2.ReadAsync(System.Threading.CancellationToken)" />
            <remarks>The return values are automatically marshalled to their appropriate .NET types.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumInstancePathAnyTypeRead.createResults(System.Collections.Generic.IList{TwinCAT.Ads.SumCommand.SumDataEntity},TwinCAT.Ads.AdsErrorCode,System.UInt32,System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}},TwinCAT.Ads.AdsErrorCode[])">
            <summary>
            Creates the (Sub) results objects.
            </summary>
            <param name="infoList">The information list.</param>
            <param name="sumResult">The sum result.</param>
            <param name="invokeId">The invoke identifier.</param>
            <param name="readBlocks">The read blocks.</param>
            <param name="subErrors">The sub errors.</param>
            <returns>ResultReadTypedValueAccess&lt;System.String, System.Object&gt;[].</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumSymbolWrite">
            <summary>
            Class for ADS Sum symbolic Write Access.
            </summary>
            <remarks>The <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/> implements symbolic write access with automatic (dynamic) value marshalling.
            The advantage of the symbolic access is (in contrast to the handle access classes <see cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>,<see cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/>)
            that all type information is available when using this ADS Sum Command. The disadvantage is, that the Symbolic information must be loaded beforehand, see examples.
            The <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/> defaults to an IndexGroup/IndexOffset read (<see cref="F:TwinCAT.Ads.SumCommand.SumAccessMode.IndexGroupIndexOffset"/>), because the the write access by InstancePath/SymbolName
            is not supported. The disadvantage of this mode is, that dereferencing References/Pointers don't work and their values cannot be resolved.
            An option is to use the <see cref="F:TwinCAT.Ads.SumCommand.SumAccessMode.ValueByHandle"/>, but that means to use more ADS roundtrips because the handles have to be requested first!
            </remarks>
            <example>
            <code language="C#" title="Usage of SumRead/SumSymbolWrite with AdsSession" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYSESSION"/>
            </example>
            <example>
            <code language="C#" title="Usage of SumRead/SumSymbolWrite with AdsClient" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYCLIENT"/>
            </example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to read</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol},TwinCAT.Ads.SumCommand.SumAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/> class.
            </summary>
            <param name="connection">The ADS Connection.</param>
            <param name="symbols">The symbols to read</param>
            <param name="accessMode">Sum access mode.</param>
            <exclude/>
            <remarks>A WriteSymbolByName is not implemented by TwinCAT. Therefore, actually only by IndexGroupIndexOffset is possible. Use WriteByHandle instead.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.CreateSumEntityInfos">
            <summary>
            Creates the information list.
            </summary>
            <returns>IList&lt;SumSymbolInfo&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.TryWrite(System.Object[],TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Writes the specified values.
            </summary>
            <remarks>The written values will be marshalled automatically to their appropriate ADS types.
            </remarks>
            <param name="values">The values.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.Write(System.Object[])"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.WriteAsync(System.Object[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.WriteAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Reads the symbol values asynchronously.
            </summary>
            <param name="values">The values.</param>
            <param name="cancel">The cancellation token</param>
            <returns>An asynchronous task that represents the 'Write' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumCommand" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.Write(System.Object[])"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.TryWrite(System.Object[],TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.Write(System.Object[])">
            <summary>
            Writes the specified values.
            </summary>
            <remarks>The values will be marshalled automatically to their appropriate ADS types.
            </remarks>
            <param name="values">The values.</param>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumSymbolWrite failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.TryWrite(System.Object[],TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumSymbolWrite.WriteAsync(System.Object[],System.Threading.CancellationToken)"/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumCreateHandles">
            <summary>
            SumCommandBase for getting variable handles by a set of InstancePaths
            </summary>
            <example>
            <code language="C#" title="Usage of Sum commands with handles (CreateHandles, Read, Write, ReleaseHandles)" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYHANDLE"/>
            </example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePaths">The instance paths.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/></remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IList{System.String},TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePaths">The instance paths.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.#ctor(TwinCAT.Ads.IAdsConnection,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePaths">The instance paths.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/>.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.#ctor(TwinCAT.Ads.IAdsConnection,System.String[],TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="instancePaths">The instance paths.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateSumEntityInfos">
            <summary>
            Creates the sum entity infos.
            </summary>
            <returns>IList&lt;SumDataEntityInfo&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.TryCreateHandles(System.UInt32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to create the Handles.
            </summary>
            <param name="handles">The handles.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.TryCreateHandles(System.String[]@,System.UInt32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to create the variable handles.
            </summary>
            <param name="instancePaths">The symbol path specifiers.</param>
            <param name="handles">The handles.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandles"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandlesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.TryCreateHandles(TwinCAT.Ads.SumCommand.ISumHandleCollection@)">
            <summary>
            Tries to create the Handles.
            </summary>
            <param name="handles">The handles.</param>
            <returns>AdsErrorCode.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandles2Async(System.Threading.CancellationToken)">
            <summary>
            Create handles asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReadWriteRaw' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumHandles" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandles"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.TryCreateHandles(System.String[]@,System.UInt32[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Create handles asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReadWriteRaw' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumHandles" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandles"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.TryCreateHandles(System.String[]@,System.UInt32[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandles">
            <summary>
            Creates the ADS handles.
            </summary>
            <returns>System.UInt32[].</returns>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumGetHandles failed!</exception>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumGetHandlesCommand failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.TryCreateHandles(System.String[]@,System.UInt32[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumCreateHandles.CreateHandlesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumAddNotifications">
            <summary>
            SumCommandBase for registering Notifications (Not implemented in TwinCAT yet)
            </summary>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumAddNotifications._settings">
            <summary>
            Dictionary Handle --> Notification Length (Variable Symbol Byte Size)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[],System.Int32[],TwinCAT.Ads.NotificationSettings,System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="variableHandles">The variable handles.</param>
            <param name="lengths">The lengths.</param>
            <param name="settings">The settings.</param>
            <param name="stream">The stream.</param>
            <exception cref="T:System.ArgumentNullException">
            connection
            or
            variableHandles
            or
            lengths
            </exception>
            <exception cref="T:System.ArgumentException">Handles/lenghts mismatch!</exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[],System.Int32[],TwinCAT.Ads.NotificationSettings,System.IO.MemoryStream,TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="variableHandles">The variable handles.</param>
            <param name="lengths">The lengths.</param>
            <param name="settings">The settings.</param>
            <param name="stream">The stream.</param>
            <param name="errorStrategy">The error strategy.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <exception cref="T:System.ArgumentNullException">variableHandles</exception>
            <exception cref="T:System.ArgumentNullException">lengths</exception>
            <exception cref="T:System.ArgumentException">Handles/lenghts mismatch!</exception>
            <exception cref="T:System.ArgumentException">Notification Buffer/Stream is to small</exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.CreateSumEntityInfos">
            <summary>
            Creates the sum entity infos.
            </summary>
            <returns>IList&lt;SumDataEntityInfo&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.calcReadLength">
            <summary>
            Calculates the length of the read Stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.calcWriteLength">
            <summary>
            Calculates the length of the write stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.TryCreateHandles(System.UInt32[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to create the Handles.
            </summary>
            <param name="handles">The handles.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumAddNotifications.CreateHandlesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.TryCreateHandles(TwinCAT.Ads.SumCommand.ISumHandleCollection@)">
            <summary>
            Tries to create the Handles.
            </summary>
            <param name="handles">The handles.</param>
            <returns>AdsErrorCode.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumAddNotifications.CreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Create handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'CreateHandles' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumHandles" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <exclude/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumAddNotifications.TryCreateHandles(TwinCAT.Ads.SumCommand.ISumHandleCollection@)"/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumDeleteNotifications">
            <summary>
            SumCommandBase for Deleting Notifications (Not implemented in TwinCAT yet)
            </summary>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="notificationHandles">The notification handles.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/>.</remarks>
            <exception cref="T:System.ArgumentNullException">
            connection
            or
            variableHandles
            or
            lengths
            </exception>
            <exception cref="T:System.ArgumentException">Handles/lenghts mismatch!</exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[],TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="notificationHandles">The notification handles.</param>
            <param name="errorStrategy">The error strategy.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <exception cref="T:System.ArgumentNullException">notificationHandles</exception>
            <exception cref="T:System.ArgumentException">connection
            or
            variableHandles
            or
            lengths</exception>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.calcReadLength">
            <summary>
            Calculates the length of the read Stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.calcWriteLength">
            <summary>
            Calculates the length of the write stream.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.TryReleaseHandles(TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to Release the Handles
            </summary>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.ReleaseHandles"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.ReleaseHandlesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.ReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            release handles as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'CreateHandles' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumCommand" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.ReleaseHandles"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.TryReleaseHandles(TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDeleteNotifications.ReleaseHandles">
            <summary>
            Releases the handles.
            </summary>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumReleaseHandlesCommand failed!</exception>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumHandleEntry">
            <summary>
            Class SumHandleEntry.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumHandleEntry.handle">
            <summary>
            The handle
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleEntry.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumHandleEntry.errorCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleEntry.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleEntry.#ctor(System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleEntry"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumHandleInstancePathEntry">
            <summary>
            Class SumHandleEntry.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleInstancePathEntry.InstancePath">
            <summary>
            Gets the instance path.
            </summary>
            <value>The instance path.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleInstancePathEntry.#ctor(System.String,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleEntry"/> class.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="handle">The handle.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumNotificationHandleEntry">
            <summary>
            Class SumHandleEntry.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumNotificationHandleEntry.NotificationHandle">
            <summary>
            Gets the instance path.
            </summary>
            <value>The instance path.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumNotificationHandleEntry.#ctor(System.UInt32,System.UInt32,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleEntry" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="notificationHandle">The notification handle.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ISumHandleCollection">
            <summary>
            Interface ISumHandleCollection
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumHandleCollection.ValidHandles">
            <summary>
            Gets the valid handles (Handles that could be registered)
            </summary>
            <value>The valid handles.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumHandleCollection.SuccessCount">
            <summary>
            Counts the succeeded handle creations.
            </summary>
            <value>The success count.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumHandleCollection.FailCount">
            <summary>
            Counts the failed handle creations
            </summary>
            <value>The fail count.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumHandleCollection.SubErrors">
            <summary>
            Returns the AdsErrorcodes of the single handle creations.
            </summary>
            <value>The sub errors.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumHandleCollection.FirstSubError">
            <summary>
            Gets the first failed return code.
            </summary>
            <value>The first sub error.</value>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumHandleList">
            <summary>
            Class SumHandleList.
            </summary>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumHandleCollection" />
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleList.ValidHandles">
            <summary>
            Gets the valid handles (Handles that could be registered)
            </summary>
            <value>The valid handles.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleList.SuccessCount">
            <summary>
            Counts the succeeded handle creations.
            </summary>
            <value>The success count.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleList.FailCount">
            <summary>
            Counts the failed handle creations
            </summary>
            <value>The fail count.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleList.SubErrors">
            <summary>
            Returns the AdsErrorcodes of the single handle creations.
            </summary>
            <value>The sub errors.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumHandleList.FirstSubError">
            <summary>
            Gets the first failed return code.
            </summary>
            <value>The first sub error.</value>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumHandleRead">
            <summary>
            Read (primitive, Any) values by Handle SumCommandBase.
            </summary>
            <remarks>This is an ADS Sum Command to access values by handle information. It is always used in combination with <seealso cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles"/> and <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>.
            By design (and in contrast to the symbolic access in <see cref="T:TwinCAT.Ads.SumCommand.SumRead"/>, <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/>) this access method can act only with ADS ANY Type (Primitive) values (disadvantage).
            The Advantage is, that no symbolic information must be loaded before accessing the values, see samples:
            </remarks>
            <example>
            <code language="C#" title="Usage of Sum commands with handles (CreateHandles, Read, Write, ReleaseHandles)" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYHANDLE"/>
            </example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleRead.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IDictionary{System.UInt32,System.Type},System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/> class (Only for internal use).
            </summary>
            <param name="connection">The connection.</param>
            <param name="handleTypeDict">The handle type dictionary.</param>
            <param name="unicode">if set to <c>true</c> [unicode].</param>
            <param name="strlen">The strlen.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleRead.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="serverHandles">The server Handles</param>
            <param name="valueTypes">The value types (ANY/Primitive .NET types only)</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleRead.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[],System.Type[],System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="serverHandles">The handles.</param>
            <param name="valueTypes">The value types (ANY/Primitive .NET types only)</param>
            <param name="unicode">if set to <c>true</c> use unicode access.</param>
            <param name="strlen">Default (fixed) string len.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to read the values of the <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>.
            </summary>
            <param name="values">The values.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleRead.Read"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleRead.ReadAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleRead.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Read the values asynchronously.
            </summary>
            <param name="cancel">The cancellation token</param>
            <returns>An asynchronous task that represents the 'ReadSymbols' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleRead.Read"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleRead.Read">
            <summary>
            Reads the values.
            </summary>
            <returns>System.Object[].</returns>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumAnyReadByHandleCommand failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleRead.ReadAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumHandleWrite">
            <summary>
            Write any (primitive) values by Handle SumCommandBase.
            </summary>
            <remarks>This is an ADS Sum Command to access values by handle information. It is always used in combination with <seealso cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles"/> and <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>.
            By design (and in contrast to the symbolic access in <see cref="T:TwinCAT.Ads.SumCommand.SumRead"/>, <see cref="T:TwinCAT.Ads.SumCommand.SumSymbolWrite"/>) this access method can act only with ADS ANY Type (Primitive) values (disadvantage).
            The Advantage is, that no symbolic information must be loaded before accessing the values, see samples:
            </remarks>
            <example>
            <code language="C#" title="Usage of Sum commands with handles (CreateHandles, Read, Write, ReleaseHandles)" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYHANDLE"/>
            </example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleWrite.#ctor(TwinCAT.Ads.IAdsConnection,System.Collections.Generic.IDictionary{System.UInt32,System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="handleTypeDict">The handle type dictionary.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleWrite.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[],System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="serverHandles">The handles.</param>
            <param name="valueTypes">The value types (ANY/Primitive .NET types only)</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleWrite.TryWrite(System.Object[],TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to write the values.
            </summary>
            <param name="values">The values (ANY/Primitive types only).</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleWrite.Write(System.Object[])"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleWrite.WriteAsync(System.Object[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleWrite.WriteAsync(System.Object[],System.Threading.CancellationToken)">
            <summary>
            Write the values asynchronously.
            </summary>
            <param name="values">The values.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReadWriteRaw' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumCommand" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleWrite.Write(System.Object[])"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleWrite.TryWrite(System.Object[],TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumHandleWrite.Write(System.Object[])">
            <summary>
            Writes the values to the Symbols.
            </summary>
            <param name="values">The Values (Any primitive types only):</param>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumAnyWriteByHandleCommand failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleWrite.TryWrite(System.Object[],TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumHandleWrite.WriteAsync(System.Object[],System.Threading.CancellationToken)"/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumReleaseHandles">
            <summary>
            Release Handles SumCommandBase.
            </summary>
            <remarks>Releases the specified ADS handles. Usually used in conjunction with the <see cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles"/> and the <see cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/> / <see cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/> commands.
            </remarks>
            <example>
            <code language="C#" title="Usage of Sum commands with handles (CreateHandles, Read, Write, ReleaseHandles)" source="..\..\Samples\Sample.Ads.AdsClientCore\SumCommandSymbols.cs" region="CODE_SAMPLE_SUMCOMMANDBYHANDLE"/>
            </example>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumCreateHandles"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleRead"/>
            <seealso cref="T:TwinCAT.Ads.SumCommand.SumHandleWrite"/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumReleaseHandles._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumReleaseHandles._serverHandles">
            <summary>
            The handles to release.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="serverHandles">The handles.</param>
            <remarks>Uses the <see cref="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict"/>.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.#ctor(TwinCAT.Ads.IAdsConnection,System.UInt32[],TwinCAT.Ads.SumCommand.SumCommandErrorStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumReleaseHandles" /> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="serverHandles">The handles.</param>
            <param name="errorStrategy">The error strategy.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.CreateSumEntityInfos">
            <summary>
            Creates the sum entity infos.
            </summary>
            <returns>IList&lt;SumDataEntityInfo&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.TryReleaseHandles(TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Tries to Release the Handles
            </summary>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.ReleaseHandles"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.ReleaseHandlesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.ReleaseHandles">
            <summary>
            Releases the handles.
            </summary>
            <exception cref="T:TwinCAT.Ads.AdsSumCommandException">SumReleaseHandlesCommand failed!</exception>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.TryReleaseHandles(TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.ReleaseHandlesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumReleaseHandles.ReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Releases the handles asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReleaseHandles' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumCommand" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumDataEntity">
            <summary>
            Class SumDataEntityInfo.
            </summary>
            <remarks>The DataEntity describes a single data entity that is part of the Sum Command.</remarks>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumDataEntity.readLength">
            <summary>
            Entity read length
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumDataEntity.writeLength">
            <summary>
            Entity write length
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumDataEntity.ReadLength">
            <summary>
            Read length of the data entity in the context of the sum command
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.SumDataEntity.WriteLength">
            <summary>
            Gets the Write length of the data entity in the context of the sum command.
            </summary>
            <value>The length of the write.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDataEntity.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumDataEntity"/> class.
            </summary>
            <param name="readLength">Length of the read.</param>
            <param name="writeLength">Length of the write.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDataEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.SumDataEntity"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.SumDataEntity.SetWriteLength(System.Int32)">
            <summary>
            Sets the length of the write.
            </summary>
            <param name="length">The length.</param>
            <remarks>This is used in the case, when the size of the data is not known upfront (e.g. strings), that is only
            available during runtime.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.IgIoSumEntity">
            <summary>
            SumDataEntity with IndexGroup IndexOffset access.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.IgIoSumEntity.IndexGroup">
            <summary>
            The index group
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.IgIoSumEntity.IndexOffset">
            <summary>
            The index offset
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.IgIoSumEntity.#ctor(System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.IgIoSumEntity"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readLength">Length of the read.</param>
            <param name="writeLength">Length of the write.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.IgIoSumReadEntity">
            <summary>
            SumDataEntity IndexGroup IndexOffset Read access.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.IgIoSumReadEntity.#ctor(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.IgIoSumReadEntity"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readLength">Length of the read.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.IgIoSumWriteEntity">
            <summary>
            SumDataEntity IndexGroup IndexOffset Write access.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.IgIoSumWriteEntity.#ctor(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.IgIoSumWriteEntity"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeLength">Length of the write.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.NotificationHandleSumEntity">
            <summary>
            SumDataEntity Handle access
            </summary>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.HandleSumEntity">
            <summary>
            SumDataEntity Handle access
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.HandleSumEntity.Handle">
            <summary>
            The ADS handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.HandleSumEntity.Converter">
            <summary>
            The Primitive Type converter
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.HandleSumEntity.#ctor(System.UInt32,System.Int32,System.Int32,TwinCAT.TypeSystem.PrimitiveTypeMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.HandleSumEntity" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="readLength">Length of the read.</param>
            <param name="writeLength">Length of the write.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.HandleSumEntity.#ctor(System.UInt32,TwinCAT.TypeSystem.PrimitiveTypeMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.HandleSumEntity" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity">
            <summary>
            SumDataEntity Handle access (read by handle and Primitive/Any type)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity.TypeSpec">
            <summary>
            Primitive (Any) type that can be marshalled via <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity.#ctor(System.UInt32,System.Type,TwinCAT.TypeSystem.PrimitiveTypeMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="tp">The tp.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity.#ctor(System.UInt32,System.Int32,TwinCAT.TypeSystem.PrimitiveTypeMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="strLen">Length of the string.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity.#ctor(System.UInt32,System.Type,TwinCAT.TypeSystem.AnyTypeSpecifier,TwinCAT.TypeSystem.PrimitiveTypeMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.HandleSumReadAnyEntity"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="arrayType">Type of the array.</param>
            <param name="anyType">Any type.</param>
            <param name="converter">The converter.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.HandleSumWriteAnyEntity">
            <summary>
            SumDataEntity Handle access (write by handle and Primitive/Any type)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.HandleSumWriteAnyEntity.Type">
            <summary>
            Primitive (Any) type that can be marshalled via <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.HandleSumWriteAnyEntity.#ctor(System.UInt32,System.Type,TwinCAT.TypeSystem.PrimitiveTypeMarshaler)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.HandleSumWriteAnyEntity" /> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="tp">The tp.</param>
            <param name="converter">The converter.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.InstancePathSumReadEntity">
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.InstancePathSumWriteEntity">
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.InstancePathSumEntity">
            <summary>
            SumDataEntity InstancePath access (Read/Write by Instance Path)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.InstancePathSumEntity.InstancePath">
            <summary>
            The instance path
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.InstancePathSumEntity.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.InstancePathSumEntity" /> class.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="readLength">Length of the value data to read.</param>
            <param name="writeLength">Length of the value data to be written.</param>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.InstancePathSumEntity.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the WriteInformation into the data.
            </summary>
            <remarks>Here the Instance Path will be marshalled into the data stream.</remarks>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsSymbolServer">
            <summary>
            Client Side Symbol Server object
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbolServer" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.#ctor(TwinCAT.Ads.AdsSessionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolServer"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.OnCreateLoader">
            <summary>
            Creates the symbol loader
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.createLoader">
            <summary>
            Creates the loader.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbols asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultSymbols" /> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="P:TwinCAT.Ads.TypeSystem.AdsSymbolServer.Symbols" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.GetDataTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data types asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultDataTypes" /> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultDataTypes.DataTypes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="P:TwinCAT.Ads.TypeSystem.AdsSymbolServer.DataTypes" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.TryGetSymbols(TwinCAT.TypeSystem.ISymbolCollection{TwinCAT.TypeSystem.ISymbol}@)">
            <summary>
            Tries to geth the symbols from the device target.
            </summary>
            <param name="symbols">The symbols.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.TryGetDataTypes(TwinCAT.TypeSystem.IDataTypeCollection{TwinCAT.TypeSystem.IDataType}@)">
            <summary>
            Tries to get the symbols from the device target.
            </summary>
            <param name="dataTypes">The data types.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.ResetCachedSymbolicData">
            <summary>
            Resets the cached symbolic data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolServer.DataTypes">
            <summary>
            Gets the data types
            </summary>
            <remarks>
            This property reads the DataTypes synchronously, if the data is not available yet. For performance reasons, the asynchronous
            counterpart <see cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.GetDataTypesAsync(System.Threading.CancellationToken)"/> should be preferred for the first call.
            </remarks>
            <value>The data types.</value>
            <seealso cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.GetDataTypesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolServer.Symbols">
            <summary>
            Gets the symbols.
            </summary>
            <value>The symbols.</value>
            <remarks>This property reads the Symbol information synchronously, if the data is not available yet. For performance reasons, the asynchronous
            counterpart <see cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.GetSymbolsAsync(System.Threading.CancellationToken)" /> should be preferred for the first call.</remarks>
            <seealso cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolServer.GetSymbolsAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolServer.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.DimensionConverter">
            <summary>
            Class DimensionConverter.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DimensionConverter.ToAdsDataTypeArrayInfo(System.Collections.Generic.IList{TwinCAT.TypeSystem.IDimension})">
            <summary>
            Converts the <see cref="T:TwinCAT.TypeSystem.DimensionCollection"/> to <see cref="T:TwinCAT.Ads.AdsDataTypeArrayInfo"/> array.
            </summary>
            <returns>AdsDatatypeArrayInfo[] if is array, otherwise <c>NULL</c>.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsDataTypeStringParser">
            <summary>
            DataType String Parser class.
            </summary>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsSymbolParser">
            <summary>
            Class parsing Symbols from String or from AdsStream (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolParser.ParseSymbols(System.ReadOnlySpan{System.Byte},TwinCAT.TypeSystem.StringMarshaler,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Parses the symbolStream for Symbols (for internal use only)
            </summary>
            <param name="span">The buffer to read from..</param>
            <param name="marshaler">The marshaler.</param>
            <param name="factoryServices">The factory services.</param>
            <exception cref="T:System.ArgumentNullException">span</exception>
            <exception cref="T:System.ArgumentNullException">factoryServices</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolParser.ParseSymbol(System.ReadOnlySpan{System.Byte},TwinCAT.TypeSystem.StringMarshaler,TwinCAT.TypeSystem.ISymbolFactoryServices,TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Parses the symbol.
            </summary>
            <param name="span">The buffer to parse from.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="factoryServices">The factory services.</param>
            <param name="symbol">The symbol.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolParser.ParseSymbolAsync(System.ReadOnlySpan{System.Byte},TwinCAT.TypeSystem.StringMarshaler,TwinCAT.TypeSystem.ISymbolFactoryServices,System.Threading.CancellationToken)">
            <summary>
            Parses the symbol.
            </summary>
            <param name="span">The buffer to parse from.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="factoryServices">The factory services.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolParser.ParseTypes(System.ReadOnlySpan{System.Byte},TwinCAT.TypeSystem.StringMarshaler,TwinCAT.TypeSystem.ISymbolFactoryServices,System.Boolean,TwinCAT.TypeSystem.Generic.DataTypeCollection{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Parses the the data types within the specified stream (for internal use only)
            </summary>
            <param name="span">The buffer to parse from.</param>
            <param name="marshaler">The marshaler.</param>
            <param name="factoryServices">The factory services.</param>
            <param name="buildInTypesInStream">if set to <c>true</c> base types are contained in stream.</param>
            <param name="buildInTypes">The base types.</param>
            <returns>The number of parsed types.</returns>
            <exception cref="T:System.ArgumentNullException">marshaler</exception>
            <exception cref="T:System.ArgumentNullException">buildInTypes</exception>
            <exception cref="T:System.ArgumentNullException">factoryServices</exception>
            <exception cref="T:TwinCAT.AdsException">Enum base type mismatch!</exception>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AlignmentCalculator">
            <summary>
            Class calculating alignments.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AlignmentCalculator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AlignmentCalculator"/> class.
            </summary>
            <param name="packMode">The pack mode.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AlignmentCalculator.Pack1">
            <summary>
            Gets the Pack1 Alignment Calculator
            </summary>
            <value>The pack1.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AlignmentCalculator.GetNextOffset(TwinCAT.TypeSystem.IInstanceCollection{TwinCAT.TypeSystem.IMember})">
            <summary>
            Gets the next offset.
            </summary>
            <param name="instances">The instances.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SymbolFactory">
            <summary>
            Symbol factory (static objects) (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.SymbolFactory" /> class (for internal use only)
            </summary>
            <param name="nonCachedArrayElements">if set to <c>true</c> [non cached array elements].</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateArrayElement(TwinCAT.TypeSystem.IArrayType,System.Int32[],TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new Array Element Symbol.
            </summary>
            <param name="arrayType">Resolved array type.</param>
            <param name="currentIndex">Index of the current.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.createArrayElement(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Creates the array element.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">if set to <c>true</c> [oversample].</param>
            <param name="parent">The parent.</param>
            <param name="arrayType">Resolved array type.</param>
            <returns>ISymbol.</returns>
            <exception cref="T:System.ArgumentNullException">parent</exception>
            <exception cref="T:System.ArgumentNullException">arrType
            or
            parent</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.createArrayElement(System.Int32[],System.Boolean,TwinCAT.Ads.TypeSystem.ArrayType,TwinCAT.Ads.TypeSystem.DataType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates an Array element instance.
            </summary>
            <param name="currentIndex">Indices of the array element</param>
            <param name="oversample">Oversampling indicator.</param>
            <param name="arrType">Array type.</param>
            <param name="elementType">The element type.</param>
            <param name="parent">The parent instance (here the array instance)</param>
            <returns>Symbol.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.CreateOversamplingElement(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the oversampling array Element.
            </summary>
            <param name="parent">Array Instance.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateFieldInstance(TwinCAT.TypeSystem.IField,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new <see cref="T:TwinCAT.TypeSystem.IStructInstance" /> member
            </summary>
            <param name="field">The field.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
            <exception cref="T:System.ArgumentNullException">
            member
            or
            parent
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateStruct(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IStructType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the struct symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="structType">Type of the structure.</param>
            <param name="parent">The parent.</param>
            <returns>IStructInstance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateInterface(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IInterfaceType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the interface symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="interfaceType">Type of the structure.</param>
            <param name="parent">The parent.</param>
            <returns>IStructInstance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateUnion(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IUnionType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the union symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="unionType">Type of the union.</param>
            <param name="parent">The parent.</param>
            <returns>IUnionInstance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateArrayInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating an ArrayInstance
            </summary>
            <param name="entry">The symbol INfo.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <returns>IArrayInstance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateAlias(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IAliasType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the alias symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="aliasType">The Alias type.</param>
            <param name="parent">The parent.</param>
            <returns>IStructInstance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreatePointerInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Called when [create pointer instance].
            </summary>
            <param name="entry">The entry.</param>
            <param name="pointerType">Type of the pointer.</param>
            <param name="parent">The parent.</param>
            <returns>IPointerInstance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateReferenceInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IReferenceType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a ReferenceInstance symbol.
            </summary>
            <param name="entry">The entry.</param>
            <param name="referenceType">Type of the reference.</param>
            <param name="parent">The parent.</param>
            <returns>IReferenceInstance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateString(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IStringType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a String Type
            </summary>
            <param name="entry">The entry.</param>
            <param name="stringType">The string dataType.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreatePrimitive(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a Primitive Symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="dataType">Type of the data.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateReference(TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new Reference Instance.
            </summary>
            <param name="pointerType">The type.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            parent
            </exception>
            <exception cref="T:System.ArgumentNullException">type
            or
            parent</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolFactory.OnCreateVirtualStruct(System.String,System.String,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new Virtual Struct
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsNotificationCache">
            <summary>
            Class caches the currently registered Notification handlers.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsNotificationCache.NotificationSymbolInfo">
            <summary>
            Notification info object
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsNotificationCache.NotificationSymbolInfo.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsNotificationCache.NotificationSymbolInfo.NotificationType">
            <summary>
            Notification type
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsNotificationCache.NotificationSymbolInfo.Handle">
            <summary>
            Notification handle
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsNotificationCache.NotificationSymbolInfo.Settings">
            <summary>
            Notification settings
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.NotificationSymbolInfo.#ctor(TwinCAT.TypeSystem.ISymbol,System.UInt32,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsNotificationCache.NotificationSymbolInfo"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="handle">The handle.</param>
            <param name="notificationType">Type of the notification.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsNotificationCache._sync">
            <summary>
            Sync object
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsNotificationCache._notificationHandleDict">
            <summary>
            Notification Handle --> Symbol
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsNotificationCache._notificationSymbolDict">
            <summary>
            Symbol --> Notification Handle
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsNotificationCache"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.GetLargestSymbolSize">
            <summary>
            Gets the largest symbol size in bytes that is inside this <see cref="T:TwinCAT.Ads.TypeSystem.AdsNotificationCache"/>
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.GetNotificationType(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Gets the type of the notification.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>SymbolNotificationType.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.Update(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Updates the specified symbol notification.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">The type.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentException">Symbol is not registered for Notifications!</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.Add(TwinCAT.TypeSystem.ISymbol,System.UInt32,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Adds the specified symbol notification
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="handle">The handle.</param>
            <param name="notificationType">Type of the notification.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentException">Symbol already registered!</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.Remove(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes)">
            <summary>
            Removes the specified symbol notification.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="notificationType">Type of the notification.</param>
            <returns><c>true</c> if removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.Remove(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Removes all Symbol notifications for the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.TryGetNotificationHandle(TwinCAT.TypeSystem.ISymbol,System.UInt32@)">
            <summary>
            Tries to get the notification handle.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="handle">The handle.</param>
            <returns><c>true</c> if the handle is returned, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.TryGetRegisteredNotificationSettings(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.NotificationSettings@)">
            <summary>
            Tries to get the notification settings.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="settings">The settings.</param>
            <returns><c>true</c> if the symbol has registered <see cref="T:TwinCAT.Ads.NotificationSettings"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsNotificationCache.Contains(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Determines whether this <see cref="T:TwinCAT.Ads.TypeSystem.AdsNotificationCache"/> has a registered notification for the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if [contains] [the specified symbol]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory">
            <summary>
            The class <see cref="T:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory"/> is used to create a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader"/> initialized to the parametrized mode (SymbolBrowser V2, new Version)
            </summary>
            <remarks>The Symbol Loader (V2) supports the following <see cref="T:TwinCAT.SymbolsLoadMode">modes</see>.
            <list type="Table"><listheader><term></term><description></description></listheader><item><term><see cref="F:TwinCAT.SymbolsLoadMode.Flat" /></term><description>The flat mode organizes the Symbols in a flat list. This mode is available in all .NET versions.
            </description></item><item><term><see cref="F:TwinCAT.SymbolsLoadMode.VirtualTree" /></term><description>The virtual tree mode organizes the Symbols hierarchically with parent-child relationships. This mode is available in all .NET Versions.
            </description></item><item><term><see cref="F:TwinCAT.SymbolsLoadMode.DynamicTree" /></term><description>The Dynamic tree mode organizes the Symbols hierarchically and (dynamically) creates struct members,
            array elements and enum fields on the fly. This feature is only available on platforms that support the Dynamic
            Language Runtime (DLR), actually all .NET Framework Version larger than 4.0.
            </description></item></list>
            Virtual instances means, that all Symbols are ordered within a tree structure. For that symbol nodes that are not located on a fixed address, a Virtual Symbol will be created.
            Setting the virtualInstance parameter to 'false' means, that the located symbols will be returned in a flattened list.</remarks>
            <seealso cref="T:TwinCAT.SymbolLoaderSettings"/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory.Create(TwinCAT.IConnection,TwinCAT.ISymbolLoaderSettings)">
            <summary>
            Creates the specified connection.
            </summary>
            <param name="connection">The connection.</param>
            <param name="settings">The settings.</param>
            <returns>ISymbolLoader.</returns>
            <example>
            The following sample shows how to create a dynamic version of the SymbolLoader V2. The dynamic symbol loader makes use of the Dynamic Language Runtime (DLR) of the .NET Framework.
            That means Structures, Arrays and Enumeration types and instances are generated 'on-the-fly' during symbol Browsing. These created dynamic objects are a one to one representation
            of the Symbol Server target objects (e.g the IEC61131 types on the PLC).
            Dynamic language features are only available from .NET4 upwards.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE" />
            The following sample shows how to create a static (non dynamic) version of the SymbolLoader V2.
            The static symbol loader in version 2 is a nearly code compatible version of the Dynamic Loader, only the dynamic creation of objects is not available. The reason for supporting
            this mode is that .NET Framework Versions lower than Version 4.0 (CLR2) doesn't support the Dynamic Language Runtime (DLR).
            The SymbolLoader V2 static object is supported from .NET 2.0 on.
            <code language="C#" title="Virtual Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE" /></example>
            <example>
            The SymbolLoader V2 static object is supported from .NET 2.0 on.
            <code language="C#" title="Flat Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2Flat.cs" region="CODE_SAMPLE" /></example>
            <example>
              <code language="C#" title="Argument Parser" source="..\..\Samples\Sample.Ads.AdsClientCore\ArgParser.cs" region="CODE_SAMPLE" />
              <code language="C#" title="Dumping Symbols" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolDump.cs" region="CODE_SAMPLE" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory.createValueAccessor(TwinCAT.Ads.IAdsConnection,TwinCAT.SymbolLoaderSettings)">
            <summary>
            Gets the value accessor.
            </summary>
            <returns>IRawValueAccessor.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory.TryReadSymbolUploadInfo(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.Internal.SymbolUploadInfo@)">
            <summary>
            Reads the symbol upload information.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory.readSymbolUploadInfoAsync(TwinCAT.Ads.IAdsConnection,System.Threading.CancellationToken)">
            <summary>
            Reads the symbol upload information.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsSymbolProvider">
            <summary>
            The class <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader"/> is responsible for downloading the list of declared variables from an ADS Server.
            </summary>
            <seealso cref="T:TwinCAT.SymbolLoaderSettings"/>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader" />
            <seealso cref="T:TwinCAT.TypeSystem.IInternalSymbolProvider" />
            <seealso cref="T:System.IDisposable" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.DEFAULT_TIMEOUT">
            <summary>
            The default timeout
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._timeout">
            <summary>
            The timeout
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Timeout">
            <summary>
            Gets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.#ctor(TwinCAT.Ads.IAdsConnection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolProvider"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.#ctor(TwinCAT.Ads.IAdsConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolProvider"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <exception cref="T:System.ArgumentException">No connection address! - connection</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.ValueAccess.IAccessorRawValue,TwinCAT.ISession,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader" /> class.
            </summary>
            <param name="connection">The Connection.</param>
            <param name="accessor">The accessor.</param>
            <param name="session">The session.</param>
            <param name="rootNamespace">The root namespace.</param>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <exception cref="T:System.ArgumentNullException">accessor</exception>
            <exception cref="T:System.ArgumentNullException">accessor</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Init">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.RegisterBuildInTypes">
            <summary>
            Registers the build in types.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Binder">
            <summary>
            Gets the binder.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Accessor">
            <summary>
            Gets the accessor.
            </summary>
            <value>The accessor.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.SymbolFactory">
            <summary>
            Gets the symbol factory.
            </summary>
            <value>The symbol factory.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._symbolFactoryServices">
            <summary>
            The symbol factor services
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.FactoryServices">
            <summary>
            Gets/Sets the SymbolFactoryServices.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._namespaces">
            <summary>
            Namespaces
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.InternalNamespaces">
            <summary>
            Namespaces
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._symbolUploadInfo">
            <summary>
            Upload info.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.SymbolUploadInfo">
            <summary>
            Upload info.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.UploadInfo">
            <summary>
            Gets the Upload Info object
            </summary>
            <value>The information.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.TryReadUploadInfo(TwinCAT.Ads.Internal.SymbolUploadInfo@)">
            <summary>
            Get the <see cref="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.SymbolUploadInfo"/> from the target system.
            </summary>
            <param name="info">The UploadSymbol information.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.ReadUploadInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the Upload Info object
            </summary>
            <value>The information.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Reset">
            <summary>
            Resets the cache-contents of this loader.
            </summary>
            <remarks>Accessing the data members will force AdsReads in the following.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.DataTypeCount">
            <summary>
            Gets the amount of data types used in the target.
            </summary>
            <value>The data type count.</value>
            <remarks>This poperty can be used, before uploading all data types and symbols.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.SymbolCount">
            <summary>
            Gets the amount of symbols used by the target.
            </summary>
            <value>The symbol count.</value>
            <remarks>This poperty can be used, before uploading all data types and symbols.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.MaxDynamicSymbolCount">
            <summary>
            Gets the maximal amount of Dynamic symbols of the target system.
            </summary>
            <value>The max dynamic symbols.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.UsedDynamicSymbolCount">
            <summary>
            Gets the used dynamic symbols by the target system.
            </summary>
            <value>The used dynamic symbols.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.loadUploadInfoAsync(TwinCAT.Ads.IAdsConnection,System.Threading.CancellationToken)">
            <summary>
            Load upload info asynchronously.
            </summary>
            <param name="connection">The connection.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultValue&lt;SymbolUploadInfo&gt;&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">client</exception>
            <exception cref="T:System.ArgumentNullException">client</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.loadUploadInfoSync(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.Internal.SymbolUploadInfo@)">
            <summary>
            Load upload info synchronously.
            </summary>
            <param name="connection">The connection.</param>
            <param name="ret">The ret.</param>
            <returns>Task&lt;ResultValue&lt;SymbolUploadInfo&gt;&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">client</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.CreateBuildInTypes">
            <summary>
            Creates the build in types.
            </summary>
            <returns>DataTypeCollection&lt;IDataType&gt;.</returns>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._buildInTypes">
            <summary>
            Contains the Build-In types if types are loaded, null if not.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.InternalBuildInTypes">
            <summary>
            Contains the Build-In types if types are loaded, null if not.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.SetBuildInTypes(TwinCAT.TypeSystem.Generic.DataTypeCollection{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Sets the build in types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.BuildInTypes">
            <summary>
            Gets the build in types.
            </summary>
            <value>The build in types.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.alignBaseTypes(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Aligns the base types.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.ImageBaseAddress">
            <summary>
            Gets the base Address of the accessed Process image.
            </summary>
            <value>The image base address.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._rootNamespace">
            <summary>
            The root namespace
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.RootNamespaceName">
            <summary>
            Gets the root namespace name of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader"/>.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.syncObject">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolProvider._symbols">
            <summary>
            The symbols
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.InternalSymbols">
            <summary>
            The symbols
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.SetSymbols(TwinCAT.TypeSystem.Generic.SymbolCollection{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Sets the symbols.
            </summary>
            <param name="symbols">The symbols.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.TryGetSymbols(TwinCAT.TypeSystem.ISymbolCollection{TwinCAT.TypeSystem.ISymbol}@)">
            <summary>
            Tries to geth the symbols from the device target.
            </summary>
            <param name="symbols">The symbols.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.TryGetDataTypes(TwinCAT.TypeSystem.IDataTypeCollection{TwinCAT.TypeSystem.IDataType}@)">
            <summary>
            Tries to get the symbols from the device target.
            </summary>
            <param name="dataTypes">The data types.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Symbols">
            <summary>
            Gets the symbols.
            </summary>
            <value>The symbols.</value>
            <remarks>This property reads the Symbol information synchronously, if the data is not available yet. For performance reasons, the asynchronous
            counterpart <see cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.GetSymbolsAsync(System.Threading.CancellationToken)" /> should be preferred for the first call.</remarks>
            <seealso cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.GetSymbolsAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.TryReadTypesSymbols">
            <summary>
            Loads the data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.TwinCAT#TypeSystem#IInternalSymbolProvider#SymbolsInternal">
            <summary>
            Gets the (root) symbols of the Symbol provider.
            </summary>
            <value>Read only collection of the Symbols</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Namespaces">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly collection of the namespaces.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.TryReadTypes(System.TimeSpan)">
            <summary>
            Reads the data types from the target
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.TwinCAT#TypeSystem#IInternalSymbolProvider#NamespacesInternal">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly collection of the namespaces.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.RootNamespace">
            <summary>
            Gets the root (main) namespace of the Symbol provider.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.DataTypes">
            <summary>
            Gets the data types
            </summary>
            <remarks>
            This property reads the DataTypes synchronously, if the data is not available yet. For performance reasons, the asynchronous
            counterpart <see cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.GetDataTypesAsync(System.Threading.CancellationToken)"/> should be preferred for the first call.
            </remarks>
            <value>The data types.</value>
            <seealso cref="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.GetDataTypesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Provider">
            <summary>
            Gets the Symbol Provider
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.SetPlatformPointerSize(System.Int32)">
            <summary>
            Sets the size of the platform pointer.
            </summary>
            <param name="sz">The sz.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbols asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultSymbols" /> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="P:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.Symbols" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.GetDataTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data types asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultDataTypes&gt;.</returns>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolServer.DataTypes" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolProvider.ResetCachedSymbolicData">
            <summary>
            Resets the cached symbolic data.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader">
            <summary>
            The class <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader"/> is responsible for downloading the list of declared variables from an ADS Server.
            </summary>
            <seealso cref="T:TwinCAT.SymbolLoaderSettings"/>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader" />
            <seealso cref="T:TwinCAT.TypeSystem.IInternalSymbolProvider" />
            <seealso cref="T:System.IDisposable" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.SymbolLoaderSettings,TwinCAT.ValueAccess.IAccessorRawValue,TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader" /> class.
            </summary>
            <param name="connection">The Connection.</param>
            <param name="settings">The settings.</param>
            <param name="accessor">The accessor.</param>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException">settings
            or
            accessor
            or
            symbolsInfo</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolLoader._disposed">
            <summary>
            Disposed flag
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolLoader._settings">
            <summary>
            The Loader settings
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.Settings">
            <summary>
            Gets actual the Symbol loader settings
            </summary>
            <value>The access method.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.tryReadSymbols(System.TimeSpan)">
            <summary>
            Loads the symbols.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.readTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Read types as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultAds&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.TryReadTypes(System.TimeSpan)">
            <summary>
            Loads the data types (synchronously)
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.expandDataTypes">
            <summary>
            Expands the so far unresolved datatypes.
            </summary>
            <remarks>Some datatypes must be generated, because they are not available from the Watch server.
            This must be done, before the DataTypes collection is accessed, because otherwise the collection can be changed
            during enumeration
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbols asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultSymbols" /> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.GetDynamicSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbols asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultDynamicSymbols"/> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.GetDataTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data types asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultDataTypes" /> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultDataTypes.DataTypes" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolServer.DataTypes" />
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.UseVirtualInstances">
            <summary>
            Indicates that Virtual (created StructInstances) are used.
            </summary>
            <value>The use virtual instances.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.SymbolsDynamic">
            <summary>
            Gets the dynamic Symbols
            </summary>
            <value>The dynamic symbols (when activated)</value>
            <remarks>
            The Dynamic Symbols can only be returned if the <see cref="F:TwinCAT.SymbolsLoadMode.DynamicTree"/> is active.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.AdsSymbolLoader._isLoading">
            <summary>
            Indicates that DataTypes/Symbols are loaded actually
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.TryReadTypesSymbols">
            <summary>
            Loads the data types and symbols into the <see cref="T:TwinCAT.Ads.TypeSystem.AdsSymbolLoader"/>
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.DefaultNotificationSettings">
            <summary>
            Gets or sets the NotificationSettings that are used for Notification Defaults.
            </summary>
            <value>The default notification settings.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.PlatformPointerSize">
            <summary>
            Gets the (byte) size of Pointers on the attached platform system.
            </summary>
            <value>The size of the platform pointer.</value>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.TypesGenerated">
            <summary>
            Occurs when new types are generated internally
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.AdsSymbolLoader.TypeResolveError">
            <summary>
            Occurs when a typename cannot be resolved.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Symbol">
            <summary>
            Symbol class
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.Instance" />
            <seealso cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            <seealso cref="T:TwinCAT.TypeSystem.IValueAnySymbol" />
            <seealso cref="T:TwinCAT.TypeSystem.IValueAccessorProvider" />
            <seealso cref="T:TwinCAT.TypeSystem.ISymbolFactoryServicesProvider" />
            <seealso cref="T:TwinCAT.TypeSystem.IHierarchicalSymbol" />
            <seealso cref="T:TwinCAT.TypeSystem.ISymbolValueChangeNotify" />
            <seealso cref="T:TwinCAT.Ads.TypeSystem.IContextMaskProvider" />
            <seealso cref="T:TwinCAT.TypeSystem.IInstanceInternal" />
            <seealso cref="T:TwinCAT.TypeSystem.ISymbolInternal" />
            <seealso cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbol" />
            <remarks>A Symbol is a (named) memory object within the Process Image with a fixed address indicated by Index Group and Index Offset.
            Symbols can optionally be addressed by instance path and are bound to a specific <see cref="T:TwinCAT.Ads.TypeSystem.DataType" />.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
            <exception cref="T:System.ArgumentNullException">
            entry
            or
            factoryServices
            </exception>
            <exception cref="T:System.ArgumentNullException">entry
            or
            resolver
            or
            factoryServices</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> is bound.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnSetInstanceName(System.String)">
            <summary>
            Sets a new InstanceName InstancePath
            </summary>
            <param name="instanceName">Instance name.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.ISymbol,System.Int32,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
            <param name="factoryServices">The factory services.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
            <exception cref="T:System.ArgumentNullException">factoryServices</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">instanceName</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.String,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.String,System.String,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol"/> class which represents an instance of <see cref="T:TwinCAT.Ads.TypeSystem.Member"/>
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.getSymbolFlags(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.TypeSystem.Field)">
            <summary>
            Gets the symbol flags.
            </summary>
            <param name="structParent">The structure parent.</param>
            <param name="subSymbol">The sub symbol.</param>
            <returns>AdsSymbolFlags.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.getSymbolFlags(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.TypeSystem.DataType)">
            <summary>
            Gets the symbol flags.
            </summary>
            <param name="arrayParent">The array parent.</param>
            <param name="elementType">Type of the element.</param>
            <returns>AdsSymbolFlags.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" /> class.
            </summary>
            <param name="indices">The indices.</param>
            <param name="oversampleElement">Indicates, that is Symbol is the virtual oversampling element.</param>
            <param name="parent">The parent (Can be IArrayInstance or IAliasInstance)</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.Equals(TwinCAT.Ads.TypeSystem.Symbol)">
            <summary>
            Equalses the specified inst.
            </summary>
            <param name="inst">The inst.</param>
            <returns><c>true</c> if the Symbols are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.Equals(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Equalses the specified inst.
            </summary>
            <param name="inst">The inst.</param>
            <returns><c>true</c> if the Symbols are Equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.op_Equality(TwinCAT.Ads.TypeSystem.Symbol,TwinCAT.Ads.TypeSystem.Symbol)">
            <summary>
            Operator==
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.op_Inequality(TwinCAT.Ads.TypeSystem.Symbol,TwinCAT.Ads.TypeSystem.Symbol)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.factoryServices">
            <summary>
            The Symbol Factory Services
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.FactoryServices">
            <summary>
            Gets the factory services.
            </summary>
            <value>The factory services.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.Connection">
            <summary>
            Gets the connection that produces values for this <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>
            </summary>
            <value>The connection object.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.calcAccess(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.TypeSystem.Member,System.UInt32@,System.UInt32@)">
            <summary>
            Calculates the access.
            </summary>
            <param name="parent">The parent.</param>
            <param name="member">The member.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.calcBitAccess(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.TypeSystem.Member,System.UInt32@,System.UInt32@)">
            <summary>
            (Re)Calculates the IndexGroup and Index Offset from Byte/Access To BitAccess or for TCom Pid masking
            </summary>
            <param name="parent">The parent Symbol</param>
            <param name="member">The member.</param>
            <param name="indexGroup">The index group result</param>
            <param name="indexOffset">The index offset result</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol._notificationSettings">
            <summary>
            Notification Settings
            </summary>
            <value>The notification settings.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.NotificationSettings">
            <summary>
            Gets or sets the notification settings.
            </summary>
            <value>The notification settings.</value>
            <remarks>The <see cref="P:TwinCAT.Ads.TypeSystem.Symbol.NotificationSettings"/> will be inherited from <see cref="P:TwinCAT.Ads.TypeSystem.Symbol.Parent"/> if the setting is not overwritten.
            If the Root Symbol also doesn't contain the settings, then the <see cref="P:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader.DefaultNotificationSettings"/> will be returned.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.parent">
            <summary>
            The parent Symbol
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.Parent">
            <summary>
            Gets the parent Symbol
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.SetParent(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Sets the parent symbol.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.indexGroup">
            <summary>
            The index group
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IndexGroup">
            <summary>
            Gets the index group of the Symbol
            </summary>
            <value>
            The index group.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.indexOffset">
            <summary>
            The index offset
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IndexOffset">
            <summary>
            Gets the index offset of the Symbol
            </summary>
            <value>
            The index offset.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.instancePath">
            <summary>
            The instance path
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.InstancePath">
            <summary>
            Gets the relative / absolute access path to the instance (with periods (.))
            </summary>
            <value>
            The instance path.
            </value>
            <remarks>
            If this path is relative or absolute depends on the context. <see cref="T:TwinCAT.TypeSystem.IMember" /> are using relative paths, <see cref="T:TwinCAT.TypeSystem.ISymbol" />s are using absolute ones.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.imageBaseAddress">
            <summary>
            The image base address
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.ImageBaseAddress">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress" /> of the Process Image
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.subSymbols">
            <summary>
            Weak reference to SubSymbols
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols collection.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.SubSymbols">
            <summary>
            Gets the SubSymbols of the <see cref="T:TwinCAT.TypeSystem.ISymbol" />
            </summary>
            <remarks>
            Used for Array, Struct, Pointer and Reference instances. Otherwise empty
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.SubSymbolsInternal">
            <summary>
            Gets the SubSymbols Collection (internal variant)
            </summary>
            <value>The sub symbols internal.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnGetSubSymbols">
            <summary>
            Handler function getting the SubSymbols
            </summary>
            <returns>ISymbolCollection.</returns>
            <remarks>
            The default case is, that the SubSymbols are cached via WeakReferences
            </remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.SubSymbolCount">
            <summary>
            Gets the number of SubSymbols
            </summary>
            <value>The Number of SubSymbols.</value>
            <remarks>If the <see cref="P:TwinCAT.Ads.TypeSystem.Symbol.SubSymbols"/> collection is not generated yet (WeakReference),
            then this method is less memory and cpu consuming to use for just determining the
            the number of child symbols (instead of using SubSymbols.Count)/></remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnGetSubSymbolCount">
            <summary>
            Handler function determining the SubSymbolCode (optimized)
            </summary>
            <returns>System.Int32.</returns>
            <remarks>If the SubSymbols WeakReference is avaliable, we take that one for determining the Count as optimization.
            </remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.SubSymbolsCreated">
            <summary>
            Gets a value indicating whether [sub symbols created].
            </summary>
            <value><c>true</c> if [sub symbols created]; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.CreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols.
            </summary>
            <param name="parent">The parent.</param>
            <returns>SymbolCollection.</returns>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IsDereferencedReference">
            <summary>
            Gets or sets a value indicating whether an ancestor is a dereferenced Reference
            </summary>
            <value><c>true</c> if this instance is ancestor is reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IsDereferencedPointer">
            <summary>
            Gets or sets a value indicating whether an ancestor is a dereferenced Pointer
            </summary>
            <value><c>true</c> if this instance is ancestor is pointer; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadRawValue">
            <summary>
            Reads the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadRawValue(System.Int32)">
            <summary>
            Reads the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadRawValueAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write) asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteRawValue(System.Byte[])">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
            <value>The value.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteRawValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteRawValue(System.Byte[],System.Int32)">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The raw value.</param>
            <param name="timeout">The timeout.</param>
            <value>The raw value.</value>
            <remarks>A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnWriteRawValue(System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Handler function for writing the RawValue
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnWriteRawValueAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Handler function Writing the raw value asynchronously.
            </summary>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWriteAccess&gt;.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnReadRawValue(System.Int32)">
            <summary>
            Handler function for reading the raw value
            </summary>
            <returns>System.Byte[].</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException"></exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnReadRawValueAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function for reading the raw value
            </summary>
            <returns>System.Byte[].</returns>
            <exception cref="T:TwinCAT.Ads.AdsErrorException"></exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol._rawValueChanged">
            <summary>
            RawValueChanged delegate
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.syncObject">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.Symbol.RawValueChanged">
            <summary>
            Occurs when the RawValue of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> has changed.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol._valueChanged">
            <summary>
            ValueChanged delegate.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.TypeSystem.Symbol.ValueChanged">
            <summary>
            Occurs when the (Primitive) value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> has changed.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Symbol.accessRights">
            <summary>
            The access rights
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.AccessRights">
            <summary>
            Gets the access rights.
            </summary>
            <value>The access rights.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadValue">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <returns>System.Object.</returns>
            <value>The value.</value>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadValue(System.Int32)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <returns>System.Object.</returns>
            <value>The value.</value>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.
            A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadValueAsResult">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> as result object.
            </summary>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" /> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value" /> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" />.</returns>
            <exclude />
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteValueAsResult(System.Object)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> and returns an result object.
            </summary>
            <param name="value">The value.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" />.</returns>
            <exclude />
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.TryReadValue(System.Int32,System.Object@)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <param name="value">The read value.</param>
            <returns>The error Code..</returns>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.
            A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadValueAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteValue(System.Object)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.TryWriteValue(System.Object,System.Int32)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout in ms.</param>
            <returns>The error code.</returns>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also. A negative timeout indicates that the Default
            Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteValue(System.Object,System.Int32)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout in ms.</param>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also. A negative timeout indicates that the Default
            Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnWriteValue(System.Object,System.Int32)">
            <summary>
            Handler function for writing the dynamic value
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnTryWriteValue(System.Object,System.Int32)">
            <summary>
            Handler function for writing the dynamic value
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnWriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Handler function for writing the dynamic value
            </summary>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token..</param>
            <returns>Task&lt;ResultWriteAccess&gt;.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.EnsureRights(TwinCAT.TypeSystem.SymbolAccessRights)">
            <summary>
            Ensures that the AccessRights are matched.
            </summary>
            <param name="requested">The requested rights.</param>
            <exception cref="T:TwinCAT.TypeSystem.InsufficientAccessRightsException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnReadValue(System.Int32)">
            <summary>
            Handler function for reading the dynamic value.
            </summary>
            <returns>The Value</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnReadValueAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function for reading the dynamic value.
            </summary>
            <returns>The Value</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnTryReadValue(System.Int32,System.Object@)">
            <summary>
            Handler function for reading the dynamic value.
            </summary>
            <returns>The Value</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadAnyValue(System.Type)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into a new created instance of the managed type
            </summary>
            <param name="managedType">The tp.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)"/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadAnyValue``1">
            <summary>
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueAnySymbol">Value</see> into a new created instance of the managed type
            </summary>
            </summary>
            <typeparam name="T">Type of the Value to be read.</typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadAnyValue(System.Type,System.Int32)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into a new created instance of the managed type
            </summary>
            <param name="managedType">The tp.</param>
            <param name="timeout">The timeout in ms.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadAnyValue``1(System.Int32)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into a new created instance of the managed type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="timeout">The timeout in ms.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadAnyValueAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the (AnyType) value asynchronously.
            </summary>
            <param name="managedType">Managed type of the value to read.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task object that is representing the asynchronous 'ReadAnyValue' operation. The result will be returned in a <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/>, which
            contains the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.ReadAnyValueAsync``1(System.Threading.CancellationToken)">
            <summary>
            Read any value as an asynchronous operation.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cancel">The cancellation token.</param>
            <returns>A Task&lt;ResultReadValueAccess`1&gt; representing the asynchronous operation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnReadAnyValue(System.Type,System.Int32)">
            <summary>
            Handler function 'ReadAnyValue'
            </summary>
            <param name="managedType">Type of the managed.</param>
            <param name="timeout">The timeout.</param>
            <returns>System.Object.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.ValueAccess.ValueAccessorException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnReadAnyValueAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            Asynchronous handler function for 'ReadAnyValue'.
            </summary>
            <param name="managedType">Type of the managed.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultReadValueAccess&gt;.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.ValueAccess.ValueAccessorException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.UpdateAnyValue(System.Object@)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into the specified managed value.
            </summary>
            <param name="managedObject">The managed object.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)"/>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)"/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.UpdateAnyValue(System.Object@,System.Int32)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into the specified managed value.
            </summary>
            <param name="managedObject">The managed object.</param>
            <param name="timeout">The timeout.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnUpdateAnyValue(System.Object,System.Int32)">
            <summary>
            Handler function for 'UpdateAnyValue'
            </summary>
            <param name="managedObject">The managed object.</param>
            <param name="timeout">The timeout.</param>
            <returns>System.Object.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.ValueAccess.ValueAccessorException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteAnyValue(System.Object)">
            <summary>
            Writes the value represented by the managed value to this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see>
            </summary>
            <param name="managedValue">The managed value.</param>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)"/>.
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)"/>.
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.WriteAnyValue(System.Object,System.Int32)">
            <summary>
            Writes the value represented by the managed value to this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see>
            </summary>
            <param name="managedValue">The managed value.</param>
            <param name="timeout">The timeout in ms.</param>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)" />.
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)" />.
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.OnWriteAnyValue(System.Object,System.Int32)">
            <summary>
            Handler function for 'WriteAnyValue'
            </summary>
            <param name="managedValue">The managed value.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.ValueAccess.ValueAccessorException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value>
                <c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IsContainerType">
            <summary>
            Gets a value indicating whether the Symbols datatype is a Container type.
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category" />
            <remarks>Container Types are all types that contain SubElements like
            <list type="bullet"><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Array" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Union" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Struct" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Function" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Program" /></description></item></list>
            and the <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Alias" /> and <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Reference" /> types, if they have a container type as base type.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IsRecursive">
            <summary>
            Gets a value indicating whether this instance is recursive.
            </summary>
            <value><c>true</c> if this instance is recursive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.ValueEncoding">
            <summary>
            Gets the value encoding.
            </summary>
            <value>The value encoding.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Symbol.IsVirtual">
            <summary>
            Gets a value indicating whether this instance is virtual.
            </summary>
            <value><c>true</c> if this instance is virtual; otherwise, <c>false</c>.</value>
            <remarks>Virtual symbols are are only organizational elements within the Symbols Hierarchy and cannot
            be accessed seperately by IndexGroup/IndexOffset, Value Read/Writes, notifications or handles.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.getParentList">
            <summary>
            Gets the parent list.
            </summary>
            <returns>List&lt;ISymbol&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.TwinCAT#TypeSystem#ISymbolValueChangeNotify#OnRawValueChanged(TwinCAT.TypeSystem.RawValueChangedEventArgs)">
            <summary>
            Called when the RawValue has been changed (firing RawValueChanged event).
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.TwinCAT#TypeSystem#ISymbolValueChangeNotify#OnValueChanged(TwinCAT.TypeSystem.ValueChangedEventArgs)">
            <summary>
            Called when the Value has been changed (firing ValueChanged event).
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Symbol.Unwrap(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Gets the Unwrapped Symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>The unwrapped symbol if dynamically wrapped, the original symbol otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.VirtualStructInstance">
            <summary>
            Class VirtualStructInstance.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.VirtualStructInstance.#ctor(System.String,System.String,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.VirtualStructInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="parent">The parent.</param>
            <param name="services">The services.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.VirtualStructInstance.#ctor(System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.VirtualStructInstance" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="services">The services.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.VirtualStructInstance._virtualMembers">
            <summary>
            Virtual members (used as SubSymbols)
            </summary>
            <remarks>These virtual members are stored as full reference that they are
            not lost over time.
            /// </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.VirtualStructInstance.AddMember(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IVirtualStructInstance)">
            <summary>
            Adds the member.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <param name="parent">The parent struct instance. Usually the this pointer.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.VirtualStructInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Called when the SubSymbols are (re)created)
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <returns>TwinCAT.TypeSystem.SymbolCollection.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.VirtualStructInstance.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance" /> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.VirtualStructInstance.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.VirtualStructInstance.TryResolveType">
            <summary>
            Tries to resolve the <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <returns><c>true</c> if resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.UnionInstance">
            <summary>
            Class representing a Union Instance
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IUnionType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.UnionInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionInstance.#ctor(System.String,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.UnionInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionInstance.#ctor(System.String,System.String,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.UnionInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.UnionInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.UnionInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">if set to <c>true</c> [oversample].</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionInstance.#ctor(System.String,TwinCAT.TypeSystem.IUnionType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.UnionInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Called when [create sub symbols].
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.UnionInstance.FieldInstances">
            <summary>
            Gets the member instances of the <see cref="T:TwinCAT.TypeSystem.IStructInstance">Struct Instance</see>.
            </summary>
            <value>The member instances.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.UnionInstance.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.UnionInstance.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is a container/complex type.
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.InterfaceInstance">
            <summary>
            Class representing a Struct Instance
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IInterfaceType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.#ctor(System.String,System.String,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">if set to <c>true</c> [oversample].</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.#ctor(System.String,TwinCAT.TypeSystem.IInterfaceType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IInterfaceType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Called when [create sub symbols].
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceInstance.MemberInstances">
            <summary>
            Gets the member instances of the <see cref="T:TwinCAT.TypeSystem.IStructInstance">Struct Instance</see>.
            </summary>
            <value>The member instances.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceInstance.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceInstance.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is a container/complex type.
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceInstance.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC methods
            </summary>
            <value><c>true</c> if this instance has RPC methods; otherwise, <c>false</c>.</value>
            <remarks>If the struct instance supports RPC Methods, then the instance class is also
            supporting <see cref="T:TwinCAT.TypeSystem.IRpcStructInstance" />.</remarks>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcStructInstance"/>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcMethod"/>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcMethodParameter"/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.InvokeRpcMethod(System.String,System.Object[])">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>This method only supports primitive data types as <paramref name="inParameters"/>. Any available outparameters will be ignored.
            Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.InvokeRpcMethod(System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <param name="outParameters">The output parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.InvokeRpcMethod(System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifiying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifiying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters"/>, <paramref name="outParameters"/>, <paramref name="outSpecifiers"/>, <paramref name="retSpecifier"/>
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers"/> and <paramref name="retSpecifier"/>) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.TryInvokeRpcMethod(System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the the specified RpcMethod of the <see cref="T:TwinCAT.TypeSystem.IRpcCallableInstance"/>.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the the specified RpcMethod of the <see cref="T:TwinCAT.TypeSystem.IRpcCallableInstance"/>.
            </summary>
            <param name="method">The method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.InvokeRpcMethodAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="cancel">The cancellation token</param>
            <returns>
            A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> results contains the return value (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue"/>)
            together with the output parameters. The succeeded communication is indicated by the ErrorCode property (<see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>) after the communication.
            </returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.InvokeRpcMethodAsync(System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>
            A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> results contains the return value (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue"/>)
            together with the output parameters. The succeeded communication is indicated by the ErrorCode property (<see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>) after the communication.
            </returns>
            <remarks>
            The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="method">The method</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <returns>The result value of the call (ErrorCode). 0 means Succeeded.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The result value of the call (ErrorCode). 0 means Succeeded.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceInstance.RpcMethods">
            <summary>
            Gets the Method descriptions for the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            </summary>
            <value>The methods.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.StructInstance">
            <summary>
            Class representing a Struct Instance
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IStructType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(System.String,System.String,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">if set to <c>true</c> [oversample].</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(System.String,TwinCAT.TypeSystem.IStructType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructInstance.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IStructType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AliasInstance">
            <summary>
            Class AliasInstance.
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.Symbol" />
            <seealso cref="T:TwinCAT.TypeSystem.IAliasInstance" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IAliasType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.AliasInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">Indicates, that the oversample Symbol is to be created.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.#ctor(System.String,TwinCAT.TypeSystem.IAliasType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IAliasType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasInstance.ResolvedCategory">
            <summary>
            Gets the Category of the fully resolved alias.
            </summary>
            <value>The resolved category.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasInstance.ResolvedType">
            <summary>
            Gets the Datatype of the fully resolved Alias
            </summary>
            <value>The resolved alias type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasInstance.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasInstance.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is a container/complex type.
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols collection.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.TwinCAT#TypeSystem#IIndexedAccess#TryGetElement(System.Int32[],TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element (only in case of ResolvedCategory ARRAY)
            </summary>
            <param name="indices">The indices.</param>
            <param name="symbol">The found Array element symbol (out-parameter).</param>
            <returns>true if found, false if the indices specifiers is out-of-range.</returns>
            <exception cref="T:System.ArgumentNullException">indices</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasInstance.TwinCAT#TypeSystem#IIndexedAccess#TryGetElement(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with the specified indices (jagged array support).
            </summary>
            <param name="jaggedIndices">The jagged indices list.</param>
            <param name="symbol">The symbol.</param>
            <returns>true if found, false if the jagged indices specifiers is out-of-range.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ReferenceInstance">
            <summary>
            Reference instance.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IReferenceType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">Indicates, that the oversample Symbol is to be created.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.#ctor(System.String,TwinCAT.TypeSystem.IReferenceType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IReferenceType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceInstance.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceInstance.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is a container/complex type.
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceInstance.ResolvedCategory">
            <summary>
            Gets the Category of the Referenced Symbol.
            </summary>
            <value>The resolved category.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceInstance.ReferencedType">
            <summary>
            Gets the type of the referenced.
            </summary>
            <value>The type of the referenced.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceInstance.ResolvedType">
            <summary>
            Gets the type of the resolved.
            </summary>
            <value>The type of the resolved.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceInstance.ResolvedByteSize">
            <summary>
            Gets the size of the resolved byte.
            </summary>
            <value>The size of the resolved byte.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols collection.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.TwinCAT#TypeSystem#IIndexedAccess#TryGetElement(System.Int32[],TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element (only in case of ResolvedCategory ARRAY)
            </summary>
            <param name="indices">The indices.</param>
            <param name="symbol">The found Array element symbol (out-parameter).</param>
            <returns>true if found, false if the indices specifiers is out-of-range.</returns>
            <exception cref="T:System.ArgumentNullException">indices</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceInstance.TwinCAT#TypeSystem#IIndexedAccess#TryGetElement(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with the specified indices (jagged array support).
            </summary>
            <param name="jaggedIndices">The jagged indices list.</param>
            <param name="symbol">The symbol.</param>
            <returns>true if found, false if the jagged indices specifiers is out-of-range.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance">
            <summary>
            Class RpcStructReferenceInstance.
            Implements the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" />
            Implements the <see cref="T:TwinCAT.TypeSystem.IRpcStructInstance" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" />
            <seealso cref="T:TwinCAT.TypeSystem.IRpcStructInstance" />
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.RpcMethods">
            <summary>
            Gets the Method descriptions for the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            </summary>
            <value>The methods.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.MemberInstances">
            <summary>
            Gets the member instances of the <see cref="T:TwinCAT.TypeSystem.IStructInstance">Struct Instance</see>.
            </summary>
            <value>The member instances.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC methods.
            </summary>
            <value><c>true</c> if this instance has RPC methods; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IReferenceType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">Indicates, that the oversample Symbol is to be created.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.#ctor(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IReferenceType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="type">The type.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="fieldOffset">The field offset.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.InvokeRpcMethod(System.String,System.Object[])">
            <summary>
            Invokes the RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.InvokeRpcMethod(System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>System.Object.</returns>
            <exception cref="T:TwinCAT.TypeSystem.RpcInvokeException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.InvokeRpcMethod(System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@)">
            <summary>
            Invokes the RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outSpecifiers">The out specifiers.</param>
            <param name="retSpecifier">The ret specifier.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object@)">
            <summary>
            Tries the invoke RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="retValue">The ret value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Tries the invoke RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The ret value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.TryInvokeRpcMethod(System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Tries the invoke RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outSpecifiers">The out specifiers.</param>
            <param name="retSpecifier">The ret specifier.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The ret value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">methodName</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.InvokeRpcMethodAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Invokes the RPC method asynchronous.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>System.Threading.Tasks.Task&lt;TwinCAT.ValueAccess.ResultRpcMethodAccess&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.InvokeRpcMethodAsync(System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the RPC method asynchronous.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outSpecifiers">The out specifiers.</param>
            <param name="retSpecifier">The ret specifier.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>System.Threading.Tasks.Task&lt;TwinCAT.ValueAccess.ResultRpcMethodAccess&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcStructReferenceInstance.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="method">The method</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers.</param>
            <param name="retSpecifier">The ret specifier.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />
            are allowed to be empty or NULL.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:TwinCAT.ValueAccess.CannotAccessValueException"></exception>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" /></example>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.StringInstance">
            <summary>
            Pointer Instance
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IStringType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">Indicates, that the oversample Symbol is to be created.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringInstance.#ctor(System.String,TwinCAT.TypeSystem.IStringType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringInstance.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IStringType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StringInstance.ValueEncoding">
            <summary>
            Gets the encoding of the String (Encoding.Default (STRING) or Encoding.UNICODE (WSTRING))
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StringInstance.IsFixedLength">
            <summary>
            Gets a value indicating whether this instance is fixed length.
            </summary>
            <value><c>true</c> if this instance is fixed length; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PointerInstance">
            <summary>
            Pointer Instance
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerInstance"/> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">Indicates, that the oversample Symbol is to be created.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.#ctor(System.String,TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PointerInstance.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PointerInstance.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is a container/complex type.
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols collection.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PointerInstance.Reference">
            <summary>
            Gets the resolved reference of Pointer / Reference
            </summary>
            <value>
            The reference symbol or NULL if PVOID Pointer.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance">
            <summary>
            Class OversamplingArrayInstance.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" /> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">Oversampling instance.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.#ctor(System.String,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols collection.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.TryGetOversamplingElement(TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the oversampling element
            </summary>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if an oversampling element is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.OversamplingElement">
            <summary>
            Gets the oversampling element.
            </summary>
            <value>The oversampling element.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.OversamplingArrayInstance.OnGetElements">
            <summary>
            Get the Elements Collection (SubItems without Virtual oversampling element)
            </summary>
            <returns>ReadOnlySymbolCollection.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ArrayInstance">
            <summary>
            Implementation of the <see cref="T:TwinCAT.TypeSystem.IArrayInstance"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(TwinCAT.Ads.TypeSystem.Member,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent (<see cref="T:TwinCAT.TypeSystem.IStructInstance"/> or <see cref="T:TwinCAT.TypeSystem.IAliasInstance"/>) of this member instance symbol.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(System.Int32[],System.Boolean,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" /> class.
            </summary>
            <param name="currentIndex">Index of the current.</param>
            <param name="oversample">Oversampling instance.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(System.String,System.String,System.UInt32,System.UInt32,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="factoryServices">The factory services.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.#ctor(System.String,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.OnAccessSubSymbols">
            <summary>
            Handler function is called, when SubSymbols (the elements) are called.
            </summary>
            <remarks>
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.OnCreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols collection.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.Elements">
            <summary>
            Gets the contained Array Elements as read only collection.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.OnGetElements">
            <summary>
            Handler function getting the SubElements of the Array.
            </summary>
            <returns>ReadOnlySymbolCollection.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.Item(System.Int32[])">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> with the specified indices.
            </summary>
            <param name="indices">The indices.</param>
            <returns>ISymbol.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">indices</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.TryGetElement(System.Int32[],TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element
            </summary>
            <param name="indices">The indices.</param>
            <param name="symbol">The found Array element symbol (out-parameter).</param>
            <returns>true if found, false if the indices specifiers is out-of-range.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstance.TryGetElement(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with the specified indices (jagged array support).
            </summary>
            <param name="jaggedIndices">The jagged indices list.</param>
            <param name="symbol">The symbol.</param>
            <returns>true if found, false if the jagged indices specifiers is out-of-range.</returns>
            <exception cref="T:System.ArgumentNullException">jaggedIndices</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">jaggedIndices</exception>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.JaggedLevel">
            <summary>
            Gets the jagged level.
            </summary>
            <value>The jagged level.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is a container/complex type.
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is primitive.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.Dimensions">
            <summary>
            Gets the dimensions as read only collection.
            </summary>
            <value>The dimensions.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.ElementType">
            <summary>
            Gets the type of the contained elements.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstance.IsOversampled">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance"/> is oversampled.
            </summary>
            <value><c>true</c> if this instance is oversampled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.IArrayInstanceVariableSize">
            <summary>
            Interface IAnySizeArrayInstance
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.IArrayInstanceVariableSize.TryUpdateDimensions">
            <summary>
            Updates the dimensions of this VariableSize Array
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.IArrayInstanceVariableSize.TryReadLengthIs(System.Int32[]@)">
            <summary>
            Reads the dynamic Dim Lengths of the AnySize Array.
            </summary>
            <param name="lengthIsValue">The dynamic dimension lengths.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IArrayInstanceVariableSize.DynamicDimLengths">
            <summary>
            Gets the Array of Dynamic Dim Lengths (cached).
            </summary>
            <value>The dynamic dim lengths.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DimensionCollectionExtension.FillDynamicDimensions(TwinCAT.TypeSystem.ReadOnlyDimensionCollection,System.Int32,System.Int32[],System.Int32@)">
            <summary>
            Creates a new DimensionCollection from unconcrete dynamic dimensions
            </summary>
            <param name="dynamicDimensions">The dims.</param>
            <param name="index">Starting index within the dynamic lengths.</param>
            <param name="dynamicLengths">The dynamic lengths.</param>
            <param name="dynamicDimensionCount">The amount of patched dimensions.</param>
            <returns>The Patched / Real / Online Dimension collection.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ArrayTypeVariableSize">
            <summary>
            Variable / Dynamic / AnySize Array Type.
            Implements the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.ArrayType" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayTypeVariableSize._rootDynamic">
            <summary>
            Root dynamic instance.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayTypeVariableSize.#ctor(TwinCAT.Ads.TypeSystem.ArrayType,System.Int32,TwinCAT.Ads.TypeSystem.IArrayInstanceVariableSize)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayTypeVariableSize"/> class.
            </summary>
            <param name="type">The dynamic/original type.</param>
            <param name="dynamicParameterOffset">The dynamic parameter offset.</param>
            <param name="rootDynamic">The root dynamic instance.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayTypeVariableSize._dynamicParameterOffset">
            <summary>
            Offset within the DynamicDimLengths (necessary for jagged arrays)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayTypeVariableSize._dynamicParameterCount">
            <summary>
            Number of used dynamic Dimensions
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayTypeVariableSize.DynamicParameterCount">
            <summary>
            Number of used dynamic Dimensions.
            </summary>
            <value>The dynamic parameter count.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize">
            <summary>
            Class AnySizeArrayInstance.
            Implements the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" />
            </summary>
            <remarks>This ArrayInstance type is used for so called 'AnySize' arrays. That means
            array instances that referenced by pointers that are marked with the 'TcArraySize' attribute.
            The field reference in the attribute is used to specify the size of the referenced Array dynamically
            during runtime.
            </remarks>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.#ctor(System.String,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstance" /> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <param name="fieldOffset">The field offset.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.ParentPointer">
            <summary>
            Gets the parent pointer Symbol
            </summary>
            <value>The parent pointer.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.TcArraySizeFieldName">
            <summary>
            Gets the name of the 'TcArrayLengthIs' field
            </summary>
            <value>The name of the tc array size field.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.ParentStruct">
            <summary>
            Gets the parent structure.
            </summary>
            <value>The parent structure.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.LengthIsSymbol">
            <summary>
            Gets the 'LengthIs' symbol
            </summary>
            <value>The array size symbol.</value>
            <remarks>This can be symbol of an Primitive value (e.g INT, for one index) or
            an Array of primtive values (e.g. ARRAY OF INT) </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnGetSubSymbols">
            <summary>
            Handler function getting the SubSymbols
            </summary>
            <returns>ISymbolCollection.</returns>
            <remarks>
            The SubSymbols are determined instead of the WeakReference Cache of the base implementation.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnGetSubSymbolCount">
            <summary>
            Handler function determining the SubSymbolCode (optimized)
            </summary>
            <returns>System.Int32.</returns>
            <exclude />
            <remarks>This overload enforces that, the SubSymbolCount will be recreated on access, and not be cached as coded
            in the base implementation.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize._cachedDimLengths">
            <summary>
            The cached dim lengths
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.DynamicDimLengths">
            <summary>
            Gets the Array of Dynamic Dim Lengths (cached).
            </summary>
            <value>The dynamic dim lengths.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.TryReadLengthIs(System.Int32[]@)">
            <summary>
            Tries to read TcLengthIs symbol, that is referenced by this <see cref="T:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize"/> array.
            </summary>
            <param name="lengthIsValue">The length is value.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnGetSize">
            <summary>
            Handler function getting the size of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance" />
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnAccessSubSymbols">
            <summary>
            Handler function is called, when SubSymbols (the elements) are called.
            </summary>
            <returns><c>true</c> if sub symbols are resolved, <c>false</c> otherwise.</returns>
            <exclude />
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize._dynamicTypeRead">
            <summary>
            Indicates, that the dynamic type was read at least one time.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.TryUpdateDimensions">
            <summary>
            Updates the dimensions of this VariableSize Array
            </summary>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnReadRawValue(System.Int32)">
            <summary>
            Handler function for reading the raw value
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnReadValue(System.Int32)">
            <summary>
            Handler function for reading the dynamic value.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>The Value</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnReadValueAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function for writing the RawValue
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>The Value</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnWriteRawValue(System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Handler function for writing the RawValue
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.OnWriteValue(System.Object,System.Int32)">
            <summary>
            Handler function for writing the dynamic value
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.TryResolveType">
            <summary>
            Tries to resolve the <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <returns><c>true</c> if the type is resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayInstanceVariableSize.TryGetElement(System.Int32[],TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element
            </summary>
            <param name="indices">The indices.</param>
            <param name="symbol">The found Array element symbol (out-parameter).</param>
            <returns>true if found, false if the indices specifiers is out-of-range.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AdsBinder">
            <summary>
            Class AdsTypeBinder. This class cannot be inherited.
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.IAdsBinder" />
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AdsBinder.ImageBaseAddress">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress" /> of the Process Image
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.IAdsBinder">
            <summary>
            Interface IAdsTypeBinder
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IBinder" />
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IAdsBinder.ImageBaseAddress">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress" /> of the Process Image
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.CategoryConverter">
            <summary>
            Category converter
            </summary>
            <remarks>Converts the <see cref="T:TwinCAT.TypeSystem.DataTypeCategory"/> from <see cref="T:TwinCAT.Ads.AdsDataTypeId"/>
            and vice versa.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.CategoryConverter.FromId(TwinCAT.Ads.AdsDataTypeId)">
            <summary>
            Converts to <see cref="T:TwinCAT.TypeSystem.DataTypeCategory"/> from <see cref="T:TwinCAT.Ads.AdsDataTypeId"/>.
            </summary>
            <param name="id">The identifier.</param>
            <returns>DataTypeCategory.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.CategoryConverter.FromId(TwinCAT.Ads.AdsDataTypeId,System.String)">
            <summary>
            Converts the <see cref="T:TwinCAT.TypeSystem.DataTypeCategory"/> from <see cref="T:TwinCAT.Ads.AdsDataTypeId"/> and typename.
            </summary>
            <param name="id">The identifier.</param>
            <param name="typeName">Name of the type.</param>
            <returns>DataTypeCategory.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.CategoryConverter.FromCategory(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Converts the <see cref="T:TwinCAT.TypeSystem.DataTypeCategory"/> to the <see cref="T:TwinCAT.Ads.AdsDataTypeId"/>.
            </summary>
            <param name="cat">The cat.</param>
            <returns>AdsDatatypeId.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.BitMappingType">
            <summary>
            Helper Data Type to implement Bit mapping types.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.BitMappingType.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.BitMappingType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="bitSize">The size of the type in bits.</param>
            <param name="dotnetType">Type of the dotnet.</param>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PrimitiveType">
            <summary>
            Class PrimitiveType.
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.DataType" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PrimitiveType.#ctor(System.String,TwinCAT.Ads.AdsDataTypeId,System.Int32,TwinCAT.TypeSystem.PrimitiveTypeFlags,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PrimitiveType" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="dataTypeId">The data type identifier.</param>
            <param name="byteSize">Size of the byte.</param>
            <param name="flags">The flags.</param>
            <param name="dotnetType">Type of the dotnet.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PrimitiveType.#ctor(System.String,TwinCAT.TypeSystem.PrimitiveTypeFlags,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PrimitiveType" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="flags">The flags.</param>
            <param name="dotnetType">Type of the dotnet.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PrimitiveType.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PrimitiveType"/> class.
            </summary>
            <param name="name">The name of the data type.</param>
            <param name="dotnetType">The mapped dotnet type.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PrimitiveType.PrimitiveFlags">
            <summary>
            Indicates types of different PrimitiveTypes with flags.
            </summary>
            <value>The primitive flags.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PlatformBoundType">
            <summary>
            Platform bound types.
            </summary>
            <remarks>These are <see cref="T:TwinCAT.Ads.TypeSystem.PrimitiveType">Primitive types</see> like (UXINT, XINT, XWORD, PWORD) whose size is dependant of the target platform (4 or 8 bytes).
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PlatformBoundType.#ctor(System.String,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PrimitiveType" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="byteSize">Size of the byte.</param>
            <param name="dotnetType">Type of the dotnet.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PlatformBoundType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PlatformBoundType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">entry</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PlatformBoundType.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when this <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> is bound via the type binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PlcOpenType">
            <summary>
            Plc Open types.
            </summary>
            <remarks>These are <see cref="T:TwinCAT.Ads.TypeSystem.PrimitiveType">Primitive types</see> like (UXINT, XINT, XWORD, PWORD) whose size is dependant of the target platform (4 or 8 bytes).
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PlcOpenType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PlatformBoundType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">entry</exception>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.FluentRpcMethodExtension">
            <summary>
            Class FluentRpcMethodExtension.
            </summary>
            <remarks>
            This method extends the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethod"/> with extension methods to construct methods fluently.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.FluentRpcMethodExtension.AddParameter(TwinCAT.Ads.TypeSystem.RpcMethod,TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Adds a parameter to the RpcMethod
            </summary>
            <param name="method">The method.</param>
            <param name="parameter">The Parameter.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.FluentRpcMethodExtension.AddParameter(TwinCAT.Ads.TypeSystem.RpcMethod,System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.MethodParamFlags)">
            <summary>
            Adds a parameter to the RpcMethod
            </summary>
            <param name="method">The method.</param>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.FluentRpcMethodExtension.AddParameter(TwinCAT.Ads.TypeSystem.RpcMethod,System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.MethodParamFlags,System.Int32)">
            <summary>
            Adds a parameter to the RpcMethod
            </summary>
            <param name="method">The method.</param>
            <param name="name">The parameter name.</param>
            <param name="type">The type.</param>
            <param name="flags">Flags of the method parameter.</param>
            <param name="lengthIsIndex">LengthIs attribute.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.FluentRpcMethodExtension.SetReturnType(TwinCAT.Ads.TypeSystem.RpcMethod,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Sets the ReturnType of the RpcMethod.
            </summary>
            <param name="method">The method.</param>
            <param name="returnType">The datatype of the methods return value.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.RpcMethod">
            <summary>
            RPC Method Description
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.#ctor(TwinCAT.Ads.Internal.AdsMethodEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod"/> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethod"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.#ctor(System.String,TwinCAT.TypeSystem.RpcMethodParameterCollection,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethod"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
            <param name="returnType">Type of the return.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.#ctor(System.String,TwinCAT.TypeSystem.RpcMethodParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethod"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.#ctor(System.String,TwinCAT.TypeSystem.RpcMethodParameterCollection,TwinCAT.TypeSystem.IDataType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethod"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
            <param name="returnType">Type of the return.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethod._name">
            <summary>
            The name of the method
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.Name">
            <summary>
            Gets the name of the method
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethod._parameters">
            <summary>
            Method parameters.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.Parameters">
            <summary>
            Gets all parameters (In, Out and ref parameters) of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod">.</see>
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.InParameters">
            <summary>
            Gets the In-Parameters of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod" />
            </summary>
            <value>The In- and Ref-Parameters</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.OutParameters">
            <summary>
            Gets the Out-Parameters of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod" />
            </summary>
            <value>The In- and Ref-Parameters</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.ReturnAlignSize">
            <summary>
            Gets the size of the biggest element in bytes for Alignment
            </summary>
            <value>The size of the return align.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.ReturnType">
            <summary>
            Gets the return type.
            </summary>
            <value>Return type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.ReturnTypeSize">
            <summary>
            Gets the Byte size of the return type.
            </summary>
            <value>The size of the return type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.VTableIndex">
            <summary>
            Gets the V-table index of the method.
            </summary>
            <value>The index of the v table.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.Comment">
            <summary>
            Gets the Method comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.IsVoid">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IRpcMethod" /> has no return parameter
            </summary>
            <value><c>true</c> if this instance is void; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethod.Declaration">
            <summary>
            Gets the declaration string of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod" />
            </summary>
            <value>The declaration.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.AddParameter(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Adds a parameter
            </summary>
            <param name="item">The item.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.AddParameter(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.MethodParamFlags)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.AddParameter(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.MethodParamFlags,System.Int32)">
            <summary>
            Adds a parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <param name="lengthIsIndex">Index of the length is.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethod.SetReturnType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Sets the Return type.
            </summary>
            <param name="returnType">Type of the return.</param>
            <returns>RpcMethod.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.RpcMethodParameter">
            <summary>
            Class RpcMethodParameter.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethodParameter.#ctor(TwinCAT.Ads.Internal.AdsMethodParaInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethodParameter"/> class.
            </summary>
            <param name="paraInfo">The para information.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethodParameter.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.MethodParamFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethodParameter"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethodParameter.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.MethodParamFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethodParameter" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <param name="lengthIsIndex">Index of the length is.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethodParameter.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.MethodParamFlags,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethodParameter" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <param name="lengthIsIndex">Index of the length is.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._size">
            <summary>
            size of datatype ( in bytes )
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.Ads.TypeSystem.RpcMethodParameter"/>
            </summary>
            <value>The size.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._alignSize">
            <summary>
            size of biggest element for alignment
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.AlignSize">
            <summary>
            Gets the size of biggest element for alignment
            </summary>
            <value>The size of the align.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._dataTypeId">
            <summary>
            adsDataType of symbol (if alias)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._flags">
            <summary>
            Method Parameter Flags
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.ParameterFlags">
            <summary>
            Gets the parameter flags.
            </summary>
            <value>The parameter flags.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._typeGuid">
            <summary>
            Data Type Guid
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.TypeGuid">
            <summary>
            Gets the Unique identifier of the parameters data type.
            </summary>
            <value>The type unique identifier.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._lengthParaIndex">
            <summary>
            The _length is para
            </summary>
            <remarks>This field references to the Parameter that defines the length for this
            generic one. Equally to the marshalling attributes of COM (sizeof, lenght)
            this enables to transport parameter of type (PVOID)
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.LengthIsParameterIndex">
            <summary>
            Gets the index of the LengthIs parameter (within the MethodParameter List)
            </summary>
            <value>The index of the length is parameter.</value>
            <remarks>This field references to the Parameter that defines the length for this
            generic one. Equally to the marshalling attributes of COM (sizeof, length)
            this enables to transport parameter of type (PVOID)</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.HasLengthIsParameter">
            <summary>
            Gets a value indicating whether this instance has a related LengthIs Parameter.
            </summary>
            <value><c>true</c> if this instance has a LengthIs parameter; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._name">
            <summary>
            Name of datatype with terminating \0
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.Name">
            <summary>
            Gets the Parameter Name
            </summary>
            <value>The name.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._typeName">
            <summary>
            type name of dataitem
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.TypeName">
            <summary>
            Gets the Data type of the Parameter
            </summary>
            <value>The type.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.RpcMethodParameter._comment">
            <summary>
            Parameter Comment
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.Comment">
            <summary>
            Gets the Parameter Comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.IsInput">
            <summary>
            Gets a value indicating whether this instance is input.
            </summary>
            <value><c>true</c> if this instance is input; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.RpcMethodParameter.IsOutput">
            <summary>
            Gets a value indicating whether this instance is output.
            </summary>
            <value><c>true</c> if this instance is output; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.RpcMethodParameter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.DataType">
            <summary>
            DataType class
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.s_idCounter">
            <summary>
            The s_id counter
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> class from being created.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.#ctor(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> class.
            </summary>
            <param name="cat">The cat.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.#ctor(TwinCAT.TypeSystem.DataTypeCategory,TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> class.
            </summary>
            <param name="cat">The category</param>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.#ctor(System.String,TwinCAT.Ads.AdsDataTypeId,TwinCAT.TypeSystem.DataTypeCategory,System.Int32,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> class (Bytes mapping)
            </summary>
            <param name="name">Name of the Data type</param>
            <param name="typeId">DataType category / ID (internal style)</param>
            <param name="cat">Data type category</param>
            <param name="size">The Size of the Data Type in bytes or Bits</param>
            <param name="dotnetType">Associated dot net type.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.#ctor(System.String,TwinCAT.TypeSystem.DataTypeCategory,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="cat">The cat.</param>
            <param name="dotnetType">Type of the dotnet.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.#ctor(System.String,TwinCAT.Ads.AdsDataTypeId,TwinCAT.TypeSystem.DataTypeCategory,System.Int32,System.Type,TwinCAT.Ads.Internal.AdsDataTypeFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> class.
            </summary>
            <param name="name">Name of the Data type</param>
            <param name="typeId">DataType category / ID (internal style)</param>
            <param name="cat">Data type category</param>
            <param name="size">The Size of the Data Type in bits or bytes (depending on bitMapping)</param>
            <param name="dotnetType">Associated dot net type.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.#ctor(TwinCAT.Ads.TypeSystem.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> class (copy Constructor)
            </summary>
            <param name="copy">The copy.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.id">
            <summary>
            Internal ID of the DataType (non persistent)
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Id">
            <summary>
            Gets the ID of the DataType
            </summary>
            <value>The id.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType._typeGuid">
            <summary>
            The TypeGuid of the DataType
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.TypeGuid">
            <summary>
            Gets the Guid of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> (optional)
            </summary>
            <value>The type unique identifier.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType._managedType">
            <summary>
            The corresponding .NET type
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.ManagedType">
            <summary>
            Gets the corresponding .NET Type if attached.
            </summary>
            <value>Dot net type.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.resolver">
            <summary>
            The type binder / resolver
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.ns">
            <summary>
            The namespace
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Namespace">
            <summary>
            Gets the namespace string within the <see cref="T:TwinCAT.TypeSystem.IDataType" /> exists.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.category">
            <summary>
            Data Type Category
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Category">
            <summary>
            Gets the Data Type category
            </summary>
            <value>The category.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.dataTypeId">
            <summary>
            Data Type category
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.typeHashValue">
            <summary>
            hashValue of base type / Code Offset to setter Method (typeHashValue or offsSetCode)
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.TypeHashValue">
            <summary>
            Gets the hashValue of base type / Code Offset to setter Method (typeHashValue or offsSetCode)
            </summary>
            <value>The data type id.</value>
            <exclude />
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.DataTypeId">
            <summary>
            Gets the DataTypeId <see cref="T:TwinCAT.Ads.AdsDataTypeId" /> (Only for internal use)
            </summary>
            <value>The data type id.</value>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.size">
            <summary>
            The size of this <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> in bytes or bits
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Size">
            <summary>
            Gets the Size of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> in Bytes or bits.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.SetSize(System.Int32,System.Type)">
            <summary>
            Sets the size of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" />
            </summary>
            <param name="size">The size.</param>
            <param name="managedType">Type of the managed.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.ByteSize">
            <summary>
            Gets the (aligned) size of of the Type/Instance in Bytes
            </summary>
            <value>The size of the byte.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsByteAligned">
            <summary>
            Indicates that the Size of the Object is Byte aligned (BitSize % 8 == 0)
            </summary>
            <value><c>true</c> if this instance is byte aligned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType._typeName">
            <summary>
            The name of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" />
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Name">
            <summary>
            Gets the name of the Data Type (without namespace)
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.FullName">
            <summary>
            Gets the full name of the <see cref="T:TwinCAT.TypeSystem.IDataType" /> (Namespace + Name)
            </summary>
            <value>The full name.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.comment">
            <summary>
            Additional comment to the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" />
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Comment">
            <summary>
            Gets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.ResolveType(TwinCAT.TypeSystem.DataTypeResolveStrategy)">
            <summary>
            Resolves the type.
            </summary>
            <param name="type">The type.</param>
            <returns>IDataType.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsPrimitive">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is primitive
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
            <exclude />
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsContainer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is a container type
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category" />
            <remarks>Container Types are all types that contain SubElements like
            <list type="bullet"><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Array" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Union" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Struct" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Function" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Program" /></description></item></list>
            and the <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Alias" /> and <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Reference" /> types, if they have a container type as base type.</remarks>
            <exclude />
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsReference">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is a reference type
            </summary>
            <value><c>true</c> if this instance is container type; otherwise, <c>false</c>.</value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category" />
            <remarks>Reference types can be dereferenced.</remarks>
            <exclude />
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsPointer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is a pointer type
            </summary>
            <value><c>true</c> if this instance is pointer type; otherwise, <c>false</c>.</value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category" />
            <remarks>Pointer types can be dereferenced with the '^' operator.</remarks>
            <exclude />
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.flags">
            <summary>
            Flag indicators set to this type.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Flags">
            <summary>
            Gets the Flag indicators set to this type.
            </summary>
            <value>The flags.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsBitType">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is a bit mapping Type
            </summary>
            <value><c>true</c> if this instance is bit mapping subtype; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.DataType.attributes">
            <summary>
            The attributes
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.Attributes">
            <summary>
            Gets the attributes of the <see cref="T:TwinCAT.TypeSystem.IDataType" />
            </summary>
            <value>The attributes.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.Bind(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Registers this instance at the <see cref="T:TwinCAT.TypeSystem.IBinder" />
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when this <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> is bound via the type binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.DataType.IsBound">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <returns><c>true</c> if [is type resolved] [the specified recurse]; otherwise, <c>false</c>.</returns>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.TwinCAT#TypeSystem#IBindable2#ResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Tries to resolve the Bindable Symbol/DataType asynchronously.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The DataType/Symbol binder to be used.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.TwinCAT#TypeSystem#IBindable2#ResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Resolves the Bindable Symbol/DataType synchronously.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the bindable can be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.DataType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.DataType"/> is resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.EnumType`1">
            <summary>
            Enum <see cref="T:TwinCAT.Ads.TypeSystem.DataType" />.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> class.
            </summary>
            <param name="entry">The entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.#ctor(System.String,System.String,System.Int32,TwinCAT.TypeSystem.EnumValueCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.EnumType`1"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.EnumValueCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.EnumType`1"/> class.
            </summary>
            <param name="name">The name of the Enum</param>
            <param name="baseType">Enum Base/Alias type.</param>
            <param name="values">The Enum values.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.EnumType`1._baseTypeId">
            <summary>
            The _base type identifier
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.EnumType`1._baseTypeName">
            <summary>
            The _base type name
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.EnumType`1.BaseTypeName">
            <summary>
            Gets the BaseType name
            </summary>
            <value>The name of the base type.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.EnumType`1._baseType">
            <summary>
            The _base type
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.EnumType`1.BaseType">
            <summary>
            Gets the Base Type
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when [resolve with binder].
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> is resolved, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">binder</exception>
            <exclude />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.EnumType`1.TwinCAT#TypeSystem#IEnumType#EnumValues">
            <summary>
            Enumeration specification (if enum)
            </summary>
            <value>The enum specification.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.EnumType`1._fields">
            <summary>
            The _fields
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.GetValues">
            <summary>
            Gets the values of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1" />
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.GetNames">
            <summary>
            Gets the filed names of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1" />
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.TryParse(System.String,`0@)">
            <summary>
            Tries to parse the Enum Value
            </summary>
            <param name="strValue">Enum value (in string representation).</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.EnumType`1"/> could be parsed/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.TryParse(System.String,TwinCAT.TypeSystem.IEnumValue@)">
            <summary>
            Tries to parse the Enum Value
            </summary>
            <param name="strValue">Enum value (in string representation).</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.EnumType`1"/> could be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.Parse(System.String)">
            <summary>
            Parses a name of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1" /> and returns the value (as base type)
            </summary>
            <param name="strValue">Enum Value as string.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.ToString(`0)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="val">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            <exception cref="T:System.ArgumentException">val</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.TwinCAT#TypeSystem#IEnumType#GetValues">
            <summary>
            Gets the values of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1" />
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.TwinCAT#TypeSystem#IEnumType#Parse(System.String)">
            <summary>
            Parses a name of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1" /> and returns the value (as base type)
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.ToString(System.IConvertible)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="val">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.TwinCAT#TypeSystem#IEnumType#TryParse(System.String,System.IConvertible@)">
            <summary>
            Parses the value from value  name.
            </summary>
            <param name="name">The value name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if value name was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.EnumType`1.Contains(System.String)">
            <summary>
            Determines whether the enum values contains the specified name
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if contains the value, otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.EnumType`1.EnumValues">
            <summary>
            Enumeration specification (if enum)
            </summary>
            <value>The enum specification.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.AliasType">
            <summary>
            Alias DataType
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.IAliasType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.#ctor(System.String,TwinCAT.Ads.TypeSystem.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.IAliasType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasType.BaseTypeName">
            <summary>
            Gets the BaseType name
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasType.BaseType">
            <summary>
            Gets the Base Type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.AliasType"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.AliasType.ManagedType">
            <summary>
            Gets the corresponding .NET Type if attached.
            </summary>
            <value>Dot net type.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.AliasType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.StringType">
            <summary>
            String DataType
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringType.#ctor(System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringType" /> class.
            </summary>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StringType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.StringType.length">
            <summary>
            The length of the <see cref="T:TwinCAT.Ads.TypeSystem.StringType"/> in characters
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StringType.Length">
            <summary>
            Gets the number of characters within the string.
            </summary>
            <remarks>If UseUTF8StringValues in PLC Control is on,
            then every standard string is interpreted as UTF8 string. Additionally
            the string lengths now get the meaning of byte size!!!
            </remarks>
            <value>
            The length of the string (bytes for UTF8)
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StringType.IsFixedLength">
            <summary>
            Gets a value indicating whether the string is of fixed length.
            </summary>
            <value><c>true</c> if this instance is fixed length; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StringType.Encoding">
            <summary>
            Gets the encoding of the String (Encoding.Default (Ansi Codepage, STRING) or Encoding.UNICODE (WSTRING))
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StringType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.WStringType">
            <summary>
            Represents an Unicode string (Wide string)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.WStringType.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.WStringType"/> class.
            </summary>
            <param name="length">The length.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.WStringType.length">
            <summary>
            The length of the <see cref="T:TwinCAT.Ads.TypeSystem.WStringType"/>
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.WStringType.Length">
            <summary>
            Gets the number of characters within the string.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.WStringType.Encoding">
            <summary>
            Gets the encoding of the String (Encoding.Default (STRING) or Encoding.UNICODE (WSTRING))
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.WStringType.IsFixedLength">
            <summary>
            Gets a value indicating whether the string is of fixed length.
            </summary>
            <value><c>true</c> if this instance is fixed length; otherwise, <c>false</c>.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.WStringType.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.UnionType">
            <summary>
            Represents a union type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.UnionType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionType.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when this <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> is bound via the type binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.UnionType"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.UnionType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            on resolve with binder as an asynchronous operation.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">binder</exception>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.UnionType._fields">
            <summary>
            The Union Fields
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.UnionType.Fields">
            <summary>
            Gets a read only collection of the <see cref="T:TwinCAT.TypeSystem.IField">Fields</see> of the <see cref="T:TwinCAT.TypeSystem.IUnionType" />.
            </summary>
            <value>
            The members as read only collection.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.InterfaceType">
            <summary>
            Represents an interface type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.InterfaceType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.InterfaceType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.InterfaceImplementationNames">
            <summary>
            Gets the names of the interfaces, this <see cref="T:TwinCAT.TypeSystem.IDataType" /> implements.
            </summary>
            <value>The interface implementations.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.InterfaceType._implements">
            <summary>
            The binder resolved interface types.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.InterfaceImplementations">
            <summary>
            Gets the resolved interface types, this <see cref="T:TwinCAT.TypeSystem.IDataType" /> implments.
            </summary>
            <value>The implements.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.IsDerived">
            <summary>
            Gets a value indicating whether this instance is derived.
            </summary>
            <value>
            <c>true</c> if this instance is derived; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.Members">
            <summary>
            Gets a read only collection of the <see cref="T:TwinCAT.TypeSystem.IMember">Members</see> of the <see cref="T:TwinCAT.TypeSystem.IInterfaceType" />.
            </summary>
            <value>
            The members as read only collection.
            </value>
            <remarks>
            If the <see cref="T:TwinCAT.TypeSystem.IStructType" /> is derived, only the extended members are returned. To get
            all supported members down the inheritance chain, use the <see cref="P:TwinCAT.TypeSystem.IInterfaceType.AllMembers" /> property.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceType.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when this <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> is bound via the type binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.InterfaceType._baseTypeId">
            <summary>
            ID of the base type of Derived.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.InterfaceType._baseTypeName">
            <summary>
            Base Type Name of the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> if derived
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.BaseTypeName">
            <summary>
            Gets the the Name of the Base class (if derived)
            </summary>
            <value>
            Empty if not derived.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.InterfaceType._baseType">
            <summary>
            Base Type of the Struct if derived.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.BaseType">
            <summary>
            Gets the structs Base Type (Null if not derived).
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.InterfaceType"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.InterfaceType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.InterfaceType._allMembers">
            <summary>
            All members of this <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.AllMembers">
            <summary>
            Gets all members (down the derivation hierarchy)
            </summary>
            <value>
            All members.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.InterfaceType._rpcMethods">
            <summary>
            RPC Method description
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.RpcMethods">
            <summary>
            Gets the Method descriptions for the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            </summary>
            <value>The methods.</value>
            <remarks>The DataType (Structure) must be marked with the PlcAttribute 'TcRpcEnable' to enable RpcMethods, otherwise
            RpcMethods are not passed through to the ADS symbolic information.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.InterfaceType.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC Methods.
            </summary>
            <value><c>true</c> if this instance has methods; otherwise, <c>false</c>.</value>
            <remarks>The DataType (Structure) must be marked with the PlcAttribute 'TcRpcEnable' to enable RpcMethods, otherwise
            RpcMethods are not passed through to the ADS symbolic information.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.FluentStructTypeExtension">
            <summary>
            Class FluentStructTypeExtension.
            </summary>
            <remarks>
            Fluent interface for adding members to <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>s.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.FluentStructTypeExtension.AddAligned(TwinCAT.Ads.TypeSystem.StructType,TwinCAT.TypeSystem.IMember)">
            <summary>
            Adds a member to the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>
            </summary>
            <param name="str">The string.</param>
            <param name="member">The member.</param>
            <returns>StructType.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.FluentStructTypeExtension.AddMethod(TwinCAT.Ads.TypeSystem.StructType,TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Adds a RpcMethod.
            </summary>
            <param name="str">The struct.</param>
            <param name="method">The method.</param>
            <returns>RpcStructType.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.StructType">
            <summary>
            Represents a struct type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.#ctor(System.String,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.IMemberCollection,TwinCAT.TypeSystem.IRpcMethodCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructType" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
            <param name="fields">The fields.</param>
            <param name="methods">The RpcMethods.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.IMemberCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
            <param name="fields">The fields.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.InterfaceImplementationNames">
            <summary>
            Gets the names of the interfaces, this <see cref="T:TwinCAT.TypeSystem.IDataType" /> implements.
            </summary>
            <value>The interface implementations.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.StructType._implements">
            <summary>
            The binder resolved interface implementation types
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.InterfaceImplementations">
            <summary>
            Gets the resolved interface types, this <see cref="T:TwinCAT.TypeSystem.IDataType" /> implments.
            </summary>
            <value>The implements.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.StructType._rpcMethods">
            <summary>
            RPC Method description
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.RpcMethods">
            <summary>
            Gets the Method descriptions for the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            </summary>
            <value>The methods.</value>
            <remarks>The DataType (Structure) must be marked with the PlcAttribute 'TcRpcEnable' to enable RpcMethods, otherwise
            RpcMethods are not passed through to the ADS symbolic information.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC Methods.
            </summary>
            <value><c>true</c> if this instance has methods; otherwise, <c>false</c>.</value>
            <remarks>The DataType (Structure) must be marked with the PlcAttribute 'TcRpcEnable' to enable RpcMethods, otherwise
            RpcMethods are not passed through to the ADS symbolic information.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when this <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> is bound via the type binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.IsDerived">
            <summary>
            Gets a value indicating whether this instance is derived.
            </summary>
            <value>
            <c>true</c> if this instance is derived; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.Members">
            <summary>
            Gets a read only collection of the <see cref="T:TwinCAT.TypeSystem.IMember">Members</see> of the <see cref="T:TwinCAT.TypeSystem.IStructType" />.
            </summary>
            <value>
            The members as read only collection.
            </value>
            <remarks>
            If the <see cref="T:TwinCAT.TypeSystem.IStructType" /> is derived, only the extended members are returned. To get
            all supported members down the inheritance chain, use the <see cref="P:TwinCAT.TypeSystem.IInterfaceType.AllMembers" /> property.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.StructType._baseTypeId">
            <summary>
            ID of the base type of Derived.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.StructType._baseTypeName">
            <summary>
            Base Type Name of the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> if derived
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.BaseTypeName">
            <summary>
            Gets the the Name of the Base class (if derived)
            </summary>
            <value>
            Empty if not derived.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.StructType._baseType">
            <summary>
            Base Type of the Struct if derived.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.BaseType">
            <summary>
            Gets the structs Base Type (Null if not derived).
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.StructType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.StructType._allMembers">
            <summary>
            All members of this <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.StructType.AllMembers">
            <summary>
            Gets all members (down the derivation hierarchy)
            </summary>
            <value>
            All members.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ReferenceType">
            <summary>
            Represents a reference type
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceType"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="size">The size.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.#ctor(TwinCAT.TypeSystem.IDataType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceType"/> class.
            </summary>
            <param name="referenced">The referenced.</param>
            <param name="platformPointerSize">Size of the platform pointer.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ReferenceType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when this <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> is bound via the type binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceType.ManagedType">
            <summary>
            Gets the corresponding .NET Type if attached.
            </summary>
            <value>Dot net type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceType.ReferencedTypeName">
            <summary>
            Gets the name of the referenced type.
            </summary>
            <value>The name of the referenced type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceType.ReferencedType">
            <summary>
            Gets the the referenced type.
            </summary>
            <value>
            The type of the referenced.
            </value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="P:TwinCAT.Ads.TypeSystem.ReferenceType.ReferencedType"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/> 
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ReferenceType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceType.ResolvedCategory">
            <summary>
            Gets the resolved category.
            </summary>
            <value>The resolved category.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceType.ResolvedByteSize">
            <summary>
            Gets the size of the resolved byte.
            </summary>
            <value>The size of the resolved byte.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ReferenceType.ResolvedType">
            <summary>
            Gets the type of the resolved.
            </summary>
            <value>The type of the resolved.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PointerType">
            <summary>
            Represents a pointer type.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType" /> class.
            </summary>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="platformPointerSize">Size of the platform pointer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(TwinCAT.TypeSystem.IDataType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType" /> class.
            </summary>
            <param name="referencedType">Type of the referenced.</param>
            <param name="platformPointerSize">Size of the platform pointer.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <param name="platformPointerSize">The platform pointer size.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">size</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <param name="referencedTypeName">Name of the referenced type.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when this <see cref="T:TwinCAT.Ads.TypeSystem.DataType" /> is bound via the type binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PointerType.ManagedType">
            <summary>
            Gets the corresponding .NET Type if attached.
            </summary>
            <value>Dot net type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PointerType.ReferenceTypeName">
            <summary>
            Gets the name of the referenced datatype
            </summary>
            <value>The name of the reference dattype.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.PointerType.ReferencedType">
            <summary>
            Gets the the referenced type.
            </summary>
            <value>
            The type of the referenced.
            </value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PointerType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PCCHType">
            <summary>
            Class PCCHType. This class cannot be inherited.
            Implements the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.PointerType" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PCCHType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PCCHType" /> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PCCHType.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns>PCCHType.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.PVoidType">
            <summary>
            Class PVoidType. This class cannot be inherited.
            Implements the <see cref="T:TwinCAT.Ads.TypeSystem.PointerType" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.TypeSystem.PointerType" />
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.PVoidType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.PVoidType" /> class.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SubRangeTypeFactory">
            <summary>
            Type Factory for <see cref="T:TwinCAT.TypeSystem.ISubRangeType"/> implementing types.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeTypeFactory.TryCreate(System.String,TwinCAT.TypeSystem.IDataTypeResolver,TwinCAT.TypeSystem.ISubRangeType@)">
            <summary>
            Tries to create the <see cref="T:TwinCAT.TypeSystem.ISubRangeType" />.
            </summary>
            <param name="name">The name of the subrange type.</param>
            <param name="resolver">The resolver.</param>
            <param name="subRange">The sub range type or NULL</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeTypeFactory.TryCreate(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.ISubRangeType@)">
            <summary>
            Tries to create the subrange type.
            </summary>
            <param name="name">The name of the Subrrange type</param>
            <param name="baseType">The base type of the subrange.</param>
            <param name="subRange">The sub range type of NULL</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeTypeFactory.TryCreate(TwinCAT.Ads.Internal.AdsDataTypeEntry,TwinCAT.TypeSystem.IDataTypeResolver,TwinCAT.TypeSystem.ISubRangeType@)">
            <summary>
            Tries to create the <see cref="T:TwinCAT.TypeSystem.ISubRangeType"/>.
            </summary>
            <param name="entry">The type entry.</param>
            <param name="resolver">The resolver.</param>
            <param name="subRange">The sub range type or null.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.SubRangeType`1">
            <summary>
            Represents a SubRangType
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeType`1.#ctor(System.String,System.String,System.Int32,`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.SubRangeType`1" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
            <param name="size">The size.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType`1.ManagedType">
            <summary>
            Gets the corresponding .NET Type if attached.
            </summary>
            <value>Dot net type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType`1.BaseTypeName">
            <summary>
            Gets the name of the base type.
            </summary>
            <value>The name of the base type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType`1.BaseType">
            <summary>
            Gets the the base type.
            </summary>
            <value>
            The type of the referenced.
            </value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeType`1.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeType`1.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.SubRangeType`1"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.SubRangeType`1.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType`1.LowerBound">
            <summary>
            Gets the lower bound.
            </summary>
            <value>
            The lower bound.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.SubRangeType`1.UpperBound">
            <summary>
            Gets the upper bound.
            </summary>
            <value>
            The upper bound.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Field">
            <summary>
            Represents a field of an Struct/Alias/Union
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Field.#ctor(TwinCAT.Ads.TypeSystem.DataType,TwinCAT.Ads.Internal.AdsFieldEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Member"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="subEntry">The sub entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Field.#ctor(System.String,TwinCAT.Ads.TypeSystem.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Field"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Field.parent">
            <summary>
            The parent <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> of this Member
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Field.ParentType">
            <summary>
            Gets the Parent of this <see cref="T:TwinCAT.TypeSystem.IField" />.
            </summary>
            <value>
            The type of the parent (Alias, Union, Struct)
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Field.ValueEncoding">
            <summary>
            Gets the value encoding of this <see cref="T:TwinCAT.Ads.TypeSystem.Field"/>
            </summary>
            <value>The value encoding.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Member">
            <summary>
            Represents a member of an <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Member.#ctor(TwinCAT.Ads.TypeSystem.DataType,TwinCAT.Ads.Internal.AdsFieldEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Member"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="subEntry">The sub entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Member.#ctor(System.String,TwinCAT.Ads.TypeSystem.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Member"/> class.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="type">The type.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Member.offset">
            <summary>
            The offset of the <see cref="T:TwinCAT.Ads.TypeSystem.Member"/> within the parent <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> in bits or bytes.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.Offset">
            <summary>
            Gets the offset of the <see cref="T:TwinCAT.Ads.TypeSystem.Member"/> within the parent <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/> in bits or bytes dependent on <see cref="P:TwinCAT.Ads.TypeSystem.Instance.IsBitType"/>
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.BitOffset">
            <summary>
            Gets the bit offset.
            </summary>
            <value>The bit offset.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.ByteOffset">
            <summary>
            Gets the byte offset.
            </summary>
            <value>The byte offset.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.MemberFlags">
            <summary>
            Gets the Field / Member Flags
            </summary>
            <value>The member flags.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Member.TypeHashValue">
            <summary>
            Gets the type hash value (Only for Properties ???)
            </summary>
            <value>The type hash value.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Member.SetOffset(System.Int32)">
            <summary>
            Sets the offset.
            </summary>
            <param name="offset">The offset.</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ArrayType">
            <summary>
            Represents an Array DataType
            </summary>
            <summary>
            DataType class
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.#ctor(TwinCAT.Ads.Internal.AdsDataTypeEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.#ctor(System.String,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.DimensionCollection,TwinCAT.Ads.Internal.AdsDataTypeFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" /> class.
            </summary>
            <param name="typeName">ArrayType name.</param>
            <param name="elementType">Element Type.</param>
            <param name="dims">Dimension specification.</param>
            <param name="flags">The flags.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.#ctor(TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.DimensionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" /> class.
            </summary>
            <param name="elementType">Element Type.</param>
            <param name="dims">Dimension specification.</param>
            <exception cref="T:System.ArgumentNullException">elementType</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.#ctor(System.String,System.String,TwinCAT.TypeSystem.DimensionCollection,TwinCAT.Ads.Internal.AdsDataTypeFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" /> class.
            </summary>
            <param name="typeName">ArrayType name.</param>
            <param name="elementType">Element Type.</param>
            <param name="dims">Dimension specification.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.#ctor(TwinCAT.Ads.TypeSystem.ArrayType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/> class.
            </summary>
            <param name="type">The type.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.#ctor(TwinCAT.Ads.TypeSystem.DataType,TwinCAT.TypeSystem.IDimensionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/> class.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="dimensions">The dimensions.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ManagedType">
            <summary>
            Gets the corresponding .NET Type if attached.
            </summary>
            <value>Dot net type.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.IsOversampled">
            <summary>
            Gets a value indicating whether this array instance describes an oversampling type.
            </summary>
            <value><c>true</c> if this instance is oversampling; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayType.elementTypeName">
            <summary>
            The element type name
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementTypeName">
            <summary>
            Gets the name of the element type.
            </summary>
            <value>
            The name of the element type.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayType.elementType">
            <summary>
            The element type
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.SetElementType(TwinCAT.Ads.TypeSystem.DataType)">
            <summary>
            Sets the type of the element.
            </summary>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementType">
            <summary>
            Gets the type of the contained elements.
            </summary>
            <value>
            The type of the element.
            </value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.OnResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Handler function resolving the DataType binding
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType"/> could be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.OnResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Handler function resolving the DataType binding asynchronously.
            </summary>
            <param name="recurse">if set to this method resolves all subtypes recursivly.</param>
            <param name="binder">The binder.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.IsJagged">
            <summary>
            Gets a value indicating whether this instance is jagged.
            </summary>
            <value><c>true</c> if this instance is jagged; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.JaggedLevel">
            <summary>
            Gets the jagged level (Non-Jagged Array have level 1)
            </summary>
            <value>The jagged level.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayType.elementTypeId">
            <summary>
            The element type id
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.ArrayType._dimensions">
            <summary>
            Dimension information (for arrays)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.SetDimensions(TwinCAT.TypeSystem.DimensionCollection)">
            <summary>
            Sets the dimensions.
            </summary>
            <param name="dims">The dims.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.Dimensions">
            <summary>
            Gets the dimensions as read only collection.
            </summary>
            <value>
            The dimensions.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.DimensionCount">
            <summary>
            Gets the dimension count.
            </summary>
            <value>
            The dimension count.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementCount">
            <summary>
            Gets the element count.
            </summary>
            <value>
            The element count.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ArrayType.ElementSize">
            <summary>
            Gets the byte-size of a single element of the array
            </summary>
            <value>The size of the element.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.CheckIndices(System.Int32[],TwinCAT.TypeSystem.IArrayType,System.Boolean)">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" />
            </summary>
            <param name="indices">Indices</param>
            <param name="arrayType">ArrayType</param>
            <param name="acceptOversampled">if set to <c>true</c> [accept oversampled].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Indices doesn't match the specified Array type</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.TryCheckIndices(System.Int32[],TwinCAT.TypeSystem.IArrayType,System.Boolean)">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" />
            </summary>
            <param name="indices">Indices</param>
            <param name="arrayType">ArrayType</param>
            <param name="acceptOversampled">if set to <c>true</c> [accept oversampled].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Indices doesn't match the specified Array type</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.AreIndicesValid(System.Int32[],TwinCAT.TypeSystem.IArrayType,System.Boolean)">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" />
            </summary>
            <param name="indices">Indices</param>
            <param name="type">ArrayType</param>
            <param name="acceptOversampled">if set to <c>true</c> [accept oversampled].</param>
            <returns><c>true</c> if the indices are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.CheckIndices(System.Int32[],System.Boolean)">
            <summary>
            Checks the dimensions of the <see cref="T:TwinCAT.Ads.TypeSystem.ArrayType" />
            </summary>
            <param name="indices">Indices</param>
            <param name="acceptOversampled">if set to <c>true</c> [accept oversampled].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Indices doesn't match the specified Array type</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.GetElementPosition(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Gets the element position within a flattened multidimensional array / SubSymbols List
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The type.</param>
            <returns>The Position-Index within the Elements collection of the Array instance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.GetElementPosition(System.Int32[])">
            <summary>
            Gets the element position within a flattened multidimensional array
            </summary>
            <param name="indices">The indices.</param>
            <returns>
            The Position-Index within the Elements collection of the array
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.ArrayType.GetElementOffset(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Gets the element offset (bits or bytes, dependent on ElementType.IsBitType)
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.ISymbolFlagProvider">
            <summary>
            Gives access to the specific Symbol Flags
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolFlagProvider.Flags">
            <summary>
            Gets the Symbol Flags.
            </summary>
            <value>The flags.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolFlagProvider.ContextMask">
            <summary>
            Gets the ADS Context Mask
            </summary>
            <value>The context mask.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolFlagProvider.IsReadOnly">
            <summary>
            Indicates that this instance is read only.
            </summary>
            <remarks>
            Actually, this Flag is restricted to TcCOM-Objects readonly Parameters. Within the PLC this is used for the ApplicationName and
            ProjectName of PLC instances.
            Write-Access on these Modules will create an <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceAccessDenied"/> error.
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolFlagProvider.IsPersistent">
            <summary>
            Indicates that this instance is persistent.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolFlagProvider.IsTcComInterfacePointer">
            <summary>
            Indicates that this instance is a TcComInterfacePointer.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.ISymbolFlagProvider.IsTypeGuid">
            <summary>
            Indicates that this instance has set TypeGuid flag.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.Instance">
            <summary>
            Instance implementation
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">resolver</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.#ctor(TwinCAT.Ads.Internal.AdsSymbolEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.#ctor(TwinCAT.Ads.Internal.AdsFieldEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> class.
            </summary>
            <param name="subEntry">The sub entry.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.#ctor(System.String,TwinCAT.Ads.TypeSystem.DataType,TwinCAT.Ads.Internal.AdsSymbolFlags,TwinCAT.TypeSystem.TypeAttributeCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> class.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="type">The type.</param>
            <param name="flags">The flags.</param>
            <param name="attributes">The attributes.</param>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.Bind(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Binds this bindable object via the specified <see cref="T:TwinCAT.TypeSystem.IBinder" />
            </summary>
            <param name="binder">The binder.</param>
            <exception cref="T:System.ArgumentNullException">binder</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.OnBound(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Called when he <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> is bound via its instance binder.
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.AlignTypeName(System.String)">
            <summary>
            Aligns the type name
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException">Type name not valid!</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.TwinCAT#TypeSystem#IInstanceInternal#SetInstanceName(System.String)">
            <summary>
            Sets a new instance name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <remarks>This can only used as long the Instance is not added to a collection using the type binder classes.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.OnSetInstanceName(System.String)">
            <summary>
            Sets a new InstanceName InstancePath
            </summary>
            <param name="instanceName">Instance name.</param>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.resolver">
            <summary>
            DataType resolver
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Binder">
            <summary>
            Gets the data type resolver.
            </summary>
            <value>The data type resolver.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.ns">
            <summary>
            Namespace
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Namespace">
            <summary>
            Gets the namespace name.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.size">
            <summary>
            The Byte size or Bit Size of the instance
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType" /> in bytes or Bits dependant on <see cref="P:TwinCAT.Ads.TypeSystem.Instance.IsBitType" />
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.InternalSize">
            <summary>
            Gets the size of the internal.
            </summary>
            <value>The size of the internal.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.OnGetSize">
            <summary>
            Handler function getting the size of the <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/>
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.flags">
            <summary>
            Get the Instance Flags
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Flags">
            <summary>
            Gets the instance flags.
            </summary>
            <value>The flags.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.ByteSize">
            <summary>
            Gets the (aligned) size of of the Type/Instance in Bytes
            </summary>
            <value>The size of the byte.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsByteAligned">
            <summary>
            Indicates that the Size of the Object is Byte aligned (BitSize % 8 == 0)
            </summary>
            <value><c>true</c> if this instance is byte aligned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.BitSize">
            <summary>
            Gets the size of this <see cref="T:TwinCAT.Ads.TypeSystem.Instance"/> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.dataTypeId">
            <summary>
            Instance category
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.DataTypeId">
            <summary>
            Only for internal use (obsolete)
            </summary>
            <value>The datatype.</value>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.category">
            <summary>
            Instance category
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Category">
            <summary>
            Gets the the <see cref="T:TwinCAT.TypeSystem.DataTypeCategory"/> of the Instance.
            </summary>
            <value>The category.</value>
            <remarks>Corresponds to the <see cref="P:TwinCAT.TypeSystem.IDataType.Category"/></remarks>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.typeName">
            <summary>
            Datatype name.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.TypeName">
            <summary>
            Gets the name of the <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see> that is used for this <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.resolvedDataType">
            <summary>
            Resolved / Cached Data Type
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.DataType">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> of the <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.TryResolveType">
            <summary>
            Tries to resolve the <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <returns><c>true</c> if the type could be resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.TwinCAT#TypeSystem#IBindable2#ResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Tries to resolve the Bindable Symbol/DataType asynchronously.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The DataType/Symbol binder to be used.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.TwinCAT#TypeSystem#IBindable2#ResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Resolves the Bindable Symbol/DataType synchronously.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the bindable can be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.comment">
            <summary>
            Instance comment.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Comment">
            <summary>
            Gets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.instanceName">
            <summary>
            Name of the instance.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.InstanceName">
            <summary>
            Gets the name of the instance (without periods (.)
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.InstancePath">
            <summary>
            Gets the relative / absolute access path to the instance (with periods (.))
            </summary>
            <value>The instance path.</value>
            <remarks>If this path is relative or absolute depends on the context. <see cref="T:TwinCAT.TypeSystem.IMember"/> are using relative paths, <see cref="T:TwinCAT.TypeSystem.ISymbol"/>s are using absolute ones.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.HasValue">
            <summary>
            Gets a value indicating whether this instance has a value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.staticAddress">
            <summary>
            The static address
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsStatic">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IInstance" /> is static.
            </summary>
            <value>
              <c>true</c> if this instance is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance._isProperty">
            <summary>
            Indicates Property Fields
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsProperty">
            <summary>
            Gets a value indicating whether <see cref="T:TwinCAT.TypeSystem.IInstance" /> is a property.
            </summary>
            <value><c>true</c> if this instance is a property; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsBitType">
            <summary>
            Gets a value indicating whether this instance is not basing on a full DataType but instead of some sort of bit mapping
            </summary>
            <value>
            <c>true</c> if this instance is bit mapping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsReadOnly">
            <summary>
            Indicates that this instance is read only.
            </summary>
            <remarks>
            Actually, this Flag is restricted to TcCOM-Objects readonly Parameters. Within the PLC this is used for the ApplicationName and
            ProjectName of PLC instances.
            Write-Access on these Modules will create an <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceAccessDenied"/> error.
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsPersistent">
            <summary>
            Indicates that this instance is persistent.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsTcComInterfacePointer">
            <summary>
            Indicates that this instance is a TcComInterfacePointer.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsTypeGuid">
            <summary>
            Indicates that this instance has set TypeGuid flag.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsReference">
            <summary>
            Gets a value indicating whether this instance is reference.
            </summary>
            <value><c>true</c> if this instance is reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.IsPointer">
            <summary>
            Gets a value indicating whether this instance is reference.
            </summary>
            <value><c>true</c> if this instance is reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.ContextMask">
            <summary>
            Gets the context mask of this instance.
            </summary>
            <remarks>The Size of the internal data is 4-Bit</remarks>
        </member>
        <member name="F:TwinCAT.Ads.TypeSystem.Instance.attributes">
            <summary>
            The attributes
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.SetAttributes(TwinCAT.TypeSystem.TypeAttributeCollection)">
            <summary>
            Sets the type attributes
            </summary>
            <param name="coll">The attributes.</param>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.Instance.Attributes">
            <summary>
            Gets the Type Attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.SetContextMask(System.Byte)">
            <summary>
            Sets the context mask.
            </summary>
            <param name="contextMask">The context mask.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">contextMask</exception>
        </member>
        <member name="M:TwinCAT.Ads.TypeSystem.Instance.ResolveType(TwinCAT.TypeSystem.DataTypeResolveStrategy)">
            <summary>
            Resolves this this DataType (if Alias/Reference)
            </summary>
            <param name="type">The type.</param>
            <returns>Resolved IDataType.</returns>
            <remarks>This interface is used for automatic Resolution of Alias/Reference within symbols.</remarks>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.AdsDataTypeArrayInfo">
            <summary>
            Array definition for a single dimension.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsDataTypeArrayInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsDataTypeArrayInfo"/> class.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsDataTypeArrayInfo.#ctor(TwinCAT.TypeSystem.StringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsDataTypeArrayInfo" /> class.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsDataTypeArrayInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsDataTypeArrayInfo"/> class.
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="elements">The elements.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsDataTypeArrayInfo.Unmarshal(TwinCAT.TypeSystem.IStringMarshaler,System.ReadOnlySpan{System.Byte})">
            <summary>
            Unmarshals data from the span into this <see cref="T:TwinCAT.Ads.AdsDataTypeArrayInfo"/>,
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="span">The read buffer.</param>
            <returns>A tuple that contains the data validity plus the read bytes.</returns>
            <remarks>This method should try to resync the readBytes result to the next valid readable object. Usually
            read structures contain their size as first element. If the Read is not valid, than the Unmarshalled object should be ignored.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsDataTypeArrayInfo.Marshal(TwinCAT.TypeSystem.IStringMarshaler,System.Span{System.Byte})">
            <summary>
            Marshals the content of the <see cref="T:TwinCAT.Ads.AdsDataTypeArrayInfo"/>.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsDataTypeArrayInfo.MarshalSize(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Gets the marshal size of  the <see cref="T:TwinCAT.Ads.AdsDataTypeArrayInfo"/>.
            </summary>
            <param name="marshaler">The symbol string marshaler</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ads.AdsDataTypeArrayInfo.LowerBound">
            <summary>
            Gets the lower bound.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsDataTypeArrayInfo.Elements">
            <summary>
            Gets the number of elements.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsArrayDimensionsInfo">
            <summary>
            Class AdsArrayDimensionsInfo.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsArrayDimensionsInfo._dims">
            <summary>
            The dimension information.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsArrayDimensionsInfo.#ctor(TwinCAT.Ads.AdsDataTypeArrayInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsArrayDimensionsInfo"/> class.
            </summary>
            <param name="dims">The dims.</param>
            <exception cref="T:System.ArgumentNullException">dims</exception>
        </member>
        <member name="P:TwinCAT.Ads.AdsArrayDimensionsInfo.Elements">
            <summary>
            Get the number of Elements over all Dimensions
            </summary>
            <value>The elements.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsArrayDimensionsInfo.GetArrayElementCount(TwinCAT.Ads.AdsDataTypeArrayInfo[])">
            <summary>
            Gets the number of elements over all dimensions
            </summary>
            <param name="arrayInfo">The array information.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ads.AdsArrayDimensionsInfo.LowerBounds">
            <summary>
            Gets the lower bounds.
            </summary>
            <value>The lower bounds.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsArrayDimensionsInfo.UpperBounds">
            <summary>
            Gets the upper bounds.
            </summary>
            <value>The upper bounds.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsArrayDimensionsInfo.DimensionElements">
            <summary>
            Gets the dimension elements.
            </summary>
            <value>The dimension elements.</value>
        </member>
        <member name="T:TwinCAT.Ads.ValueAccess.AdsConnectionRestore">
            <summary>
            Restores an AdsConnection.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase">
            <summary>
            Abstract base class for an AdsValue accessor.
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.RpcNotificationAccessorBase" />
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorValueAny" />
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.ISession,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase" /> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="session">The session.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.IConnection,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase" /> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="connection">The connection.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase.TryReadAnyValue(TwinCAT.TypeSystem.ISymbol,System.Type,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to read the value of the symbol and returns the value as instance of the specified type.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">The value type.</param>
            <param name="value">The value.</param>
            <param name="utcReadTime">The UTC read time.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase.TryWriteAnyValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to write the data within the value object as the symbol value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="utcReadTime">The UTC read time.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase.TryUpdateAnyValue(TwinCAT.TypeSystem.ISymbol,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to read the value of the symbol and updates the referenced value object with that data
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="utcReadTime">The UTC read time.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessorBase.UpdateAnyValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Reads the value of the symbol and updates the referenced value object with that data.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultReadValueAccess&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ValueAccess.AdsValueAccessor">
            <summary>
            Value accessor class (accessing ADS Symbol values)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.#ctor(TwinCAT.Ads.IAdsConnection,TwinCAT.ValueAccess.ValueAccessMode,TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ValueAccess.AdsValueAccessor" /> class.
            </summary>
            <param name="connection">The Connection.</param>
            <param name="accessMethod">The access method.</param>
            <param name="valueFactory">The value factory.</param>
            <param name="defaultSettings">The default settings.</param>
            <exception cref="T:System.ArgumentNullException">adsClient</exception>
            <exception cref="T:System.ObjectDisposedException">AdsClient</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Ads.ValueAccess.AdsValueAccessor"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ValueAccess.AdsValueAccessor.disposed">
             <summary>
            Indicates that the <see cref="T:TwinCAT.Ads.ValueAccess.AdsValueAccessor"/> is disposed.
             </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.adsClient_AdsNotification(System.Object,TwinCAT.Ads.AdsNotificationEventArgs)">
            <summary>
            Handles the AdsNotification event of the adsClient control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwinCAT.Ads.AdsNotificationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.adsClient_AdsNotificationError(System.Object,TwinCAT.Ads.AdsNotificationErrorEventArgs)">
            <summary>
            Handles the AdsNotificationError event of the adsClient control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwinCAT.Ads.AdsNotificationErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.onAdsNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.AdsNotificationEventArgs)">
            <summary>
            Handler function for the AdsNotification
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="args">The <see cref="T:TwinCAT.Ads.AdsNotificationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:TwinCAT.Ads.ValueAccess.AdsValueAccessor.Connection">
            <summary>
            Gets the ADS Connection
            </summary>
            <value>The client.</value>
        </member>
        <member name="F:TwinCAT.Ads.ValueAccess.AdsValueAccessor._address">
            <summary>
            The address (cached)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryReadRaw(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads a value from the specified ADS address
            </summary>
            <param name="symbol">The address.</param>
            <param name="value">Raw value</param>
            <param name="readTime">The read time snapshot.</param>
            <returns>AdsErrorCode.</returns>
            <exclude />
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryReadByHandle(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Int32@)">
            <summary>
            Tries to read the value by symbol
            </summary>
            <param name="address">The Symbol.</param>
            <param name="value">The Memory location</param>
            <param name="read">Number of read bytes.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ArgumentNullException">address</exception>
            <exception cref="T:TwinCAT.AdsException">Connection not established!</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.ReadRawAsync(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read a Symbol value asynchronously as bytes .
            </summary>
            <param name="symbol">The symbol instance.</param>
            <param name="destination">The destination / value memory.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess"/> result contains the
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/>) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.ReadByHandleRawAsync(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the value by Symbol.
            </summary>
            <param name="address">The address.</param>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ArgumentNullException">address</exception>
            <exception cref="T:TwinCAT.AdsException">Connection not established!</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryWriteByHandle(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the raw memory data to the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">The data.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.ArgumentNullException">address</exception>
            <exception cref="T:TwinCAT.AdsException">Connection not established!</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.WriteByHandle(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the raw memory data to the specified symbol.
            </summary>
            <param name="symbol">The address.</param>
            <param name="data">The data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWriteAccess&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">address</exception>
            <exception cref="T:TwinCAT.AdsException">Connection not established!</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryInvokeRpcMethod(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Invokes the RPC Method and returns its <paramref name="returnValue" />.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters spec.</param>
            <param name="retSpec">The ret spec.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="returnValue">The return value (Returns Null vor 'void' RpcMethods)</param>
            <param name="timeStamp">The invoke time snapshot.</param>
            <returns>Error code. 0 represents succeed.</returns>
            <exception cref="T:System.ArgumentNullException">instance</exception>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:TwinCAT.AdsException">Connection not established!</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the RPC Method asynchronously and returns its RPC Return value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters spec.</param>
            <param name="retSpec">The ret spec.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> parameter contains the return value (optionally)
            (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue" />) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
            <exception cref="T:System.ArgumentNullException">instance</exception>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:TwinCAT.AdsException">Connection not established!</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryReadArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads an array element value as bytes.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices specify which element to read.</param>
            <param name="destination">The destination / value memory.</param>
            <param name="timeStamp">The read time snapshot</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.ReadArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the array element value as bytes asynchronously.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices, which specify the element to read.</param>
            <param name="destination">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadArrayElementRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess" /> result contains the
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value" />) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryWriteRaw(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes the symbol value from source memory location to the ADS Device.
            </summary>
            <param name="symbol">The symbol instance.</param>
            <param name="value">The source memory location.</param>
            <param name="timeStamp">The write timestamp.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.WriteRawAsync(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the symbol value asynchronously from source memory location to the ADS Device.
            </summary>
            <param name="symbol">The symbol instance.</param>
            <param name="sourceData">The source value from memory location.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> result contains the
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryWriteArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes an array element value from raw memory asynchronously to the ADS Device.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="sourceData">The data to write to the ADS Device./>.</param>
            <param name="timeStamp">Write time / timestamp</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.WriteArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes an array element value from raw memory asynchronously to the ADS Device.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="sourceData">The element value to write in raw memory format.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> result contains the
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.calcAccessMethod(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Calculates the access method.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>ValueAccessMode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.calcAccessMethodByAddress(TwinCAT.TypeSystem.IProcessImageAddress)">
            <summary>
            Calculates the access method dependent on Symbol Type and <see cref="T:TwinCAT.ValueAccess.ValueAccessMode"/> setting.
            </summary>
            <param name="symbolAddress">The array symbol.</param>
            <returns>ValueAccessMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.OnRegisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.INotificationSettings)">
            <summary>
            Registers a Notification on the <see cref="T:TwinCAT.TypeSystem.ISymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentNullException">
            symbol
            or
            settings
            </exception>
            <exclude />
            <remarks>Only one Notification is allowed on the symbol. On case of double announcement, we set the Notification parameters
            to the higher priority.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.OnUnregisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes)">
            <summary>
            Unregisters a Notification from the <see cref="T:TwinCAT.TypeSystem.ISymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exclude />
        </member>
        <member name="F:TwinCAT.Ads.ValueAccess.AdsValueAccessor._notificationStream">
            <summary>
            AdsStream for notification (dynamically resized)
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.resizeNotificationStream(System.Int32)">
            <summary>
            Resizes the notification stream.
            </summary>
            <param name="length">The requested length of the stream in bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.RegisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Registers the notification.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">The type.</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentException">Symbol size exceeds 64K for notification!</exception>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.UnregisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes)">
            <summary>
            Unregisters the notification.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if handle is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.Ads.ValueAccess.AdsValueAccessor.AccessMethod">
            <summary>
            Gets or sets the value access Method
            </summary>
            <value>The access method.</value>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryReadAnyValue(TwinCAT.TypeSystem.ISymbol,System.Type,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to read the value of the symbol and returns the value as instance of the specified type.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">The value type.</param>
            <param name="value">The value.</param>
            <param name="utcReadTime">The UTC read time.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryUpdateAnyValue(TwinCAT.TypeSystem.ISymbol,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to read the value of the symbol and updates the referenced value object with that data
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="utcReadTime">The UTC read time.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueAccess.AdsValueAccessor.TryWriteAnyValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to write the data within the value object as the symbol value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="utcWriteTime">The UTC write time.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeResolverExtension.GetManagedType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Gets the managed .NET representation of the data type (or NULL)
            </summary>
            <param name="dataType">Type of the data.</param>
            <returns>System.Nullable&lt;Type&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeResolverExtension.TryGetManagedType(TwinCAT.TypeSystem.IDataType,System.Type@)">
            <summary>
            Tries to get the managed .NET representation of the data type.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if the dataType is resolved to a managed type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">dataType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolValueEncodingExtension.TryGetValueEncoding(TwinCAT.TypeSystem.IAttributedInstance,System.Text.Encoding@)">
            <summary>
            Tries to get the Encoding of the symbol instance.
            </summary>
            <param name="instance">The instance.</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if encoding found on the symbol instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolValueEncodingExtension.GetValueEncoding(TwinCAT.TypeSystem.IAttributedInstance)">
            <summary>
            Gets the encoding.
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.Text.Encoding or NULL if nothing specified.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler">
            <summary>
            Class SymbolicAnyTypeMarshaler.
            </summary>
            <remarks>This is the most sophisticated marshaler. It is able to marshal when symbolic information is available and can use PInvoke and Reflection.</remarks>
            <exclude/>
            <seealso cref="T:TwinCAT.TypeSystem.AnyTypeMarshaler"/>
            <seealso cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.DefaultValueEncoding">
            <summary>
            Gets the default value encoding like specified by the used ValueAccessor.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.IDataType,System.Type)">
            <summary>
            Determines whether this instance can marshal the specified data type.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="valueType">Value Type as Unmarshalling target (optional). If null, the marshaller can decide by himself.</param>
            <returns><c>true</c> if this instance can marshal the specified data type; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">dataType</exception>
            <exception cref="T:System.ArgumentException">Marshalling mismatch! - valueType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.TryGetManagedType(TwinCAT.TypeSystem.IDataType,System.Type@)">
            <summary>
            Tries to get the managed representation of the <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if the data type is resolved to a managed type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.MarshalSize(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Get the marshalling size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/>/value in bytes.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.ReadOnlySpan{System.Byte},System.Type,System.Object@)">
            <summary>
            Unmarshals the data from memory/span to a managed value.
            </summary>
            <param name="dataType">The type information of the data.</param>
            <param name="encoding">The used string encoding.</param>
            <param name="valueType">The managed type to create the value from.</param>
            <param name="data">The source memory / span.</param>
            <param name="value">The value.</param>
            <returns>The number of unmarshaled bytes.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.UnmarshalArray(TwinCAT.TypeSystem.IArrayType,System.Text.Encoding,System.Type,System.ReadOnlySpan{System.Byte},System.Int32,System.Object@)">
            <summary>
            Creates a managed array and initializes it with information from ADS Read
            </summary>
            <param name="arrType">The array type (symbolic information)</param>
            <param name="encoding">The encoding.</param>
            <param name="managedType">The managed array type.</param>
            <param name="data">The source data / span.</param>
            <param name="jagLevel">The jag level (only used for recursive jagArray calls)</param>
            <param name="value">The unmarshaled value.</param>
            <returns>Read bytes</returns>
            <exception cref="T:System.ArgumentNullException">arrType
            or
            managedType</exception>
            <exception cref="T:System.ArgumentException">type
            or
            type
            or
            type
            or
            Cannot convert data type of symbol to this type. - type</exception>
            <exception cref="T:System.ArgumentException">type
            or
            type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.IsZeroBasedArray(System.Array)">
            <summary>
            Determines whether the array is Zero based index in all dimensions.
            </summary>
            <param name="array">The array.</param>
            <returns><c>true</c> if [is zero based array] [the specified array]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.MarshalArray(TwinCAT.TypeSystem.IArrayType,System.Text.Encoding,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals an array value to memory / span.
            </summary>
            <param name="arrayType">The ADS type.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">Managed Array value.</param>
            <param name="data">The data.</param>
            <returns>The number of marshaled bytes.</returns>
            <exception cref="T:System.ArgumentException">type</exception>
            <exception cref="T:System.ArgumentException">type
            or
            Cannot convert ads array type of symbol to this type.;type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.UnmarshalBits(TwinCAT.TypeSystem.IDataType,System.Int32,System.Text.Encoding,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Converts byte data to an bitset object (bit access)
            </summary>
            <param name="type">The datatype.</param>
            <param name="bitOffset">The bit offset.</param>
            <param name="encoding">The encoding.</param>
            <param name="data">The data.</param>
            <param name="result">The result.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentNullException">type
            or
            data</exception>
            <exception cref="T:System.ArgumentException">BitSize not supported! BitSize must be 1 or dividable by 8!</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.checkArrayDimensions(System.Array,TwinCAT.Ads.AdsDataTypeArrayInfo[],System.Boolean)">
            <summary>
            Check Array Dimensions  
            </summary>
            <param name="array">The array.</param>
            <param name="arrayInfo">The array information.</param>
            <param name="exact">Checks bounds exactly.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.createValue(TwinCAT.TypeSystem.IDataType,System.Type)">
            <summary>
            Creates an instance o the specified target type.
            </summary>
            <param name="sourceType">Source Type.</param>
            <param name="targetType">Target Type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.InitializeInstanceValue(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object@,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes the specified targetInstance value with the raw byte data.
            </summary>
            <param name="type">The source symbol.</param>
            <param name="encoding">The encoding.</param>
            <param name="targetInstance">The target instance.</param>
            <param name="source">The source data.</param>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.initializeInstanceValue(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Type,System.Object,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes the specified target instance with the raw byte data.
            </summary>
            <param name="dataType">The type.</param>
            <param name="encoding">The forced encoding or NULL.</param>
            <param name="targetInstance">The target instance.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetMember">The target member.</param>
            <param name="source">The source data.</param>
            <exception cref="T:System.ArgumentException">Type is not an enum type!;type</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.initializeInstanceValue(System.Object,System.Object,System.Object)">
            <summary>
            Initializes the instance value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.MarshalStruct(TwinCAT.TypeSystem.IStructType,System.Text.Encoding,System.Object,System.Span{System.Byte})">
            <summary>
            Write (Managed) Struct value to ADS.
            </summary>
            <param name="structType">Type of the structure.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">type
            or
            type</exception>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler._checkedTypesDict">
            <summary>
            Cache of already checked 'Any' proxy types.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.CanMarshalByReflection(TwinCAT.TypeSystem.IDataType,System.Type,System.Exception@)">
            <summary>
            Checks whether the type can be marshalled by reflection.
            </summary>
            <param name="type">The type.</param>
            <param name="targetType">Type of the target.</param>
            <param name="error">The error.</param>
            <returns><c>true</c> if this instance [can marshal by reflection] the specified type; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            targetType
            </exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.MarshalPrimitive(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Span{System.Byte})">
            <summary>
            Sets the type of the primitive.
            </summary>
            <param name="dataType">The datatype.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <param name="data">The destination data.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">dataType</exception>
            <exception cref="T:System.ArgumentNullException">primitiveType</exception>
            <exception cref="T:System.ArgumentException">Cannot convert datatype of symbol to this type.;type
            or
            Unexpected datatype. Cannot convert datatype of symbol to this type.;type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object)">
            <summary>
            Determines whether this instance can marshal the specified value to the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if this instance can marshal the specified type; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.Marshal(TwinCAT.TypeSystem.IDataType,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the specified data type.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="encoding">The encoding.</param>
            <param name="value2">The value.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.Marshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the specified data type.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="encoding">The encoding.</param>
            <param name="value2">The value.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.TryMarshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Span{System.Byte},System.Int32@)">
            <summary>
            Tries to marshal the specified value 
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <param name="data">The data.</param>
            <param name="marshalledBytes">The marshalled bytes.</param>
            <returns><c>true</c> if the dataType is marshaled, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.IAttributedInstance,System.Type)">
            <summary>
            Determines whether this instance can marshal the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">Type of the value.</param>
            <returns><c>true</c> if this instance can marshal the specified symbol; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.GetSymbolValueEncoding(TwinCAT.TypeSystem.IAttributedInstance)">
            <summary>
            Gets the symbol value encoding.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>Encoding.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.IAttributedInstance,System.Object)">
            <summary>
            Determines whether this instance can marshal the specified value to the specified type.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if this instance can marshal the specified symbol; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.TryMarshal(TwinCAT.TypeSystem.IAttributedInstance,System.Object,System.Span{System.Byte},System.Int32@)">
            <summary>
            Tries to marshal the specified value represented by the specified symbol to the destination buffer.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
            <param name="marshalledBytes">The marshalled bytes.</param>
            <returns><c>true</c> if the symbol is marshaled, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.Marshal(TwinCAT.TypeSystem.IAttributedInstance,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the specified symbol value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination span/memory.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.MarshalSize(TwinCAT.TypeSystem.IInstance)">
            <summary>
            Gets the marshalling size of the symbol/value
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolicAnyTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.IAttributedInstance,System.ReadOnlySpan{System.Byte},System.Type,System.Object@)">
            <summary>
            Unmarshals the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="source">The source.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The value.</param>
            <returns>The number of the unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.AnyTypeMarshaler">
            <summary>
            AnyTypeMarshaler
            </summary>
            <remarks>
            Because this Converter/Marshaller solely works with .NET Types, it is only able to marshal PrimitiveTypes and ARRAY OF PrimitiveTypes.
            A little additional metadata is the args parameter that is used for Arrays and Strings to define the length respectively the Array size.
            This marshaler is used for the cases, where the .NET DataType for marshalling is given (ANY_TYPE marshalling, ANY_TYPE Notifications).
            </remarks>
            <exclude/>
            <seealso cref="T:TwinCAT.TypeSystem.AnyTypeMarshaler"/>
            <seealso cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeMarshaler"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.Marshal(System.Object,System.Int32[],System.Text.Encoding,System.Span{System.Byte})">
            <summary>
            Marshals the specified any value.
            </summary>
            <param name="anyValue">The value.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The destination memory.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">String arrays without Length specification are not are not supported! - args
            or
            Value string is too large! - anyValue
            or
            Too many values in string array! - anyValue
            or
            String at Index '{0}' is too long! - anyValue</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.Unmarshal(System.Type,System.Int32[],System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.Object@)">
            <summary>
            Unmarshals the specified type from memory to value object.
            </summary>
            <param name="anyType">Any type.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <param name="source">The source memory.</param>
            <param name="value">The value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">type
            or
            anyType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.MarshalSize(System.Type,System.Int32[],System.Text.Encoding)">
            <summary>
            Gets the MarshalSize of the specified type.
            </summary>
            <param name="anyType">The 'Any' type to marshal</param>
            <param name="args">The 'Any' type parameters</param>
            <param name="encoding">The encoding.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">type
            or
            type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.MarshalValueSize(System.Object,System.Int32[],System.Text.Encoding)">
            <summary>
            Gets the marshalling size of the value in bytes.f
            </summary>
            <param name="anyValue">Any value.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <returns>The marshal size</returns>
            <exception cref="T:System.ArgumentNullException">anyValue</exception>
            <exception cref="T:System.ArgumentException">Value string is too large! - anyValue</exception>
            <exception cref="T:System.ArgumentException">Too many values in string array! - anyValue</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Determines whether this instance can marshal the specified AnyType
            </summary>
            <param name="spec">The spec.</param>
            <returns><c>true</c> if this instance can marshal the specified spec; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">spec</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.CanMarshal(System.Type,System.Int32[],System.Text.Encoding)">
            <summary>
            Determines whether this instance can marshal the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if this instance can marshal the specified value type; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">valueType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.CanMarshalValue(System.Object,System.Int32[],System.Text.Encoding)">
            <summary>
            Determines whether this instance can marshal the specified any value.
            </summary>
            <param name="anyValue">Any value.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if this instance can marshal the specified any value; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">anyValue</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.Unmarshal``1(System.ReadOnlySpan{System.Byte},System.Text.Encoding,``0@)">
            <summary>
            Unmarshals the specified source span/memory and creates the value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The source span/memory.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.CanMarshal(System.Type)">
            <summary>
            Determines whether this instance can marshal the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if this instance can marshal the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.CanMarshalValue(System.Object)">
            <summary>
            Determines whether this instance can marshal the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if this instance can marshal the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.Marshal(System.Object,System.Text.Encoding,System.Span{System.Byte})">
            <summary>
            Marshals the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.MarshalValueSize(System.Object,System.Text.Encoding)">
            <summary>
            Gets the MarshalSize of the value.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <returns>The Number of marshalling bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeMarshaler.Unmarshal(System.Type,System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.Object@)">
            <summary>
            Unmarshals the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="data">The data.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.BitTypeConverter">
            <summary>
            Class BitTypeConverter.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.BitTypeConverter.Marshal(TwinCAT.TypeSystem.IDataType,System.Object,System.Span{System.Byte})">
            <summary>
            Converts a Bit type value to bytes.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="marshal">The marshal.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentException">type</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bitSize</exception>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.BitTypeConverter.Marshal(System.Int32,System.Object,System.Span{System.Byte})">
            <summary>
            Converts a Bit type value to bytes.
            </summary>
            <param name="bitSize">Bit size of the underlying data type.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination memory.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">bitSize</exception>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bitSize</exception>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.BitTypeConverter.Unmarshal(System.Int32,System.ReadOnlySpan{System.Byte},System.Int32,System.Text.Encoding,System.Object@)">
            <summary>
            Converts a BitSet represented in Byte[] to DotNetObject.
            </summary>
            <param name="bitSize">Size of the Bitset in bits.</param>
            <param name="data">The data to convert.</param>
            <param name="bitOffset">The bit offset where the Bitset data is in data bytes.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value.</param>
            <returns>bool, ushort, uint, ulong, BitArray dependent on bitSize.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">bitSize</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">data</exception>
            <exception cref="T:System.ArgumentException">Data array to small! - data</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">bitSize
            or
            data</exception>
            <exception cref="T:System.ArgumentNullException">data</exception>
            <exception cref="T:System.ArgumentException">Data not large enough!;data</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.BitTypeConverter.ToBinary``1(``0)">
            <summary>
             Converts a numeric value to <see cref="T:System.Collections.BitArray"/>
            </summary>
            <typeparam name="T">Type of Numeric value (msut support <see cref="T:System.IConvertible"/></typeparam>
            <param name="numeric">The numeric value.</param>
            <returns>BitArray.</returns>
            <exception cref="T:System.ArgumentException">Type '{0}' not supported!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.BitTypeConverter.ToNumeric``1(System.Collections.BitArray)">
            <summary>
            Converts the <see cref="T:System.Collections.BitArray"/> to a numeric value.
            </summary>
            <typeparam name="T">Type of Numeric value (must support <see cref="T:System.IConvertible"/></typeparam>
            <param name="binary">The binary.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">binary</exception>
            <exception cref="T:System.ArgumentException">binary</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.BitTypeConverter.ToNumeric(System.Type,System.Collections.BitArray)">
            <summary>
            Converts the specified <see cref="T:System.Collections.BitArray"/> to the specified numeric value type.
            </summary>
            <param name="tp">Type of the numeric value.</param>
            <param name="binary">Bit array.</param>
            <returns>Numeric value boxed as System.Object</returns>
            <exception cref="T:System.ArgumentException">Type '{0}' not supported!</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.MarshallingHelperExtension">
            <summary>
            Class MarshallingHelperExtension.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshallingHelperExtension.GetValueMarshalSize(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Gets the marshal size of the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshallingHelperExtension.GetValueMarshalSize(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Gets the marshal siize of the <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
            <param name="type">The type.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler">
            <summary>
            Converter class for all forms of Primitive Types
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.s_DefaultEncoding">
            <summary>
            Default Encoding (<see cref="P:TwinCAT.TypeSystem.StringMarshaler.DefaultEncoding"/>).
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.SetDefaultEncoding(System.Text.Encoding)">
            <summary>
            Sets the default encoding (Only for internal purposes!)
            </summary>
            <remarks>Changing the default is only intended as part of loading the SymbolUploadInfo, which defines
            how the standard strings are encoded.
            </remarks>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeMarshaler._encoding">
            <summary>
            The Encoding used by this <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.DefaultValueEncoding">
            <summary>
            Gets the (default) string Encoding of this <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/>
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.DefaultEncoding">
            <summary>
            Gets the default string value encoding.
            </summary>
            <value>The default string value encoding.</value>
            <remarks>By Default this is an ANSI Encoding specified in combination with the local Codepage.
            <seealso cref="P:TwinCAT.TypeSystem.StringMarshaler.DefaultEncoding"/>.
            </remarks>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeMarshaler._stringMarshaler">
            <summary>
            The internal <see cref="T:TwinCAT.TypeSystem.StringMarshaler"/>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/> class.
            </summary>
            <param name="encoding">The encoding.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.#ctor(System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/> class.
            </summary>
            <param name="encoding">The default encoding to be used.</param>
            <param name="stringConvertMode">The string convert mode.</param>
            <exception cref="T:System.ArgumentNullException">encoding</exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Default">
            <summary>
            Gets the default Converter (with the actual default encoding)
            </summary>
            <remarks>The default encoding can change with Uploading Symbol information, <see cref="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.DefaultEncoding"/></remarks>
            <value>The default marshaler.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.DefaultFixedLengthString">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/> initialized with default string encoding and <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>
            </summary>
            <value>The default fixed length string.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unicode">
            <summary>
            Gets an <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/> that is configured to Unicode for string marshaling.
            </summary>
            <value>The unicode.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.StringTerminatorSize">
            <summary>
            Gets the size of the string terminator '\0'
            </summary>
            <value>The size of the string terminator.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Encoding">
            <summary>
            The encoding used by this marshaler.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.IsPrimitiveType(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether the specified category is a primitive type
            </summary>
            <param name="cat">The category.</param>
            <returns><c>true</c> if [is primitive type] [the specified category]; otherwise, <c>false</c>.</returns>
            <remarks>Primitive types are types that are indicated with Primitive, String, SubRange, Enum, Pointer</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.IsPrimitive(TwinCAT.Ads.AdsDataTypeId)">
            <summary>
            Determines whether the specified type identifier is primitive.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns><c>true</c> if the specified type identifier is primitive; otherwise, <c>false</c>.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CreateFrom(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Creates <see cref="T:TwinCAT.TypeSystem.PrimitiveTypeMarshaler"/> from <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
            <remarks>PLC code contains STRING (Default Encoding) and WSTRING (Unicode Encoding) types, which are converted
            differently. This factory method creates the appropriate converter. </remarks>
            <param name="type">The type.</param>
            <returns>PrimitiveTypeConverter.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <seealso cref="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetStringEncoding(TwinCAT.TypeSystem.IDataType,System.Text.Encoding@)"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetStringEncoding(TwinCAT.TypeSystem.IDataType,System.Text.Encoding@)">
            <summary>
            Gets the <see cref="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.DefaultValueEncoding"/> from the <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if encoding found, <c>false</c> otherwise.</returns>
            <seealso cref="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CreateFrom(TwinCAT.TypeSystem.IDataType)"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.IsContainerType(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether the specified category is a container type.
            </summary>
            <param name="cat">The data type category.</param>
            <returns><c>true</c> if [is container type] [the specified category]; otherwise, <c>false</c>.</returns>
            <remarks>Container Types are Array, Structs and its derivates (Function,FunctionBlock and Program)</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(TwinCAT.Ads.AdsDataTypeId)">
            <summary>
            Determines the size of the specified data type.
            </summary>
            <param name="typeId">The TypeId.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tp</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.Int32,System.Text.Encoding,System.String@)">
            <summary>
            Unmarshals the specified byte data to a string value.
            </summary>
            <param name="source">The memory data to unmarshal.</param>
            <param name="strLen">Length of the string on fixed length strings, -1 otherwise.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <returns>The number of consumed bytes from the data array (System.Int32).</returns>
            <exception cref="T:System.ArgumentNullException">data</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset
            or
            encoding</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(TwinCAT.Ads.AdsDataTypeId,System.Boolean,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the specified source data to a managed value.
            </summary>
            <param name="typeId">The type ID.</param>
            <param name="isBitType">The type is handled as bit type..</param>
            <param name="source">The memory data to unmarshal.</param>
            <param name="val">The result value.</param>
            <returns>Number of consumed bytes (System.Int32).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tp</exception>
            <exception cref="T:System.ArgumentNullException">data
            or
            data</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset
            or
            tp</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetManagedType(TwinCAT.TypeSystem.IDataType,System.Type@)">
            <summary>
            Tries to get the managed type of the <see cref="T:TwinCAT.TypeSystem.IDataType"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if the managed type is resolved, <c>false</c> otherwise.</returns>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">Cannot unmarshal type '{0}'!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetManagedType(TwinCAT.Ads.AdsDataTypeId,System.Type@)">
            <summary>
            Tries to get the managed type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="tp">The tp.</param>
            <returns><c>true</c> if the type is resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetDataTypeId(System.Type,TwinCAT.Ads.AdsDataTypeId@)">
            <summary>
            Tries to get the managed type.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="tp">The tp.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.AdsDataTypeId"/> is determined, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.GetPrimitiveFlags(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Gets the primitive flags.
            </summary>
            <param name="type">The type.</param>
            <returns>PrimitiveTypeFlags.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.GetPrimitiveFlags(TwinCAT.Ads.AdsDataTypeId)">
            <summary>
            Gets the primitive flags.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns>PrimitiveTypeFlags.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.GetPrimitiveFlags(System.Type)">
            <summary>
            Gets the primitive flags.
            </summary>
            <param name="tp">The type identifier.</param>
            <returns>PrimitiveTypeFlags.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.IDataType,System.ReadOnlySpan{System.Byte},System.Type,System.Object@)">
            <summary>
            Unmarshals a primitive value from source buffer and creates a managed value.
            </summary>
            <param name="dataType">The data type.</param>
            <param name="source">The data.</param>
            <param name="valueType">Type of the value.</param>
            <param name="value">The primitive value.</param>
            <returns>The number of read bytes.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">source
            or
            ValueType parameter mismatches dataTypes managed type! - valueType</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">Cannot map to .NET Value!</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">type</exception>
            <exception cref="T:System.ArgumentNullException">Type is not primitive!
            or
            Cannot map to .NET Value!
            or
            Cannot map to .NET Value!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.IDataType,System.ReadOnlySpan{System.Byte},System.Type,System.Text.Encoding,System.Object@)">
            <summary>
            Unmarshals a primitive value from source buffer and creates a managed value.
            </summary>
            <param name="dataType">The data type.</param>
            <param name="source">The data.</param>
            <param name="valueType">Type of the value.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The primitive value.</param>
            <returns>The number of read bytes.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">source
            or
            ValueType parameter mismatches dataTypes managed type! - valueType</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">Cannot map to .NET Value!</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">type</exception>
            <exception cref="T:System.ArgumentNullException">Type is not primitive!
            or
            Cannot map to .NET Value!
            or
            Cannot map to .NET Value!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal``1(System.ReadOnlySpan{System.Byte},``0@)">
            <summary>
            Unmarshals the specified memory data to a primitive value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The data.</param>
            <param name="val">The value.</param>
            <returns>The number of unmarshalled bytes.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal``1(System.ReadOnlySpan{System.Byte},System.Text.Encoding,``0@)">
            <summary>
            Unmarshals the specified memory data to a primitive value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="source">The data.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal``1(TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},``0@)">
            <summary>
            Unmarshals the specified data and creates a managed value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeSpecifier">Any type information.</param>
            <param name="data">The data.</param>
            <param name="val">The value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(System.Type,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the specified source data and returns a managed value.
            </summary>
            <param name="type">DataType.</param>
            <param name="source">The raw data..</param>
            <param name="val">The created value.</param>
            <returns>The Consumed/Unmarshaled bytes (System.Int32).</returns>
            <remarks>The <see cref="P:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.DefaultValueEncoding"/> will be used for strings.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(System.Type,System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.Object@)">
            <summary>
            Unmarshals the specified source data and returns a managed value.
            </summary>
            <param name="type">DataType.</param>
            <param name="data">The raw data..</param>
            <param name="encoding">The encoding to use for strings.</param>
            <param name="val">The created value.</param>
            <returns>The Consumed/Unmarshaled bytes (System.Int32).</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the specified type initialized by the source data.
            </summary>
            <param name="typeSpecifier">The type specifier.</param>
            <param name="data">The raw data..</param>
            <param name="val">The created value.</param>
            <returns>Consumed bytes (System.Int32).</returns>
            <exception cref="T:System.ArgumentNullException">tp
            or
            data</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset
            or
            tp</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(System.Type,System.Int32[],System.Text.Encoding)">
            <summary>
            Get the Marshal size of an array.
            </summary>
            <param name="type">The type.</param>
            <param name="dimElements">The dim elements.</param>
            <param name="encoding">The encoding.</param>
            <returns>The marshal size of the array in bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Gets the marshal size of the specified type in bytes.
            </summary>
            <param name="spec">The type specifier</param>
            <returns>Marshal size in bytes</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryMarshalArray(System.Object,System.Text.Encoding,System.Span{System.Byte},System.Int32@)">
            <summary>
            Marshals the Array to the Span/Memory destination.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The data.</param>
            <param name="marshalled">The number of marshalled bytes</param>
            <returns>
              <c>true</c> if the array is marshalled., <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">value - No ArrayType
            or
            value
            or
            value</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.UnmarshalArray(TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the (primitive) array.
            </summary>
            <param name="typeSpec">The type spec.</param>
            <param name="data">The data.</param>
            <param name="val">The value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">typeSpec</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">typeSpec</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.GetArrayLength(System.Type,System.Text.Encoding,System.Int32)">
            <summary>
            Gets the length of the array.
            </summary>
            <param name="arrayType">Type of the array.</param>
            <param name="encoding">The encoding.</param>
            <param name="marshalSize">Size of the marshal.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.UnmarshalBits(System.Type,System.ReadOnlySpan{System.Byte},System.Boolean[]@)">
            <summary>
            Unmarshals the specified bit-type initialized by source data.
            </summary>
            <param name="arrayType">Type of the array.</param>
            <param name="data">The raw data..</param>
            <param name="val">The created value.</param>
            <returns>Consumed bytes (System.Int32).</returns>
            <exception cref="T:System.ArgumentNullException">tp
            or
            data</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">tp
            or
            data</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.AnyTypeSpecifier,System.Boolean,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the specified type initialized by the source data.
            </summary>
            <param name="typeSpec">The type spec.</param>
            <param name="bitSize">if set to <c>true</c> [bit size].</param>
            <param name="data">The raw data..</param>
            <param name="val">The created value.</param>
            <returns>Consumed bytes (System.Int32).</returns>
            <exception cref="T:System.ArgumentNullException">typeSpec</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">data</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Marshal(TwinCAT.Ads.AdsDataTypeId,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the specified value to Span/Memory destination.
            </summary>
            <param name="typeId">The typeId.</param>
            <param name="value">The value.</param>
            <param name="destination">The memory destination.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentNullException">data</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalValueSize(System.Object,System.Text.Encoding)">
            <summary>
            Gets the (ADS) representation byte size of the value object.
            </summary>
            <param name="val">The object value.</param>
            <param name="encoding">The encoding.</param>
            <returns>Marshalled size of the object when transferred.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">val</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(System.Object)">
            <summary>
            Gets the (ADS) representation byte size of the value object.
            </summary>
            <param name="val">The object value.</param>
            <returns>Marshalled size of the object when transferred.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">val</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.IsMarshalledAsBitType(System.Type)">
            <summary>
            Determines whether the managed type will be Marshalled as bit type
            </summary>
            <param name="managedType">Type of the managed.</param>
            <returns><c>true</c> if [is marshalled as bit type] [the specified managed type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(System.Text.Encoding,System.Int32)">
            <summary>
            Gets the marshal size of the string given by its length.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="strLen">Length of the string.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(System.Int32)">
            <summary>
            Gets the marshal size of the string given by its length.
            </summary>
            <param name="strLen">Length of the string.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(System.String)">
            <summary>
            Gets the marshal size of the string.
            </summary>
            <param name="value">The string value.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether this instance can marshal the <see cref="T:TwinCAT.TypeSystem.DataTypeCategory"/>
            </summary>
            <param name="category">The data type category</param>
            <returns><c>true</c> if this instance can marshal the specified category; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object)">
            <summary>
            Determines the specified value can be marshalled to the specified datatype
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if this instance can marshal the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Determines the specified type can be marshalled.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if this instance can marshal the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanMarshal(System.Type)">
            <summary>
            Determines whether ADS (AnyType Marshalling) can marshal the specified data type.
            </summary>
            <param name="type">The Managed data type.</param>
            <returns><c>true</c> if this instance can marshal the specified data type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanMarshalValue(System.Object)">
            <summary>
            Determines whether this instance can marshal the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if this instance can marshal the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Determines whether this instance can marshal the specified AnyType
            </summary>
            <param name="spec">The spec.</param>
            <returns><c>true</c> if this instance can marshal the specified spec; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanMarshal(TwinCAT.Ads.AdsDataTypeId)">
            <summary>
            Determines whether this instance can marshal the specified type identifier.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns><c>true</c> if this instance can marshal the specified type identifier; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetStringMarshalSize(System.Int32,System.Text.Encoding,System.Int32@)">
            <summary>
            Gets the MarshalSize of a string of the specified length.
            </summary>
            <param name="strLen">Length of the string.</param>
            <param name="encoding">The encoding.</param>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if the marshal size could be calculated, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetStringMarshalSize(System.String,System.Text.Encoding,System.Int32@)">
            <summary>
            Gets the (AdsMarshalling) Size of the specified string
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if the marshal size could be calculated, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetArrayMarshalSize(TwinCAT.TypeSystem.AnyTypeSpecifier,System.Int32@)">
            <summary>
            Gets the (AdsMarshalling) Size of the specified type.
            </summary>
            <param name="anyType">The managed Data type to be marshalled via ADS.</param>
            <param name="size">The size.</param>
            <returns><c>true</c> if the marshal size could be calculated, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">anyType</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">anyType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetMarshalSize(TwinCAT.TypeSystem.AnyTypeSpecifier,System.Int32@)">
            <summary>
            Tries to get the marshal size of the specified data type.
            </summary>
            <param name="anyType">Any type.</param>
            <param name="size">The marshal size of the type.</param>
            <returns><c>true</c> if the marshal size could be determined, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">anyType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetMarshalSize(System.Type,System.Text.Encoding,System.Int32@)">
            <summary>
            Gets the MarshalSize of the specified managed type.
            </summary>
            <param name="dataType">The managed Data type to be marshalled via ADS.</param>
            <param name="encoding">The encoding.</param>
            <param name="size">The size.</param>
            <returns><c>true</c> if marshaling is possible, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">dataType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetMarshalValueSize(System.Object,System.Text.Encoding,System.Int32@)">
            <summary>
            Gets the MarshalSize of the specified value.
            </summary>
            <param name="value">The managed Data type to be marshalled via ADS.</param>
            <param name="encoding">The encoding.</param>
            <param name="size">The size.</param>
            <returns>
              <c>true</c> if marshalling size can be determined, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryGetMarshalValueSize(System.Object,System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode,System.Int32@)">
            <summary>
            Gets the MarshalSize of the specified value
            </summary>
            <param name="value">The managed Data type to be marshalled via ADS.</param>
            <param name="encoding">The encoding.</param>
            <param name="convertMode">The string convert mode.</param>
            <param name="size">The marshalling size in bytes.</param>
            <returns><c>true</c> if marshalling size can be determined, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
            <exception cref="T:System.ArgumentNullException">val</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(System.Type)">
            <summary>
            Gets the MarshalSize of the specified managed type.
            </summary>
            <param name="dataType">Type of the data.</param>
            <returns>int.</returns>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">$"Cannot marshal dotnet type '{dataType.Name}'!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryMarshal(System.Object,System.Span{System.Byte},System.Int32@)">
            <summary>
            Marshals the value to the destination span/memory
            </summary>
            <param name="value">The value.</param>
            <param name="destination">The marshalling destination.</param>
            <param name="size">Number of marshalled bytes.</param>
            <returns>
              <c>true</c> if the marshalling succeeded, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">val</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryMarshal(System.Object,System.Text.Encoding,System.Span{System.Byte},System.Int32@)">
            <summary>
            Marshals the value to the destination span/memory
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The marshalling destination.</param>
            <param name="size">Number of marshalled bytes.</param>
            <returns>
              <c>true</c> if value is written into the Memory (succeeded), <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">val</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryMarshal(TwinCAT.TypeSystem.IPointerType,System.Text.Encoding,System.Object,System.Int32,System.Span{System.Byte},System.Int32@)">
            <summary>
            Marshals the value/type to span/memory.
            </summary>
            <param name="pointerType">The type.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <param name="lengthIs">Lenght of the value in bytes.</param>
            <param name="destination">The destination memory.</param>
            <param name="marshaledBytes">The number of marshaled bytes.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">pointerType</exception>
            <exception cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">type</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">destination</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryMarshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Span{System.Byte},System.Int32@)">
            <summary>
            Marshals the value/type to span/memory.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value.</param>
            <param name="destination">The destination memory.</param>
            <param name="marshaledBytes">The number of marshaled bytes.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:System.ArgumentNullException">destination</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">val</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Marshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the value/type to span/memory.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value.</param>
            <param name="destination">The destination memory.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">value</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Marshal(TwinCAT.TypeSystem.IPointerType,System.Text.Encoding,System.Object,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshals the specified pointer type.
            </summary>
            <param name="pointerType">Type of the pointer.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value.</param>
            <param name="lengthIs">The length is.</param>
            <param name="destination">The destination.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Marshal(System.Object,System.Text.Encoding,System.Span{System.Byte})">
            <summary>
            Marshals the value to memory/span.
            </summary>
            <param name="val">The value.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The destination memory/span.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tp</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Marshal(System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the value to memory/span.
            </summary>
            <param name="val">The value.</param>
            <param name="destination">The destination memory/span.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">tp</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Convert``1(System.Object)">
            <summary>
            Converts the specified source value to the specified target type.
            </summary>
            <param name="sourceValue">The source value.</param>
            <returns>Value as targetType (System.Object).</returns>
            <exception cref="T:System.ArgumentNullException">tp</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified source value to the specified target type.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetType">Target type.</param>
            <returns>Value as targetType (System.Object).</returns>
            <exception cref="T:System.ArgumentNullException">tp</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanConvert(System.Object,System.Type)">
            <summary>
            Determines whether this instance can convert the specified source value.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetType">Type of the target.</param>
            <returns><c>true</c> if this instance can convert the specified source value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.CanConvert(System.Object,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Determines whether this instance can convert the specified source value.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetType">Type of the target.</param>
            <returns><c>true</c> if this instance can convert the specified source value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryConvert(System.Object,TwinCAT.TypeSystem.IDataType,System.Object@)">
            <summary>
            Try to convert the specified source value to the specified target type.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetType">The target type.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the source value could be converted to the target type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Try to convert the specified source value to the specified target type.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetType">The target type.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the source value could be converted to the target type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.GetArrayBounds(System.Array,System.Int32[]@,System.Int32[]@)">
            <summary>
            Gets the array bounds.
            </summary>
            <param name="array">The array.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="lengths">The lengths.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.TryCastArray(System.Array,System.Type,System.Object@)">
            <summary>
            Tries to cast the array.
            </summary>
            <param name="sourceValue">The source value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the source array coud be casted to the target type, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            sourceValue
            or
            targetValue
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">targetType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Marshal(System.String,System.Span{System.Byte})">
            <summary>
            Marshals the specified string value.
            </summary>
            <param name="value">The value.</param>
            <param name="destination">The destination span/memory.</param>
            <returns>Number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.String@)">
            <summary>
            Unmarshals a string from memory/span.
            </summary>
            <param name="source">The source memory/span.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The unmarshaled value.</param>
            <returns>The number of unmarshaled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.String@)">
            <summary>
            Unmarshals a string from memory/span.
            </summary>
            <param name="source">The source memory/span.</param>
            <param name="value">The unmarshaled value.</param>
            <returns>The number of unmarshaled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.MarshalSize(TwinCAT.TypeSystem.IStringType)">
            <summary>
            Gets the marshal size of the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <returns>Marshalling size of the string</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Marshal(TwinCAT.TypeSystem.IStringType,System.String,System.Span{System.Byte})">
            <summary>
            Marshals the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.PrimitiveTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.IStringType,System.ReadOnlySpan{System.Byte},System.String@)">
            <summary>
            Unmarshals the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <param name="source">The source memory/span.</param>
            <param name="value">The unmarshaled string value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException">
            <summary>
            Cannot access virtual Symbol
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException.#ctor(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.InsufficientAccessRightsException">
            <summary>
            Insufficient rights for access
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.InsufficientAccessRightsException.#ctor(TwinCAT.TypeSystem.IValueSymbol,TwinCAT.TypeSystem.SymbolAccessRights)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.InsufficientAccessRightsException" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="requested">The requested.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.InsufficientAccessRightsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.InsufficientAccessRightsException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.MarshalException">
            <summary>
            Common Marshalling Exception
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException" /> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(TwinCAT.TypeSystem.IDataType,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(TwinCAT.TypeSystem.IDataType,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException" /> class.
            </summary>
            <param name="source">The source dataType.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(TwinCAT.TypeSystem.IInstance,System.Type,System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="tp">The type.</param>
            <param name="member">The member.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(TwinCAT.TypeSystem.IDataType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException"/> class.
            </summary>
            <param name="target">The datatype information.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException"/> class.
            </summary>
            <param name="spec">The spec.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MarshalException.#ctor(TwinCAT.TypeSystem.IInstance,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MarshalException" /> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="typeName">Name of the type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollectionExtension.WhereAttributeValue(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol},System.String,System.String)">
            <summary>
            Filters the symbols collection for symbols with a specific Attribute value.
            </summary>
            <param name="coll">The coll.</param>
            <param name="attribute">The attribute.</param>
            <param name="value">The value.</param>
            <returns>IEnumerable&lt;ISymbol&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicSymbolsCollection">
            <summary>
            Dynamic (Expandable) Symbols collection.
            </summary>
            <remarks>The <see cref="T:TwinCAT.TypeSystem.DynamicSymbolsCollection" /> collection adds dynamically its child Symbols as Members (for access like "Main.Symbol")</remarks>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbolsCollection._symbols">
            <summary>
            Internal Symbol Collection
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.#ctor(TwinCAT.TypeSystem.Generic.SymbolCollection{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicSymbolsCollection" /> class (for internal use only)
            </summary>
            <param name="symbols">The symbols.</param>
            <exception cref="T:System.ArgumentNullException">symbols</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicSymbolsCollection" /> class (for internal use only)
            </summary>
            <param name="symbols">The symbols.</param>
            <exception cref="T:System.ArgumentNullException">symbols</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbolsCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.DynamicSymbol" /> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>DynamicSymbol.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Symbol name not found in DynamicSymbols collection!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.TryGetInstance(System.String,TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the <see cref="T:TwinCAT.TypeSystem.IInstance" />. of the specified path.
            </summary>
            <param name="instanceSpecifier">The instance path or Instance Name (dependent of <see cref="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Mode"/> setting)</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.TypeSystem.IInstance" /> is found; otherwise, <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">instancePath</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.TryGetInstanceHierarchically(System.String,TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the Symbol Hierarchically from a dotted instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if the instance could be determined, <c>false</c> otherwise.</returns>
            <remarks>If we have provider.SymbolsInternal root object, the Roots are organized from different (virtual) namespaces.
            The need is to find the symbol independent independent of the root has a dotted instance path, or it is organized (bound) in a ChildInstance level.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbolsCollection.Empty">
            <summary>
            Gets an empty collection.
            </summary>
            <returns>DynamicSymbolsCollection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicArrayInstance">
            <summary>
            Dynamic Array Instance
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayInstance.#ctor(TwinCAT.TypeSystem.IArrayInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicArrayInstance"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicArrayInstance.Elements">
            <summary>
            Gets the contained Array Elements as read only collection.
            </summary>
            <value>
            The elements.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicArrayInstance.Item(System.Int32[])">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> with the specified indices.
            </summary>
            <param name="indices">The indices.</param>
            <returns>ISymbol.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">indices</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayInstance.TryGetElement(System.Int32[],TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element
            </summary>
            <param name="indices">The indices.</param>
            <param name="symbol">The found Array element symbol (out-parameter).</param>
            <returns>true if found, false if the indices specifiers is out-of-range.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayInstance.TryGetElement(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with the specified indices (jagged array support).
            </summary>
            <param name="jaggedIndices">The jagged indices list.</param>
            <param name="symbol">The symbol.</param>
            <returns>true if found, false if the jagged indices specifiers is out-of-range.</returns>
            <exception cref="T:System.ArgumentNullException">jaggedIndices</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">jaggedIndices</exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicArrayInstance.Dimensions">
            <summary>
            Gets the dimensions as read only collection.
            </summary>
            <value>The dimensions.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicArrayInstance.ElementType">
            <summary>
            Gets the type of the contained elements.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayInstance.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes" />[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayInstance.TryGetIndex(TwinCAT.TypeSystem.DynamicSymbol,TwinCAT.TypeSystem.IArrayType,System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="arrayType">Type of the array.</param>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes" />[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayInstance.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="indexes[][]" /> is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicOversamplingArrayInstance">
            <summary>
            Dynamic Array Instance
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicOversamplingArrayInstance.#ctor(TwinCAT.TypeSystem.IOversamplingArrayInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicOversamplingArrayInstance"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicOversamplingArrayInstance.OversamplingElement">
            <summary>
            Gets the oversampling element.
            </summary>
            <value>The oversampling element.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicUnionInstance">
            <summary>
            Dynamic union instance
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicUnionInstance.#ctor(TwinCAT.TypeSystem.IUnionInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicUnionInstance"/> class.
            </summary>
            <param name="unionInstance">The struct instance.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicUnionInstance.FieldInstances">
            <summary>
            Gets the member instances of the <see cref="T:TwinCAT.TypeSystem.IStructInstance">Struct Instance</see>.
            </summary>
            <value>
            The member instances.
            </value>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicUnionInstance._weakNormalizedNames">
            <summary>
            Dictionary of normalized Instance Names
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicUnionInstance.GetNormalizedNames">
            <summary>
            Gets the Normalized names table.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicUnionInstance.OnCreateNormalizedNames">
            <summary>
            Creates the normalized names table
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicUnionInstance.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicUnionInstance.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicUnionInstance.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicInterfaceInstance">
            <summary>
            Dynamic struct instance
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.#ctor(TwinCAT.TypeSystem.IInterfaceInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicStructInstance"/> class.
            </summary>
            <param name="structInstance">The struct instance.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicInterfaceInstance._weakNormalizedNames">
            <summary>
            Dictionary of normalized Instance Names
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.GetNormalizedNames">
            <summary>
            Gets the Normalized names table.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.OnCreateNormalizedNames">
            <summary>
            Creates the normalized names table
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicInterfaceInstance.MemberInstances">
            <summary>
            Gets the member instances of the <see cref="T:TwinCAT.TypeSystem.IStructInstance">Struct Instance</see>.
            </summary>
            <value>
            The member instances.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicInterfaceInstance.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC methods
            </summary>
            <value><c>true</c> if this instance has RPC methods; otherwise, <c>false</c>.</value>
            <remarks>If the struct instance supports RPC Methods, then the instance class is also
            supporting <see cref="T:TwinCAT.TypeSystem.IRpcStructInstance" /></remarks>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcStructInstance"/>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcMethod"/>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcMethodParameter"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[][]" /> is equal to 100.</param>
            <param name="returnValue">The result of the member invocation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.InvokeRpcMethod(System.String,System.Object[])">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>This method only supports primitive data types as <paramref name="inParameters"/>. Any available outparameters will be ignored.
            Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.InvokeRpcMethod(System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters"/>, <paramref name="outParameters"/>
            are allowed to be empty or NULL.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The ADS Error Code.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicInterfaceInstance.InvokeRpcMethodAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="cancel">The cancellation token</param>
            <returns>
            A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> results contains the return value (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue"/>)
            together with the output parameters. The succeeded communication is indicated by the ErrorCode property (<see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>) after the communication.
            </returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicInterfaceInstance.RpcMethods">
            <summary>
            Gets the Method descriptions for the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            </summary>
            <value>The methods.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicStructInstance">
            <summary>
            Dynamic struct instance
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructInstance.#ctor(TwinCAT.TypeSystem.IStructInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicStructInstance"/> class.
            </summary>
            <param name="structInstance">The struct instance.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicAliasInstance">
            <summary>
            Class DynamicAliasInstance. This class cannot be inherited.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.DynamicSymbol" />
            <seealso cref="T:TwinCAT.TypeSystem.IAliasInstance" />
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicAliasInstance.resolvedAlias">
            <summary>
            The resolved alias type
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.#ctor(TwinCAT.TypeSystem.IAliasInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicAliasInstance"/> class.
            </summary>
            <param name="aliasInstance">The alias instance.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicAliasInstance._weakNormalizedNames">
            <summary>
            Dictionary of normalized Instance Names
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.GetNormalizedNames">
            <summary>
            Gets the Normalized names table.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.OnCreateNormalizedNames">
            <summary>
            Creates the normalized names table
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes" />[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="indexes[][]" /> is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.TwinCAT#TypeSystem#IIndexedAccess#TryGetElement(System.Int32[],TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with specified indices (only first level on jagged arrays)
            </summary>
            <param name="indices">The indices.</param>
            <param name="symbol">The found Array element symbol (out-parameter).</param>
            <returns>true if found, false if the indices specifiers is out-of-range.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicAliasInstance.TwinCAT#TypeSystem#IIndexedAccess#TryGetElement(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with the specified indices (jagged array support).
            </summary>
            <param name="jaggedIndices">The jagged indices list.</param>
            <param name="symbol">The symbol.</param>
            <returns>true if found, false if the jagged indices specifiers is out-of-range.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicStructReferenceInstance">
            <summary>
            Class DynamicStructReferenceInstance.
            Implements the <see cref="T:TwinCAT.TypeSystem.DynamicReferenceInstance" />
            Implements the <see cref="T:TwinCAT.TypeSystem.IRpcStructInstance" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.DynamicReferenceInstance" />
            <seealso cref="T:TwinCAT.TypeSystem.IRpcStructInstance" />
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.#ctor(TwinCAT.TypeSystem.IReferenceInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicReferenceInstance"/> class.
            </summary>
            <param name="refInstance">The ref instance.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[][]" /> is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicStructReferenceInstance.MemberInstances">
            <summary>
            Gets the member instances.
            </summary>
            <value>The member instances.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicStructReferenceInstance.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC methods.
            </summary>
            <value><c>true</c> if this instance has RPC methods; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicStructReferenceInstance.RpcMethods">
            <summary>
            Gets the RPC methods.
            </summary>
            <value>The RPC methods.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.InvokeRpcMethod(System.String,System.Object[])">
            <summary>
            Invokes the RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.InvokeRpcMethod(System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object@)">
            <summary>
            Tries the invoke RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="retValue">The ret value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicStructReferenceInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Tries the invoke RPC method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The ret value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:TwinCAT.TypeSystem.RpcInvokeException">-1</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicVirtualStructInstance">
            <summary>
            Dynamic struct instance
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicVirtualStructInstance.#ctor(TwinCAT.TypeSystem.IVirtualStructInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicStructInstance"/> class.
            </summary>
            <param name="structInstance">The struct instance.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicVirtualStructInstance.AddMember(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IVirtualStructInstance)">
            <summary>
            Adds an member instance.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <param name="parent">The parent struct instance. Usually the this pointer.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicVirtualStructInstance.OnReadAnyValue(System.Type)">
            <summary>
            Handler function for reading ADS 'Any' Values.
            </summary>
            <param name="managedType">Managed type to read.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicReferenceInstance">
            <summary>
            Dynamic Reference Instance
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicReferenceInstance.resolvedReferenceType">
            <summary>
            The resolved alias type
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceInstance.#ctor(TwinCAT.TypeSystem.IReferenceInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicReferenceInstance"/> class.
            </summary>
            <param name="refInstance">The ref instance.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicReferenceInstance._weakNormalizedNames">
            <summary>
            Dictionary of normalized Instance Names
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceInstance.GetNormalizedNames">
            <summary>
            Gets the Normalized names table.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceInstance.OnCreateNormalizedNames">
            <summary>
            Creates the normalized names table
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicReferenceInstance.ResolvedCategory">
            <summary>
            Gets the Category of the Referenced Symbol.
            </summary>
            <value>The resolved category.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicReferenceInstance.ResolvedByteSize">
            <summary>
            Gets the resolved byte size of the <see cref="T:TwinCAT.TypeSystem.IReferenceInstance"/>.
            </summary>
            <value>The resolved byte size.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicReferenceInstance.ResolvedType">
            <summary>
            Gets the resolved type of the <see cref="T:TwinCAT.TypeSystem.IReferenceInstance"/>.
            </summary>
            <value>The resolved type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicReferenceInstance.ReferencedType">
            <summary>
            Gets the referenced type of the <see cref="T:TwinCAT.TypeSystem.IReferenceInstance"/>
            </summary>
            <value>The referenced type</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceInstance.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes" />[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceInstance.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="indexes[][]" /> is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceInstance.TwinCAT#TypeSystem#IIndexedAccess#TryGetElement(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with the specified indices (jagged array support).
            </summary>
            <param name="jaggedIndices">The jagged indices list.</param>
            <param name="symbol">The symbol.</param>
            <returns>true if found, false if the jagged indices specifiers is out-of-range.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicPointerInstance">
            <summary>
            Dynamic Pointer Instance
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicPointerInstance.#ctor(TwinCAT.TypeSystem.IPointerInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicPointerInstance"/> class.
            </summary>
            <param name="pointerInstance">The pointer instance.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicPointerInstance.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicPointerInstance.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicPointerInstance.Reference">
            <summary>
            Gets the resolved reference of Pointer / Reference (or NULL if PVOID)
            </summary>
            <value>
            The reference symbol or NULL if PVOID Pointer.
            </value>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicSymbol">
            <summary>
            Dynamic <see cref="T:TwinCAT.TypeSystem.ISymbol">Symbol</see> object.
            </summary>
            <remarks>The <see cref="T:TwinCAT.TypeSystem.DynamicSymbol"/> adds dynamic run time behaviour to the <see cref="T:TwinCAT.TypeSystem.ISymbol"/>/<see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>.
            That means e.g. for StructSymbols that .NET Properties are defined and dispatched at runtime
            to the structs fields like they are defined in TwinCAT / ADS Types.
            Indexed access to Array Symbols is another example where the dynamic runtime support takes place.
            </remarks>
            <example>
            Sample for the dynamic resolution of Symbols:
            <code language="C#" title="Dynamic Symbol access" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE_SIMPLEDYNAMIC" />
            </example>
            <seealso cref="T:TwinCAT.TypeSystem.IDynamicSymbol"/>
            <seealso cref="T:TwinCAT.TypeSystem.IValueSymbol"/>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbol"/>
            <seealso cref="T:System.Dynamic.DynamicObject"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.#ctor(TwinCAT.TypeSystem.IValueSymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbol.allowIGIOAccess">
            <summary>
            Indicates, that the aggregates symbols is an IProcessImageAddress (and most probably IAdsSymbol)
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.AllowIGIOAccess">
            <summary>
            Indicates, that the aggregates symbols is an IProcessImageAddress (and most probably IAdsSymbol)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.op_Equality(TwinCAT.TypeSystem.DynamicSymbol,TwinCAT.TypeSystem.DynamicSymbol)">
            <summary>
            Operator==
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.op_Inequality(TwinCAT.TypeSystem.DynamicSymbol,TwinCAT.TypeSystem.DynamicSymbol)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.TwinCAT#TypeSystem#IInstanceInternal#SetInstanceName(System.String)">
            <summary>
            Sets a new instance name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <remarks>This can only used as long the Instance is not added to a collection using the type binder classes.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnSetInstanceName(System.String)">
            <summary>
            Sets a new InstanceName InstancePath
            </summary>
            <param name="instanceName">Instance name.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbol.symbol">
            <summary>
            Static symbol object wrapped by this <see cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol._InnerSymbol">
            <summary>
            Gets the inner symbol of this <see cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>
            </summary>
            <value>The inner symbol.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.HasValue">
            <summary>
            Gets a value indicating whether this instance has value (only the non VirtualInstances, what means the Symbols with locations).
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.NotificationSettings">
            <summary>
            Gets the notification settings.
            </summary>
            <value>The notification settings.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.Parent">
            <summary>
            Gets the parent Symbol
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.SetParent(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Sets the parent of the Symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.SubSymbols">
            <summary>
            Gets the SubSymbols of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/>
            </summary>
            <value></value>
            <remarks>Only used for Array and Struct instances. Otherwise empty
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.SubSymbolsInternal">
            <summary>
            Gets the SubSymbols Collection (internal variant)
            </summary>
            <value>The sub symbols internal.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.SubSymbolsCreated">
            <summary>
            Gets a value indicating whether [sub symbols created].
            </summary>
            <value><c>true</c> if [sub symbols created]; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.CreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the sub symbols.
            </summary>
            <param name="parent">The parent.</param>
            <returns>SymbolCollection.</returns>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbol.normalizedName">
            <summary>
            The normalized name of this <seealso cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.NormalizedName">
            <summary>
            Gets the normalized instance name (fixed name for dynamic property access that doesn't contain invalid characters),
            </summary>
            <value>The normalized instance name (can be the same like <see cref="P:TwinCAT.TypeSystem.IInstance.InstanceName" /></value>
            <seealso cref="P:TwinCAT.TypeSystem.IInstance.InstanceName" />
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadRawValue">
            <summary>
            Reads the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadRawValueAsync(System.Threading.CancellationToken)">
            <summary>
            Read raw value as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadRawValue(System.Int32)">
            <summary>
            Reads the Symbols raw value
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <returns>System.Byte[].</returns>
            <value>The raw value in bytes.</value>
            <remarks>A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnReadRawValue(System.Int32)">
            <summary>
            Handler function for reading Raw symbol value.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnReadRawValueAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function reading the raw value of the <see cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultReadRawAccess&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteRawValue(System.Byte[])">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteRawValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteRawValue(System.Byte[],System.Int32)">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
            <param name="timeout">The timeout.</param>
            <value>The value.</value>
            <remarks>A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnWriteRawValue(System.Byte[],System.Int32)">
            <summary>
            Handler function for reading symbols raw value.
            </summary>
            <param name="rawValue">The value as byte array.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnWriteRawValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Handler function for writing the raw <see cref="T:TwinCAT.TypeSystem.DynamicSymbol" /> value.
            </summary>
            <param name="rawValue">The raw value to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object that represents the 'OnWriteRawValue' operation and returns a <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> as result.</returns>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbol._rawValueChanged">
            <summary>
            RawValueChanged delegate
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbol.syncObject">
            <summary>
            Synchronization object
            </summary>
        </member>
        <member name="E:TwinCAT.TypeSystem.DynamicSymbol.RawValueChanged">
            <summary>
            Occurs when the RawValue of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> has changed.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbol._valueChanged">
            <summary>
            ValueChanged delegate.
            </summary>
        </member>
        <member name="E:TwinCAT.TypeSystem.DynamicSymbol.ValueChanged">
            <summary>
            Occurs when the (Primitive) value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> has changed.
            </summary>
            <remarks>
            <example>
            <code language="C#" title="Use Dynamic Notifications" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2Notifications.cs" region="NOTIFICATION_SAMPLE"/>
            </example>
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadValue">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>.
            </summary>
            <returns>System.Object.</returns>
            <remarks>
            <example>
            <code language="C#" title="Dynamic Read access" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE"/>
            </example>
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadValueAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadValue(System.Int32)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.DynamicSymbol" />.
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <returns>System.Object.</returns>
            <value>The value.</value>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.
            A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadValueAsResult">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> as result object.
            </summary>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" /> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value" /> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" />.</returns>
            <exclude />
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteValueAsResult(System.Object)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> and returns an result object.
            </summary>
            <param name="value">The value.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" />.</returns>
            <exclude />
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.TryReadValue(System.Int32,System.Object@)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <param name="value">The symbol value.</param>
            <returns>The error code.</returns>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.
            A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnReadValue(System.Int32)">
            <summary>
            Handler function for the
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>System.Object.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnTryReadValue(System.Int32,System.Object@)">
            <summary>
            Handler function for the
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="value">The value.</param>
            <returns>The error Code.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnReadValueAsync(System.Threading.CancellationToken)">
            <summary>
            Handler function reading the <see cref="T:TwinCAT.TypeSystem.DynamicSymbol">DynamicSymbols</see> value asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task returning the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> as result.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteValue(System.Object)">
            <summary>
            Writes the specified value to the <see cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>.
            </summary>
            <param name="value">The value.</param>
            <remarks>
            <example>
            <code language="C#" title="Dynamic Write access" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE"/>
            </example>
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteValue(System.Object,System.Int32)">
            <summary>
            Writes the specified value to the <see cref="T:TwinCAT.TypeSystem.DynamicSymbol" />.
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout in ms.</param>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also. A negative timeout indicates that the Default
            Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
            <example>
            <code language="C#" title="Dynamic Write access" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE"/>
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.TryWriteValue(System.Object,System.Int32)">
            <summary>
            Writes the specified value to the <see cref="T:TwinCAT.TypeSystem.DynamicSymbol" />.
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout in ms.</param>
            <returns>The error code.</returns>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also. A negative timeout indicates that the Default
            Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
            <example>
            <code language="C#" title="Dynamic Write access" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE"/>
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" />.</returns>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnWriteValue(System.Object,System.Int32)">
            <summary>
            Handler Function for writing value.
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnTryWriteValue(System.Object,System.Int32)">
            <summary>
            Handler Function for writing value.
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnWriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Handler Function for writing value.
            </summary>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;WriteValueResult&gt;.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.AccessRights">
            <summary>
            Gets the access rights.
            </summary>
            <value>The access rights.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.DataType">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> of the <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.TypeName">
            <summary>
            Gets the name of the <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see> that is used for this <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.InstanceName">
            <summary>
            Gets the name of the instance (without periods (.)
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.InstancePath">
            <summary>
            Gets the relative / absolute access path to the instance (with periods (.))
            </summary>
            <value>The instance path.</value>
            <remarks>If this path is relative or absolute depends on the context. <see cref="T:TwinCAT.TypeSystem.IMember"/> are using relative paths, <see cref="T:TwinCAT.TypeSystem.ISymbol"/>s are using absolute ones.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bits.
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is acontainer type.
            </summary>
            <value>
            <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is a primitive type.
            </summary>
            <value>
            <c>true</c> if this instance is primitive type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsPersistent">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.ISymbol" /> is persistent.
            </summary>
            <value>
            <c>true</c> if this instance is persistent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsStatic">
            <summary>
            Gets a value indicating whether this instance is static.
            </summary>
            <value>
              <c>true</c> if this instance is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsProperty">
            <summary>
            Gets a value indicating whether <see cref="T:TwinCAT.TypeSystem.IInstance" /> is a property.
            </summary>
            <value><c>true</c> if this instance is a property; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsReadOnly">
            <summary>
            Indicates that this instance is read only.
            </summary>
            <remarks>
            Actually, this Flag is restricted to TcCOM-Objects readonly Parameters. Within the PLC this is used for the ApplicationName and
            ProjectName of PLC instances.
            Write-Access on these Modules will create an <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceAccessDenied"/> error.
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IInstance" /> in bytes.
            </summary>
            <value>
            The size of the <see cref="T:TwinCAT.TypeSystem.IInstance" /> in bytes.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.ByteSize">
            <summary>
            Gets the (aligned) size of of the Type/Instance in Bytes
            </summary>
            <value>The size of the byte.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsByteAligned">
            <summary>
            Indicates that the Size of the Object is Byte aligned (BitSize % 8 == 0)
            </summary>
            <value><c>true</c> if this instance is byte aligned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsBitType">
            <summary>
            Gets a value indicating whether this instance is not basing on a full DataType but instead of some sort of bit mapping
            </summary>
            <value>
            <c>true</c> if this instance is bit mapping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.FactoryServices">
            <summary>
            Gets the value loader.
            </summary>
            <value>The value loader.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.Attributes">
            <summary>
            Gets the Symbol Attributes
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsReference">
            <summary>
            Indicates that the <see cref="T:TwinCAT.TypeSystem.IInstance" /> represents a Reference type (REFERENCE TO)
            </summary>
            <value><c>true</c> if is ReferenceTo, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.HasReferenceAncestor">
            <summary>
            Gets or sets a value indicating whether an ancestor is a reference
            </summary>
            <value><c>true</c> if this instance is ancestor is reference; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsPointer">
            <summary>
            Indicates that the <see cref="T:TwinCAT.TypeSystem.IInstance" /> represents a Pointer type (Pointer TO)
            </summary>
            <value><c>true</c> if is ReferenceTo, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.Comment">
            <summary>
            Gets the comment of the <see cref="T:TwinCAT.TypeSystem.IInstance" />
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.Binder">
            <summary>
            Gets the data type binder.
            </summary>
            <value>The data type binder.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.TwinCAT#Ads#TypeSystem#IContextMaskProvider#ContextMask">
            <summary>
            Gets the context mask.
            </summary>
            <value>The context mask.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.Connection">
            <summary>
            Gets the connection bound to this <see cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.IsRecursive">
            <summary>
            Gets a value indicating whether this instance is recursive.
            </summary>
            <value><c>true</c> if this instance is recursive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbol.ValueEncoding">
            <summary>
            Gets the value encoding.
            </summary>
            <value>The value encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.ReadAnyValue(System.Type)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into a new created instance of the managed type
            </summary>
            <param name="managedType">The tp.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)" />
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnReadAnyValue(System.Type)">
            <summary>
            Handler function for reading ADS 'Any' Values.
            </summary>
            <param name="managedType">Managed type to read.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.UpdateAnyValue(System.Object@)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into the specified managed value.
            </summary>
            <param name="valueObject">The managed object.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)"/>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnUpdateAnyValue(System.Object)">
            <summary>
            Called when [update any value].
            </summary>
            <param name="valueObject">The value object.</param>
            <returns>System.Object.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.WriteAnyValue(System.Object)">
            <summary>
            Writes the value represented by the managed value to this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see>
            </summary>
            <param name="managedValue">The managed value.</param>
            <seealso cref="M:TwinCAT.TypeSystem.DynamicSymbol.ReadAnyValue(System.Type)"/>
            <seealso cref="M:TwinCAT.TypeSystem.DynamicSymbol.UpdateAnyValue(System.Object@)"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.OnWriteAnyValue(System.Object)">
            <summary>
            Called when [write any value].
            </summary>
            <param name="managedValue">The managed value.</param>
            <exception cref="T:TwinCAT.TypeSystem.CannotAccessVirtualSymbolException"></exception>
            <exception cref="T:TwinCAT.Ads.AdsErrorException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.TwinCAT#TypeSystem#ISymbolValueChangeNotify#OnRawValueChanged(TwinCAT.TypeSystem.RawValueChangedEventArgs)">
            <summary>
            Called when the RawValue of the symbol has been changed.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.TwinCAT#TypeSystem#ISymbolValueChangeNotify#OnValueChanged(TwinCAT.TypeSystem.ValueChangedEventArgs)">
            <summary>
            Called when the Value of the symbol has been changed.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbol.Unwrap">
            <summary>
            Unwraps the DynamicSymbol to its static version (only for internal purposes)
            </summary>
            <returns>IValueSymbol.</returns>
            <value>The unwrap.</value>
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcMethodParameterMapper">
            <summary>
            Class RpcMethodParameterMapper.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterMapper.#ctor(TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodParameterMapper"/> class.
            </summary>
            <param name="method">The method.</param>
            <exception cref="T:System.ArgumentNullException">method</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterMapper.CopyOutParameters(System.Object[],System.Object[])">
            <summary>
            Copies the out parameters.
            </summary>
            <param name="outParameters">The out parameters.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterMapper.getIndexInArgs(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the mapped indexes for the RpcMethod parameter.
            </summary>
            <param name="methodParameterIndex">Index of the method parameter.</param>
            <param name="inIndex">The in index2.</param>
            <param name="outIndex">The out index2.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterMapper.TryMapParameters(System.Object[],System.Object[]@,System.Object[]@)">
            <summary>
            Tries to map the arguments to the In/Out RpcParameters
            </summary>
            <param name="args">The arguments.</param>
            <param name="inParameters">The in parameters.</param>
            <param name="outParameters">The out parameters.</param>
            <returns><c>true</c> if the parameters could be mapped, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ArrayElementValueIterator">
            <summary>
            Iterator for Array Element Values.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayElementValueIterator._arrayValue">
            <summary>
            The Array Value
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayElementValueIterator._array">
            <summary>
            The Array Instance
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayElementValueIterator._type">
            <summary>
            The Array Type
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayElementValueIterator._indexIter">
            <summary>
            Index Iterator
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementValueIterator.#ctor(TwinCAT.TypeSystem.IArrayValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ArrayElementValueIterator"/> class.
            </summary>
            <param name="arrayValue">The array value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementValueIterator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementValueIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicValue">
            <summary>
            Dynamic value (uses RuntimeBinding for <see cref="T:TwinCAT.TypeSystem.ISymbol" /> value reading / writing).
            </summary>
            <remarks>The <see cref="T:TwinCAT.TypeSystem.DynamicValue"/> adds dynamic run time behaviour to the <see cref="T:TwinCAT.TypeSystem.IValue"/>Value/<see cref="T:TwinCAT.TypeSystem.IValue"/>.
            That means e.g. for struct values that .NET Properties are on-the-fly defined and dispatched at runtime just like defined in the structs
            structs data type definition. Another example is the access of Array Element values through indexes.
            </remarks>
            <example>
            Sample for the dynamic resolution of Symbols and reading values:
            <code language="C#" title="Dynamic Symbol access" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2DynamicTree.cs" region="CODE_SAMPLE_SIMPLEDYNAMIC" />
            </example>
            <seealso cref="T:TwinCAT.TypeSystem.DynamicSymbol"/>
            <seealso cref="T:System.Dynamic.DynamicObject"/>
            <seealso cref="T:TwinCAT.TypeSystem.IValue"/>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicValue._valueFactory">
            <summary>
            The value factory
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.ValueFactory">
            <summary>
            The value factory
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.DateTimeOffset,TwinCAT.TypeSystem.IDynamicValue,TwinCAT.ValueAccess.IAccessorValueFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="timeStamp">The time stamp (UserMode,</param>
            <param name="parent">The parent.</param>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">data</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IDynamicValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="subData">RawData</param>
            <param name="parentValue">The parent value.</param>
            <exception cref="T:System.ArgumentNullException">parentValue</exception>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicValue._timeStamp">
            <summary>
            The timestamp of the last successful read of the value.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.TimeStamp">
            <summary>
            Gets the Time stamp of the last successful read of the Value.
            </summary>
            <value>The read time stamp.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicValue._symbol">
            <summary>
            Symbol that is bound to this value.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.Symbol">
            <summary>
            Gets the symbol that is bound to this value.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.UpdateMode">
            <summary>
            Gets / Sets the update mode
            </summary>
            <value>The update mode.</value>
            <remarks>
            The default value is initialized by the creating Value Factory.
            <list type="table">
            <listheader><term>Mode</term><description>Description</description></listheader>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Immediately"/></term><description>Writes the values of this <see cref="T:TwinCAT.TypeSystem.DynamicValue"/>"/> instantly when setting its value or the value
            of its child members/elements.</description></item>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Triggered"/></term><description>Caches internally the value of this <see cref="T:TwinCAT.TypeSystem.DynamicValue"/>"/> until the <see cref="M:TwinCAT.TypeSystem.DynamicValue.Write"/> method is called. This reduces
            ADS rountrips, if one or more member/element values should be changed. Furthermore the write on the destination system happens
            consistently in one ADS Write operation, which could be important for dependent properties/members/elements.</description></item>
            </list>
            </remarks>
            <seealso cref="T:TwinCAT.ValueAccess.ValueUpdateMode"/>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicValue._parentValue">
            <summary>
            The parent value
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.ParentValue">
            <summary>
            Gets the parent value.
            </summary>
            <value>The parent value.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicValue.cachedRaw">
            <summary>
            The cached (raw) data) of the Root Symbol
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.CollidingProperties">
            <summary>
            Byte offset of this value data within the cached data.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.
            </summary>
            <param name="binder">Provides information about the invoke operation.</param>
            <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args" /> is equal to 100.</param>
            <param name="result">The result of the object invocation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.RootValue">
            <summary>
            Gets the root value.
            </summary>
            <value>The root value.</value>
            <remarks>The root value is the value, that is active in terms of ADS communication, the object that requests the data. All subsequent
            children are working on the <see cref="P:TwinCAT.TypeSystem.DynamicValue.RootValue"/>s cache.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryGetMemberValue(System.String,System.Object@)">
            <summary>
            Tries the get member value.
            </summary>
            <param name="name">The name.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the member value could be determined, <c>false</c> otherwise.</returns>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, the <paramref name="value"/> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TrySetMemberValue(System.String,System.Object)">
            <summary>
            Tries to Set a Member/Property Value
            </summary>
            <param name="name">The name of the member</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if succeeded, otherwise <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
            <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="args"/>[0] is equal to 100.</param>
            <param name="result">The result of the member invocation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes"/>[0] is equal to 3.</param>
            <param name="result">The result of the index operation.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <summary>
            Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.
            </summary>
            <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Type returns the <see cref="T:System.String" /> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
            <param name="result">The result of the type conversion operation.</param>
            <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryGetIndexValue(System.Object[],System.Object@)">
            <summary>
            Tries the get index value.
            </summary>
            <param name="indexes">The indexes.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the value is returned, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryGetIndexValue(System.Int32[],System.Object@)">
            <summary>
            Reads the specified array element.
            </summary>
            <param name="indices">The indices.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.getMemberValue(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Reads the specified member element.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.ReadMemberAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the specified member element.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultReadValueAccess&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">memberInstance</exception>
            <exception cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.setMemberValue(TwinCAT.TypeSystem.ISymbol,System.Object)">
            <summary>
            Writes the specified member element.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <summary>
            Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations that access objects by a specified index.
            </summary>
            <param name="binder">Provides information about the operation.</param>
            <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="indexes"/>[0] is equal to 3.</param>
            <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, <paramref name="value"/> is equal to 10.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryWriteArrayElementCached(System.Int32[],System.Object)">
            <summary>
            Writes the array element value into the cache.
            </summary>
            <param name="indices">The indices.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TrySetIndexValue(System.Object[],System.Object)">
            <summary>
            Tries to set the indexed value on Arrays
            </summary>
            <param name="indices">The indexes.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TrySetIndexValue(System.Int32[],System.Object)">
            <summary>
            Tries to set the indexed value on Arrays
            </summary>
            <param name="indices">The indices.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if succeeded, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">indices</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.Write">
            <summary>
            Writes the value (via ADS)
            </summary>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.Read">
            <summary>
            Reads the value (via ADS)
            </summary>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.WriteAsync(System.Threading.CancellationToken)">
            <summary>
            write as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;WriteValueResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            read as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ReadValueResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.Age">
            <summary>
            Gets the age of the value (last successful read of the value)
            </summary>
            <value>The age.</value>
            <exception cref="T:System.NotImplementedException"></exception>
            <seealso cref="P:TwinCAT.TypeSystem.DynamicValue.TimeStamp" />
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.DataType">
            <summary>
            Gets the data type bound to this <see cref="T:TwinCAT.TypeSystem.IValue" />
            </summary>
            <value>The type of the data.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.CachedRaw">
            <summary>
            Gets the cached Raw internal Data.
            </summary>
            <value>The raw cached data.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.IsPrimitive">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IValue" /> is a primitive value.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValue.ResolvedType">
            <summary>
            Gets the resolved type.
            </summary>
            <value>Resolved type.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.ResolveValue(System.Boolean)">
            <summary>
            Resolves the Value object to its primitive value.
            </summary>
            <param name="resolveEnumToPrimitive">if set to <c>true</c> <see cref="T:TwinCAT.TypeSystem.IEnumValue"/>s are resolved to their primitives also.</param>
            <returns>System.Object.</returns>
            <remarks>If the value is not primitive, this method returns the <see cref="T:TwinCAT.TypeSystem.IValue" /> itself.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryResolveValue(System.Boolean,System.Object@)">
            <summary>
            Tries to resolves the Value object to its primitive value.
            </summary>
            <param name="resolveEnumToPrimitive">if set to <c>true</c> <see cref="T:TwinCAT.TypeSystem.IEnumValue"/>s are resolved to their primitives also.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if value can be resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValue.TryGetArrayElementValues(System.Collections.Generic.IEnumerable{System.Object}@)">
            <summary>
            Returns Array Element values.
            </summary>
            <param name="elementValues">The element values.</param>
            <returns><c>true</c> if the values are returned, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicArrayValue">
            <summary>
            Class DynamicArrayValue.
            Implements the <see cref="T:TwinCAT.TypeSystem.DynamicValue" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.DynamicValue" />
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.DateTimeOffset,TwinCAT.TypeSystem.IDynamicValue,TwinCAT.ValueAccess.IAccessorValueFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="timeStamp">The time stamp (UserMode,</param>
            <param name="parent">The parent.</param>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory
            or
            symbol</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException">factory
            or
            symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicArrayValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IDynamicValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="subData">RawData</param>
            <param name="parentValue">The parent value.</param>
            <exception cref="T:System.ArgumentNullException">parentValue</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicEnumValue">
            <summary>
            Class DynamicEnumValue.
            Implements the <see cref="T:TwinCAT.TypeSystem.DynamicValue" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.DynamicValue" />
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicEnumValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.DateTimeOffset,TwinCAT.TypeSystem.IDynamicValue,TwinCAT.ValueAccess.IAccessorValueFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="timeStamp">The time stamp (UserMode,</param>
            <param name="parent">The parent.</param>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory
            or
            symbol</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException">factory
            or
            symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicEnumValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IDynamicValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="subData">RawData</param>
            <param name="parentValue">The parent value.</param>
            <exception cref="T:System.ArgumentNullException">parentValue</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicReferenceValue">
            <summary>
            Class DynamicReferenceValue.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.DynamicValue" />
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.DateTimeOffset,TwinCAT.TypeSystem.IDynamicValue,TwinCAT.ValueAccess.IAccessorValueFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicReferenceValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="timeStamp">The time stamp (UserMode,</param>
            <param name="parent">The parent.</param>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory
            or
            symbol</exception>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicReferenceValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.DynamicValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="parentValue">The parent value.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicPointerValue">
            <summary>
            Class DynamicPointerValue.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.DynamicValue" />
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicPointerValue.s_pointerDeref">
            <summary>
            Pointer Deref indicator
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicPointerValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.DateTimeOffset,TwinCAT.TypeSystem.IDynamicValue,TwinCAT.ValueAccess.IAccessorValueFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicReferenceValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="timeStamp">The time stamp (UserMode,</param>
            <param name="parent">The parent.</param>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory
            or
            symbol</exception>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicPointerValue.#ctor(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IDynamicValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValue" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="data">RawData</param>
            <param name="parentValue">The parent value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicPointerValue.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicPointerValue.TryGetMemberValue(System.String,System.Object@)">
            <summary>
            Tries the get member value.
            </summary>
            <param name="name">The name.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the member value is returned, <c>false</c> otherwise.</returns>
            <exception cref="T:TwinCAT.TypeSystem.SymbolException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.DataTypeCollection`1">
            <summary>
            Data type collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.list">
            <summary>
            Internal list of data types
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.nameDict">
            <summary>
            Dictionary (Type Name --&gt; DataType)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection" /> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.DataTypeCollection`1" /> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>DataTypeCollection&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.IndexOf(`0)">
            <summary>
            Determines the Index of the specified <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an <see cref="T:TwinCAT.TypeSystem.IDataType" /> into the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection" />.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:TwinCAT.TypeSystem.IDataType" /> object at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:TwinCAT.TypeSystem.IDataType" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType" /> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.ContainsType(System.String)">
            <summary>
            Determines whether the container contains the specified <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if contained; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the specified <see cref="T:TwinCAT.TypeSystem.IDataType" /> from the <see cref="T:TwinCAT.TypeSystem.IDataTypeCollection`1" />.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type (Out parameter)</param>
            <returns>true if found</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.LookupType(System.String)">
            <summary>
            Determines the specified <see cref="T:TwinCAT.TypeSystem.IDataType" />
            </summary>
            <param name="name">The name.</param>
            <returns>The <see cref="T:TwinCAT.TypeSystem.IDataType" /> if found, otherwise <c>NULL</c></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Add(`0)">
            <summary>
            Adds the specified item to the collection.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of types
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Contains(`0)">
            <summary>
            Determines whether this <see cref="T:TwinCAT.TypeSystem.DataTypeCollection" /> contains the specified <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the data types to the specified array, starting at the array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Count">
            <summary>
            Gets the count of contained <see cref="T:TwinCAT.TypeSystem.IDataType" />s.
            </summary>
            <value>The count.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.readOnly">
            <summary>
            Indicates that the <see cref="T:TwinCAT.TypeSystem.Generic.DataTypeCollection`1" /> is readonly
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.Remove(`0)">
            <summary>
            Removes the specified <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <param name="item">The item.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.DataTypeCollection`1.AsReadOnly">
            <summary>
            Converts the <see cref="T:TwinCAT.TypeSystem.Generic.DataTypeCollection`1" /> into a <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />
            </summary>
            <returns>ReadOnlyDataTypeCollection&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1">
            <summary>
            ReadOnly DataType collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1.#ctor(TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1" /> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1.#ctor(TwinCAT.TypeSystem.Generic.DataTypeCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1"/> class.
            </summary>
            <param name="coll">The collection.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1.ContainsType(System.String)">
            <summary>
            Determines whether the specified name contains type.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the specified name contains type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the Type with the specified name out of the collection.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <returns>true if found</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ReadOnlyDataTypeCollection`1.Item(System.String)">
            <summary>
            Gets the element with the specified type name.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1">
            <summary>
            Base class for <see cref="T:TwinCAT.TypeSystem.IInstance" /> object collections (abstract).
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.InstanceCollection`1._list">
            <summary>
            List of Instances
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.InnerList">
            <summary>
            Gets the LIst of instances.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.InstanceCollection`1._pathDict">
            <summary>
            The _path dictionary
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.InnerPathDict">
            <summary>
            The Path dictionary
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.#ctor(TwinCAT.TypeSystem.InstanceCollectionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1" /> class.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.InstanceCollection`1.mode">
            <summary>
            The mode this <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1"/> is working in.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Mode">
            <summary>
            The mode this <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1"/> is working in.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},TwinCAT.TypeSystem.InstanceCollectionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1" /> class.
            </summary>
            <param name="coll">The copy collection</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of the specified <see cref="T:TwinCAT.TypeSystem.IInstance" />.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified <see cref="T:TwinCAT.TypeSystem.IInstance" /> at the specified index.
            </summary>
            <param name="index">The instance.</param>
            <param name="instance">The item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index
            or
            index
            </exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:TwinCAT.TypeSystem.IInstance" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:TwinCAT.TypeSystem.IInstance" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance" /> with the specified instance path.
            </summary>
            <param name="instanceSpecifier">The instance path or Instance Name (dependent of <see cref="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Mode"/> setting)</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <remarks>Dependent what this <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1"/> contains configured by the <see cref="T:TwinCAT.TypeSystem.InstanceCollectionMode"/>
            the instance specifier should be the <see cref="P:TwinCAT.TypeSystem.IInstance.InstanceName"/> or the <see cref="P:TwinCAT.TypeSystem.IInstance.InstancePath"/>.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the specified items to this collection.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Contains(`0)">
            <summary>
            Determines whether this collection contains the specified <see cref="T:TwinCAT.TypeSystem.IInstance" />
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Contains(System.String)">
            <summary>
            Determines whether this collection contains an <see cref="T:TwinCAT.TypeSystem.IInstance" /> with the specified InstanceName / InstancePath
            </summary>
            <param name="instanceSpecifier">The instance path or Instance Name (dependent of <see cref="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Mode"/> setting)</param>
            <returns><c>true</c> if [contains] [the specified instance path]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">instancePath</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.TryGetInstance(System.String,`0@)">
            <summary>
            Tries to get the <see cref="T:TwinCAT.TypeSystem.IInstance" />. of the specified path.
            </summary>
            <param name="instanceSpecifier">The instance path or Instance Name (dependent of <see cref="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Mode"/> setting)</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.TypeSystem.IInstance" /> is found; otherwise, <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">instancePath</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.TryGetInstanceHierarchically(System.String,`0@)">
            <summary>
            Tries to get the Symbol Hierarchically from a dotted instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if the symbol is found, <c>false</c> otherwise.</returns>
            <remarks>If we have provider.SymbolsInternal root object, the Roots are organized from different (virtual) namespaces.
            The need is to find the symbol independent independent of the root has a dotted instance path, or it is organized (bound) in a ChildInstance level.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.IsReference(System.String,System.String@,System.Int32@)">
            <summary>
            Determines whether the specified instance name is a Dereferencing Instance Name
            </summary>
            <param name="instanceName">InstanceName.</param>
            <param name="dereferencedInstance">The dereferenced instance name.</param>
            <param name="refLevels">The reference levels.</param>
            <returns><c>true</c> if the specified instance name is reference; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">instanceName</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.TryGetSubItem(TwinCAT.TypeSystem.IInstanceCollection{`0},System.String[],System.Int32,`0@)">
            <summary>
            Tries to get the SubSymbol from split InstancePath
            </summary>
            <param name="coll">The collection.</param>
            <param name="pathSplit">The path split.</param>
            <param name="splitIndex">Index of the split.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if the subItem is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies this <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1" /> to the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Count">
            <summary>
            Gets the collection count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.AsReadOnly">
            <summary>
            Converts the <see cref="T:TwinCAT.TypeSystem.Generic.InstanceCollection`1" /> to an <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1" />
            </summary>
            <returns>ReadOnlyInstanceCollection&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.TryGetInstanceByName(System.String,System.Collections.Generic.IList{`0}@)">
            <summary>
            Tries to get Instances by name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instances">The instances found.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.TypeSystem.IInstance" /> is found; otherwise, <c>false</c></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.ContainsName(System.String)">
            <summary>
            Determines whether the specified instance name contains name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns><c>true</c> if the specified instance name contains name; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.GetInstance(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance" />by instance path.
            </summary>
            <param name="instanceSpecifier">The instance path or Instance Name (dependent of <see cref="P:TwinCAT.TypeSystem.Generic.InstanceCollection`1.Mode"/> setting)</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentException">Path not found!;instancePath</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.InstanceCollection`1.GetInstanceByName(System.String)">
            <summary>
            Gets the name of the instance by.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns>IList&lt;T&gt;.</returns>
            <exception cref="T:System.ArgumentException">Name not found!;instanceName</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1">
            <summary>
            ReadOnly Instance collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.Mode">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.InstanceCollectionMode" />.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.#ctor(TwinCAT.TypeSystem.IInstanceCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.mode">
            <summary>
            Mode of the <see cref="T:TwinCAT.TypeSystem.IInstanceCollection`1"/>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1"/> contains an instance with the specified instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>
              <c>true</c> if contains the specified instance path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.Item(System.String)">
            <summary>
            Gets the element with the specified instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>The instance if contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.TryGetInstance(System.String,`0@)">
            <summary>
            Tries to get the instance with the specified instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="instance">The instance.</param>
            <returns>true, if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.TryGetInstanceByName(System.String,System.Collections.Generic.IList{`0}@)">
            <summary>
            Tries to get the instance by name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="symbols">The found symbols (out-parameter)</param>
            <returns>true, if found; false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.ContainsName(System.String)">
            <summary>
            Determines whether the specified instance is contained.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns>true, if instance name is found.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.GetInstance(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance" />by instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyInstanceCollection`1.GetInstanceByName(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance" /> by instance name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns>IList&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.SymbolCollection`1">
            <summary>
            Interface represents a collection of <see cref="T:TwinCAT.TypeSystem.ISymbol" /> objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.#ctor(TwinCAT.TypeSystem.InstanceCollectionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.SymbolCollection`1" /> class.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},TwinCAT.TypeSystem.InstanceCollectionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolCollection" /> class.
            </summary>
            <param name="coll">The collection to be copied.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.AsReadOnly">
            <summary>
            Returns a Read only version of this collection (shallow copy).
            </summary>
            <returns>ReadOnlySymbolCollection&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>SymbolCollection&lt;T&gt;.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.SymbolCollection`1.Empty">
            <summary>
            Creates an Empty <see cref="T:TwinCAT.TypeSystem.Generic.SymbolCollection`1"/>
            </summary>
            <returns>SymbolCollection&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.SymbolCollection`1.TryGetInstances(System.Func{`0,System.Boolean},System.Boolean,System.Collections.Generic.IList{`0}@)">
            <summary>
            Try to get instances with predicate function
            </summary>
            <param name="predicate">The predicate function</param>
            <param name="recurse">if set to <c>true</c> the symbol hierarchy will be searched recursively.</param>
            <param name="instances">The instances.</param>
            <returns><c>true</c> if the Instance(s) is/are found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.ReadOnlySymbolCollection`1">
            <summary>
            Read only symbol collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlySymbolCollection`1.#ctor(TwinCAT.TypeSystem.IInstanceCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlySymbolCollection`1"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ReadOnlySymbolCollection`1.Empty">
            <summary>
            Returns an empty collection.
            </summary>
            <returns>ReadOnlySymbolCollection&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.NamespaceCollection`1">
            <summary>
            Generic class for Namespace collections
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.NamespaceCollection`1"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.list">
            <summary>
            List of Namespaces
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.namespaceDict">
            <summary>
            Dictionary NamespaceName --> INamespace
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.allTypes">
            <summary>
            Dictionary FullPath -> IDataType
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.InnerAllTypes">
            <summary>
            Dictionary FullPath -> IDataType
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.IndexOf(TwinCAT.TypeSystem.Generic.INamespace{`0})">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Insert(System.Int32,TwinCAT.TypeSystem.Generic.INamespace{`0})">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Item(System.String)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="str">The STR.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Add(TwinCAT.TypeSystem.Generic.INamespace{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Contains(TwinCAT.TypeSystem.Generic.INamespace{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.CopyTo(TwinCAT.TypeSystem.Generic.INamespace{`0}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="F:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.readOnly">
            <summary>
            Read only indicator
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.Remove(TwinCAT.TypeSystem.Generic.INamespace{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.ContainsNamespace(System.String)">
            <summary>
            Determines whether the specified name contains namespace.
            </summary>
            <param name="name">The name.</param>
            <returns>
              <c>true</c> if the specified name contains namespace; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.TryGetNamespace(System.String,TwinCAT.TypeSystem.Generic.INamespace{`0}@)">
            <summary>
            Tries to get the namespace object
            </summary>
            <param name="name">The name.</param>
            <param name="nspace">The namespace object (out-parameter)</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the specified type.
            </summary>
            <param name="typeName">Data type name</param>
            <param name="dataType">The found data type (out-parameter).</param>
            <returns>true if found, false if not contained.</returns>
            <exception cref="T:System.ArgumentNullException">typeName</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.TryGetTypeByFullName(System.String,`0@)">
            <summary>
            Tries to get the data type by full name.
            </summary>
            <param name="fullname">DataTypes full name.</param>
            <param name="dataType">Found data type (out-parameter).</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.AllTypes">
            <summary>
            Gets all types included in all namespaces.
            </summary>
            <value>All types.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.NamespaceCollection`1.AllTypesInternal">
            <summary>
            Gets all types included in all namespaces
            </summary>
            <value>All types internal.</value>
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1">
            <summary>
            Read Only namespace collection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1.#ctor(TwinCAT.TypeSystem.Generic.NamespaceCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1.ContainsNamespace(System.String)">
            <summary>
            Determines whether this collection contains a namespace with the specified name.
            </summary>
            <param name="name">The name of the namespace</param>
            <returns>
              <c>true</c> if the namespace is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1.TryGetNamespace(System.String,TwinCAT.TypeSystem.Generic.INamespace{`0}@)">
            <summary>
            Tries to get the namespace with the specified name.
            </summary>
            <param name="name">Namespace name.</param>
            <param name="nspace">The found namespace (out-parameter).</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1.Item(System.String)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the specified data type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="dataType">Data Type (out-parameter).</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1.TryGetTypeByFullName(System.String,`0@)">
            <summary>
            Tries to get the specified type (by fullName)
            </summary>
            <param name="fullname">FullName of the data type.</param>
            <param name="dataType">Found Data type (out-parameter).</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ReadOnlyNamespaceCollection`1.AllTypes">
            <summary>
            Gets all types included in all namespaces.
            </summary>
            <value>All types.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicSymbolFactory">
            <summary>
            Instance factory for dynamic symbols (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.#ctor(TwinCAT.TypeSystem.ISymbolFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicSymbolFactory" /> class.
            </summary>
            <param name="inner">The inner (static) instance factory.</param>
            <param name="nonCachedArrayElements">if set to <c>true</c> Array elements will not be cached.</param>
            <exception cref="T:System.ArgumentNullException">inner</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.Initialize(TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes the the <see cref="T:TwinCAT.TypeSystem.ISymbolFactory" />.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbolFactory.DefaultInvalidChars">
            <summary>
            Default Invalid Characters for dynamic symbols
            </summary>
            <remarks>By default, the following characters are Invalid and are replaced by '_':
            '^', ' ' (Space), '(', ')','-','.'
            </remarks>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolFactory.InvalidCharacters"/>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicSymbolFactory.inner">
            <summary>
            Inner static/aggregated Factory
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the Symbol with the specified resolver
            </summary>
            <param name="entry">Symbol Entry.</param>
            <param name="parent">The parent.</param>
            <returns>Symbol instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateInstanceAsync(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Creates the Symbol with the specified resolver
            </summary>
            <param name="entry">Symbol Entry.</param>
            <param name="parent">The parent.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Symbol instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.WrapSymbol(TwinCAT.TypeSystem.IValueSymbol)">
            <summary>
            Wraps the specified Symbol into a dynamic wrapper
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>IValueSymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateArrayElementInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Creates all Element Instances of the specified array parent symbol.
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="arrayType">Type of the array.</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateArrayElement(TwinCAT.TypeSystem.IArrayType,System.Int32[],TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the array element
            </summary>
            <param name="arrayType">Resolved Array type.</param>
            <param name="currentIndex">Array Index of the Element</param>
            <param name="parent">Array Instance</param>
            <returns>Resolved Array Type</returns>
            <exception cref="T:System.ArgumentNullException">parent</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateOversamplingElement(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the oversampling array Element.
            </summary>
            <param name="parent">Array Instance.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateFieldInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Creates the member instances.
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="parentType">Type of the structure.</param>
            <returns>SymbolCollection.</returns>
            <exception cref="T:System.ArgumentNullException">
            parentInstance
            or
            structType
            </exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.OnCreateFieldInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Handler function creating the member instances.
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="parentType">Type of parent (Struct or Union).</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateFieldInstance(TwinCAT.TypeSystem.IField,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates a single Instance member on a struct parent
            </summary>
            <param name="field">Field</param>
            <param name="parent">Parent Struct/Alias/Union</param>
            <returns>Instance member</returns>
            <remarks>Because the Alias type can act like a struct, the parent can be an IAliasInstance also.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateReferenceInstance(TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the reference/pointer instance.
            </summary>
            <param name="type">Reference/Pointer type.</param>
            <param name="parent">Parent Instance of the reference</param>
            <returns>Reference/Pointer instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.create(TwinCAT.TypeSystem.IValueSymbol)">
            <summary>
            Creates a dynamic wrapper for the specified (static) symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.CreateVirtualStruct(System.String,System.String,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates a virtual structure instance
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="parent">The parent.</param>
            <returns>Virtual struct instance</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbolFactory.InvalidCharacters">
            <summary>
            Gets the invalid characters that are not allowed to appear within the Instance Name
            </summary>
            <value>The forbidden characters.</value>
            <seealso cref="M:TwinCAT.TypeSystem.DynamicSymbolFactory.SetInvalidCharacters(System.Char[])" />
            <seealso cref="P:TwinCAT.TypeSystem.DynamicSymbolFactory.HasInvalidCharacters" />
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicSymbolFactory.SetInvalidCharacters(System.Char[])">
            <summary>
            Sets the invalid characters.
            </summary>
            <param name="invalidChars">The invalid chars.</param>
            <seealso cref="P:TwinCAT.TypeSystem.DynamicSymbolFactory.InvalidCharacters" />
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbolFactory.HasInvalidCharacters">
            <summary>
            Gets a value indicating whether this instance has invalid characters.
            </summary>
            <value><c>true</c> if this instance has invalid characters; otherwise, <c>false</c>.</value>
            <seealso cref="P:TwinCAT.TypeSystem.DynamicSymbolFactory.InvalidCharacters" />
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicSymbolFactory.FactoryServices">
            <summary>
            Gets the factory services.
            </summary>
            <value>The factory services.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcMarshaler">
            <summary>
            Interface IRpcMarshaller
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMarshaler.DefaultValueEncoding">
            <summary>
            Gets the default value encoding (for strings)
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.MarshalInParameters(TwinCAT.TypeSystem.IRpcMethod,System.Object[],System.Span{System.Byte})">
            <summary>
            Marshals the Method (in) Parameter values to the memory destination.
            </summary>
            <remarks>This is used on the Client side of the RpcInvoke call.</remarks>
            <param name="method">The method.</param>
            <param name="values">The parameter values.</param>
            <param name="destination">The memory destination..</param>
            <returns>Number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.UnmarshalInParameters(TwinCAT.TypeSystem.IRpcMethod,System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals the in parameters from buffer to object values
            </summary>
            <remarks>This is used on the Server side of the RpcInvoke call.</remarks>
            <param name="method">The Rpc Method.</param>
            <param name="source">The incoming data</param>
            <param name="values">The marshalled InParameter values.</param>
            <returns>Count of Unmarshaled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.UnmarshalOutParameters(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals the Out-Parameters from the Source data.
            </summary>
            <param name="method">The method.</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="source">The unmarshalled source data of the Out-Parameters.</param>
            <param name="values">The parameter values (used for potential LengthIs parameters)</param>
            <returns>Count of unmarshalled bytes.</returns>
            <remarks>This is used to Unmarshal the Out-Parameters on the Client side of the Rpc call.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.MarshalOutParameters(TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],System.Span{System.Byte})">
            <summary>
            Marshals the Out-Parameters into the target data.
            </summary>
            <param name="method">The RPC method</param>
            <param name="values">The In-Parameter values (used for potential LengthIs parameters)</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="target">The Out-Data created from parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.UnmarshalReturnValue(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the RPC method return value
            </summary>
            <param name="method">The method.</param>
            <param name="retSpec">The Return-Value type specification (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="source">The source.</param>
            <param name="returnValue">The return value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.MarshalReturnValue(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object,System.Span{System.Byte})">
            <summary>
            Unmarshals the RPC method return value
            </summary>
            <param name="method">The method.</param>
            <param name="retSpec">The Return-Value type specification (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="returnValue">The return value.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.UnmarshalRpcMethod(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[],System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshal the returned data into the Out- (Read-) buffer of the RPC Call
            </summary>
            <param name="method">The method.</param>
            <param name="values">The parameter values.</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="retSpec">The Return-Value type specification (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="source">The source data.</param>
            <param name="returnValue">The return value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.GetInMarshallingSize(TwinCAT.TypeSystem.IRpcMethod,System.Object[])">
            <summary>
            Gets the size of the input marshalling data in bytes.
            </summary>
            <param name="method">The method.</param>
            <param name="values">The parameter values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMarshaler.GetOutMarshallingSize(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[])">
            <summary>
            Gets the size of the out marshalling data in bytes.
            </summary>
            <param name="method">The method.</param>
            <param name="values">The values.</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="retSpec">The Return-Value type specification (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcMarshaler">
            <summary>
            Class RpcMarshaller base implementation (abstract)
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcMarshaler" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.RpcMarshaler._resolver">
            <summary>
            The resolver
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.#ctor(TwinCAT.TypeSystem.IDataTypeResolver,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMarshaler"/> class.
            </summary>
            <param name="dataTypeResolver">The data type resolver.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMarshaler.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetParameterMarshallingSize(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],System.Object[],System.Int32@,System.Int32@)">
            <summary>
            Gets the size of the data of the in parameters in bytes
            </summary>
            <param name="method">The method.</param>
            <param name="outSpec">The out spec.</param>
            <param name="parameterValues">The parameter values.</param>
            <param name="inSize">Size of the in.</param>
            <param name="outSize">Size of the out.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">Cannot resolve type '{typeName}'</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetInMarshallingSize(TwinCAT.TypeSystem.IRpcMethod,System.Object[])">
            <summary>
            Gets the size of the input marshalling data in bytes.
            </summary>
            <param name="method">The method.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetOutMarshallingSize(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[])">
            <summary>
            Gets the size of the out parameters.
            </summary>
            <param name="method">The method.</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="retSpec">The Return-Value type specification (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnGetMarshallingSize(System.String)">
            <summary>
            Gets the Marshalling Size of the DataType
            </summary>
            <param name="dataType">Type of the data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnGetParameterSize(System.Int32,TwinCAT.TypeSystem.IRpcMethodParameterCollection,System.Object[])">
            <summary>
            Get the parameter size of a single parameter
            </summary>
            <param name="parameterIndex">Index of the parameter over all parameters.</param>
            <param name="parameters">The parameters (in or out parameters)</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Parameter Byte size</returns>
            <exception cref="T:System.ArgumentNullException">parameters</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">TcRpcLengthIs parameter mismatch. Cannot find [IN] parameter '{parameter.LengthIsParameterIndex}' for parameter '{parameter}'!</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">Cannot marshal PCCH type. Value is not a string!</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">Cannot marshal PCCH type without LengthIs attribute!</exception>
            <remarks>This default implementation solely returns the Byte size of the parameter</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetInParameters(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.RpcMethodParameterCollection@,System.Collections.Generic.IList{TwinCAT.TypeSystem.IDataType}@)">
            <summary>
            Gets the in parameters.
            </summary>
            <param name="method">The method.</param>
            <param name="parameters">The parameters.</param>
            <param name="types">The types.</param>
            <returns>Number of returned parameters.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetOutParameters(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.RpcMethodParameterCollection@,System.Collections.Generic.IList{TwinCAT.TypeSystem.IDataType}@)">
            <summary>
            Gets the out parameters.
            </summary>
            <param name="method">The method.</param>
            <param name="parameters">The parameters.</param>
            <param name="types">The types.</param>
            <returns>Number of returned parameters.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetType(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Gets the type of the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>IDataType.</returns>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">DataType '{parameter.TypeName}' could not be resolved!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetType(System.String)">
            <summary>
            Gets the type of the parameter.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>IDataType.</returns>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">DataType '{typeName}' could not be resolved!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.GetParameters(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.MethodParamFlags,TwinCAT.TypeSystem.RpcMethodParameterCollection@,System.Collections.Generic.IList{TwinCAT.TypeSystem.IDataType}@)">
            <summary>
            Gets the parameters.
            </summary>
            <param name="method">The method.</param>
            <param name="mask">The mask.</param>
            <param name="parameters">The parameters.</param>
            <param name="types">The types.</param>
            <returns>Number of returned parameters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">parameters</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.MarshalInParameters(TwinCAT.TypeSystem.IRpcMethod,System.Object[],System.Span{System.Byte})">
            <summary>
            Marshals the Method Identification plus all In parameters into the In- (Write-) buffer
            </summary>
            <param name="method">The method.</param>
            <param name="values">The parameter values.</param>
            <param name="destination">The destination memory.</param>
            <returns>Number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">method
            or
            parameterValues
            or
            data</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">method
            or
            parameterValues
            or
            data</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.UnmarshalOutParameters(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals the Out-Parameters from the Source data.
            </summary>
            <param name="method">The method.</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="source">The unmarshalled source data of the Out-Parameters.</param>
            <param name="parameterValues">The parameter values (used for potential LengthIs parameters)</param>
            <returns>Count of unmarshalled bytes.</returns>
            <remarks>This is used to Unmarshal the Out-Parameters on the Client side of the Rpc call.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.MarshalOutParameters(TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],System.Span{System.Byte})">
            <summary>
            Marshals the Out-Parameters into the target data.
            </summary>
            <param name="method">The RPC method</param>
            <param name="parameterValues">The In-Parameter values (used for potential LengthIs parameters)</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="target">The Out-Data created from parameters.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.UnmarshalInParameters(TwinCAT.TypeSystem.IRpcMethod,System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals the in parameters from buffer to object values
            </summary>
            <param name="method">The Rpc Method.</param>
            <param name="source">The incoming data</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Count of Unmarshaled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:System.ArgumentNullException">parameterValues</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">parameterValues</exception>
            <remarks>This is used on the Server side of the RpcInvoke call.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnMarshalInParameters(TwinCAT.TypeSystem.IRpcMethod,System.Object[],System.Span{System.Byte})">
            <summary>
            Handler function for marshalling the In Parameters.
            </summary>
            <param name="method">The method.</param>
            <param name="parameterValues">The parameter values.</param>
            <param name="destination">The destination memory.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">parameterValues</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">parameterValues</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnGetParameterSize(TwinCAT.TypeSystem.IRpcMethodParameter,TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[])">
            <summary>
            Handler function getting the Parameter Size
            </summary>
            <param name="param">The parameter.</param>
            <param name="spec">The spec.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnMarshalParameter(TwinCAT.TypeSystem.IRpcMethodParameter,TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshals a single RpcMethodParameter to the memory.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="spec">The type specification.</param>
            <param name="value">The value.</param>
            <param name="parameterSize">Size of the parameter.</param>
            <param name="destination">The destination memory (all parameters)</param>
            <returns>Number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnUnmarshalOutParameters(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Handler function unmarshalling the out parameters.
            </summary>
            <param name="method">The method.</param>
            <param name="outSpec">The out spec.</param>
            <param name="source">The source memory..</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>Number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:System.ArgumentNullException">parameterValues</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">parameterValues</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnUnmarshalInParameters(TwinCAT.TypeSystem.IRpcMethod,System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Handler function unmarshalling the out parameters.
            </summary>
            <param name="method">The method.</param>
            <param name="source">The source memory..</param>
            <param name="parameterValues">The values.</param>
            <returns>Number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:System.ArgumentNullException">parameterValues</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">parameterValues</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.UnmarshalReturnValue(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the RPC method return value
            </summary>
            <param name="method">The method.</param>
            <param name="returnSpec">Specification of the Return type, or NULL.</param>
            <param name="buffer">The buffer.</param>
            <param name="returnValue">The return value.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.MarshalReturnValue(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object,System.Span{System.Byte})">
            <summary>
            Unmarshals the RPC method return value
            </summary>
            <param name="method">The method.</param>
            <param name="returnSpec">Specification of the Return type, or NULL.</param>
            <param name="returnValue">The return value.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnUnmarshalOutParameter(System.Int32,TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals a single RPC Out parameter from the Buffer
            </summary>
            <param name="parameterIndex">The index of the parameter</param>
            <param name="method">The method.</param>
            <param name="outSpec">The out spec.</param>
            <param name="buffer">The buffer.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.OnUnmarshalInParameter(System.Int32,TwinCAT.TypeSystem.IRpcMethod,System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals a single RPC In parameter from the Buffer (used on the Symbolic Server side).
            </summary>
            <param name="parameterIndex">Index of the parameter.</param>
            <param name="method">The method.</param>
            <param name="buffer">The buffer.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMarshaler.UnmarshalRpcMethod(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[],System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshal the returned data into the Out- (Read-) buffer of the RPC Call
            </summary>
            <param name="method">The method.</param>
            <param name="outSpec">The Output-Parameter specifications (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="retSpec">The Return-Value type specification (for ANY_TYPE marshalling), NULL if marshalled by symbolic information.</param>
            <param name="parameterValues">The parameter values.</param>
            <param name="source">The source data.</param>
            <param name="returnValue">The return value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:System.ArgumentNullException">parameterValues</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">parameterValues</exception>
            <exception cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.Namespace">
            <summary>
            Namespace object.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.Namespace._name">
            <summary>
            The namespace name
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Namespace._dataTypes">
            <summary>
            Data types of the <see cref="T:TwinCAT.TypeSystem.Namespace"/>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Namespace.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Namespace"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Namespace.Name">
            <summary>
            Gets the name of the namespace.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Namespace.DataTypes">
            <summary>
            Gets the data types organized by this <see cref="T:TwinCAT.TypeSystem.Namespace"/>
            </summary>
            <value>The data types.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Namespace.TwinCAT#TypeSystem#Generic#INamespaceInternal{TwinCAT#TypeSystem#IDataType}#DataTypesInternal">
            <summary>
            Access to the Internal DataTypes collection (read/write)
            </summary>
            <value>The data types internal.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.Namespace.TwinCAT#TypeSystem#Generic#INamespaceInternal{TwinCAT#TypeSystem#IDataType}#RegisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers the the specified <see cref="T:TwinCAT.TypeSystem.IDataType" />
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type is registered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Namespace.TwinCAT#TypeSystem#Generic#INamespaceInternal{TwinCAT#TypeSystem#IDataType}#RegisterTypes(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Registers the types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolFactoryBase">
            <summary>
            Base implementation for <see cref="T:TwinCAT.TypeSystem.ISymbolFactory"/> interface.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbolFactory" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryBase.services">
            <summary>
            Symbol Factory services
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryBase.Services">
            <summary>
            Symbol Factory services
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolFactoryBase" /> class.
            </summary>
            <param name="nonCachedArrayElements">if set to <c>true</c> Array Elements will be memory optimized and non-cached.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryBase.nonCachedArrayElements">
            <summary>
            Indicates that ArrayElements will be created on access and not cached.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryBase.initialized">
            <summary>
            Indicates whether this instance is initialized.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryBase.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.Initialize(TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes the the <see cref="T:TwinCAT.TypeSystem.ISymbolFactory" />.
            </summary>
            <param name="services">The services.</param>
            <exception cref="T:System.ArgumentNullException">services</exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryBase.FactoryServices">
            <summary>
            Gets the factory services.
            </summary>
            <value>The factory services.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the Symbol with the specified resolver
            </summary>
            <param name="entry">Symbol Entry.</param>
            <param name="parent">The parent.</param>
            <returns>Symbol instance.</returns>
            <exception cref="T:System.ArgumentNullException">entry</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateInstanceAsync(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Creates the Symbol with the specified resolver
            </summary>
            <param name="entry">Symbol Entry.</param>
            <param name="parent">The parent.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Symbol instance.</returns>
            <exception cref="T:System.ArgumentNullException">entry</exception>
            <exception cref="T:System.ArgumentNullException">entry</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.TryResolveType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Tries to resolve the specfied data type
            </summary>
            <param name="typeName">Name of the Type.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if the data type is resolved, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">typeName</exception>
            <exception cref="T:System.ArgumentNullException">info</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.ResolveTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Tries to resolve the specfied data type
            </summary>
            <param name="typeName">Name of the Type.</param>
            <param name="cancel">The cancel token.</param>
            <returns>Task&lt;ResultValue&lt;IDataType&gt;&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">typeName</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.onCreateSymbol(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Ons the create symbol.
            </summary>
            <param name="entry">The entry.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateSymbolAsync(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            on create symbol as an asynchronous operation.
            </summary>
            <param name="entry">The entry.</param>
            <param name="parent">The parent.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultValue&lt;ISymbol&gt;&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateSymbol(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new <see cref="T:TwinCAT.TypeSystem.ISymbol" />
            </summary>
            <param name="entry">The entry.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateArrayElementInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Creates all Element Instances of the specified array parent symbol.
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="arrayType">Type of the array.</param>
            <returns>SymbolCollection.</returns>
            <exception cref="T:System.ArgumentNullException">
            parentInstance
            or
            arrayType
            </exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateArrayElementInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Creates all Element Instances of the specified array parent symbol.
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="arrayType">Type of the array.</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateArrayInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating an ArrayInstance
            </summary>
            <param name="entry">The symbol INfo.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <returns>IArrayInstance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateStruct(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IStructType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the struct symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="structType">Type of the structure.</param>
            <param name="parent">The parent.</param>
            <returns>IStructInstance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateInterface(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IInterfaceType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the interface symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="interfaceType">Type of the interface symbol.</param>
            <param name="parent">The parent.</param>
            <returns>IStructInstance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateUnion(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IUnionType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the union symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="unionType">Type of the structure.</param>
            <param name="parent">The parent.</param>
            <returns>IStructInstance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateAlias(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IAliasType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating the alias symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="aliasType">The Alias type.</param>
            <param name="parent">The parent.</param>
            <returns>IStructInstance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateString(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IStringType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a String Type
            </summary>
            <param name="entry">The entry.</param>
            <param name="stringType">The string dataType.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreatePrimitive(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a Primitive Symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="dataType">Type of the data.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateReferenceInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IReferenceType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a ReferenceInstance symbol.
            </summary>
            <param name="entry">The entry.</param>
            <param name="referenceType">Type of the reference.</param>
            <param name="parent">The parent.</param>
            <returns>IReferenceInstance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreatePointerInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a Pointer instance symbol
            </summary>
            <param name="entry">The entry.</param>
            <param name="structType">Type of the structure.</param>
            <param name="parent">The parent.</param>
            <returns>IPointerInstance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateArrayElement(TwinCAT.TypeSystem.IArrayType,System.Int32[],TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the array element
            </summary>
            <param name="arrayType">Resolved array type.</param>
            <param name="indices">Array Index of the Element</param>
            <param name="parent">Array Instance</param>
            <returns>Array element</returns>
            <exception cref="T:System.ArgumentNullException">
            parent
            or
            indices
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">indices</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateArrayElement(TwinCAT.TypeSystem.IArrayType,System.Int32[],TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new Array Element Symbol.
            </summary>
            <param name="arrayType">Resolved array type.</param>
            <param name="currentIndex">Index of the current.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateFieldInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Creates the Member Instances collection for the specified parent instance
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="structType">Type of the structure.</param>
            <returns>SymbolCollection.</returns>
            <exception cref="T:System.ArgumentNullException">
            parentInstance
            or
            structType
            </exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateFieldInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Handler function creating the member instances.
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="parentType">Type of parent (Struct or Union).</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateFieldInstance(TwinCAT.TypeSystem.IField,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the Instance member.
            </summary>
            <param name="field">Field</param>
            <param name="parent">Parent Struct</param>
            <returns>Instance member</returns>
            <exception cref="T:System.ArgumentNullException">
            member
            or
            parent
            </exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateFieldInstance(TwinCAT.TypeSystem.IField,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new <see cref="T:TwinCAT.TypeSystem.IStructInstance" /> member
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateReferenceInstance(TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the reference/pointer instance.
            </summary>
            <param name="type">Reference/Pointer type.</param>
            <param name="parent">Parent Instance of the reference</param>
            <returns>Reference/Pointer instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            parent
            </exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateReference(TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new Reference Instance.
            </summary>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CreateVirtualStruct(System.String,System.String,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the virtual structure.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="parent">The parent.</param>
            <returns>Virtual struct instance</returns>
            <exception cref="T:System.ArgumentNullException">
            instanceName
            or
            instancePath
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">instanceName
            or
            instancePath</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.OnCreateVirtualStruct(System.String,System.String,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Handler function creating a new Virtual Struct
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="parent">The parent.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.CombinePath(TwinCAT.TypeSystem.IField,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Combines member parent path
            </summary>
            <param name="member">The member.</param>
            <param name="parent">The parent.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryBase.DefaultInvalidChars">
            <summary>
            Default Invalid Characters
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryBase.invalidCharacters">
            <summary>
            The invalid characters
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryBase.InvalidCharacters">
            <summary>
            Gets the invalid characters that are not allowed to appear within the Instance Name
            </summary>
            <value>The forbidden characters.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryBase.HasInvalidCharacters">
            <summary>
            Gets a value indicating whether this instance has invalid characters.
            </summary>
            <value><c>true</c> if this instance has invalid characters; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryBase.SetInvalidCharacters(System.Char[])">
            <summary>
            Sets the invalid characters.
            </summary>
            <param name="invalidChars">The invalid chars.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcMethodParameterCollection">
            <summary>
            Collection of RPC method parameters
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.RpcMethodParameterCollection._list">
            <summary>
            Internal list organizing the index of the parameters.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.RpcMethodParameterCollection._dict">
            <summary>
            Dictionary of ParamaterName->RpcMethodParameter for fast find.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodParameterCollection"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodParameterCollection.Empty">
            <summary>
            Gets an Empty <see cref="T:TwinCAT.TypeSystem.RpcMethodParameterCollection"/>
            </summary>
            <value>The empty.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IRpcMethodParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodParameterCollection"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.IndexOf(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.Insert(System.Int32,TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RpcMethodParameter.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.Add(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.Contains(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.CopyTo(TwinCAT.TypeSystem.IRpcMethodParameter[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodParameterCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodParameterCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.Remove(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.AsReadOnly">
            <summary>
            Returns a read only version of this <see cref="T:TwinCAT.TypeSystem.RpcMethodParameterCollection" />
            </summary>
            <returns>ReadOnlyMethodParameterCollection.</returns>
            <value>Collection as read only version.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterCollection.GetLengthIsParameter(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Gets the length is parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>IRpcMethodParameter.</returns>
            <exception cref="T:System.ArgumentNullException">parameter</exception>
            <exception cref="T:System.ArgumentException">Parameter is not contained in ParameterList - parameter</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyMethodParameterCollection">
            <summary>
            Read only <see cref="T:TwinCAT.TypeSystem.RpcMethodParameterCollection"/>.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyMethodParameterCollection.#ctor(TwinCAT.TypeSystem.RpcMethodParameterCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyMethodParameterCollection"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyMethodParameterCollection.GetLengthIsParameter(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Gets the corresponding LengthIs parameter.
            </summary>
            <param name="parameter">The value parameter</param>
            <returns>The LengthIs Parameter</returns>
            <seealso cref="P:TwinCAT.TypeSystem.IRpcMethodParameter.LengthIsParameterIndex" />
            <seealso cref="P:TwinCAT.TypeSystem.IRpcMethodParameter.HasLengthIsParameter" />
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolFactoryServices">
            <summary>
            Class SymbolFactoriesContainer (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryServices.#ctor(TwinCAT.TypeSystem.IBinder,TwinCAT.TypeSystem.ISymbolFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolFactoryValueServices" /> class (for internal use only).
            </summary>
            <param name="binder">The binder.</param>
            <param name="factory">The loader.</param>
            <exception cref="T:System.ArgumentNullException">binder
            or
            loader
            or
            accessor</exception>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryServices._binder">
            <summary>
            Type Binder
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryServices._symbolFactory">
            <summary>
            Symbol Factory
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryServices.Binder">
            <summary>
            Gets the type binder.
            </summary>
            <value>The type binder.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryServices.SymbolFactory">
            <summary>
            Gets the symbol factory.
            </summary>
            <value>The symbol factory.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolFactoryValueServices">
            <summary>
            Class SymbolFactoriesContainer (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolFactoryValueServices.#ctor(TwinCAT.TypeSystem.IBinder,TwinCAT.TypeSystem.ISymbolFactory,TwinCAT.ValueAccess.IAccessorRawValue,TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolFactoryValueServices" /> class (for internal use only).
            </summary>
            <param name="binder">The binder.</param>
            <param name="factory">The loader.</param>
            <param name="accessor">The accessor.</param>
            <param name="session">The session.</param>
            <exception cref="T:System.ArgumentNullException">binder
            or
            loader
            or
            accessor</exception>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryValueServices._valueAccessor">
            <summary>
            Value accessor
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolFactoryValueServices._session">
            <summary>
            The session
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryValueServices.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolFactoryValueServices.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session or NULL if not available</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolNavigator`1">
            <summary>
            Navigator class to navigate through a tree of symbols.
            </summary>
            <typeparam name="T"></typeparam>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolNavigator`1.#ctor(TwinCAT.TypeSystem.IInstanceCollection{`0},System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolNavigator`1"/> class.
            </summary>
            <param name="symbols">The symbols to navigate on.</param>
            <param name="sep">The separator character</param>
            <exception cref="T:System.ArgumentNullException">symbols</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolNavigator`1.#ctor(TwinCAT.TypeSystem.IInstanceCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolNavigator`1"/> class.
            </summary>
            <param name="symbols">The symbols to navigate on.</param>
            <exception cref="T:System.ArgumentNullException">symbols</exception>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolNavigator`1.DefaultPathSeparator">
            <summary>
            The Default path separator
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolNavigator`1._pathSeparator">
            <summary>
            the current path separator.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolNavigator`1.PathSeparator">
            <summary>
            Gets or sets the path separator character.
            </summary>
            <value>The path separator.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolNavigator`1.TryGetSymbol(System.String,`0@)">
            <summary>
            Tries to get the symbol
            </summary>
            <param name="path">The path.</param>
            <param name="found">The found instance (out-parameter)</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolNavigator`1.TryGetSubSymbol(`0,System.String[],System.Int32,`0@)">
            <summary>
            Tries to get the Subsymbol specified in the relative path
            </summary>
            <param name="root">Root instance (anchor instance).</param>
            <param name="relativePath">The relative path (relative to the root).</param>
            <param name="index">Optional array index.</param>
            <param name="found">Found object (out-parameter).</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolNavigator`1.TryGetSubSymbol(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],`0@)">
            <summary>
            Tries to get the specified subSymbol
            </summary>
            <param name="root">Root array instance.</param>
            <param name="indices">The indices.</param>
            <param name="found">Found Instance (out-parameter)</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolNavigator`1.TryGetSubSymbol(TwinCAT.TypeSystem.IStructInstance,System.String[],System.Int32,`0@)">
            <summary>
            Try to get Sub Symbol
            </summary>
            <param name="root">Root object.</param>
            <param name="relativeInstancePath">The relative instance path.</param>
            <param name="index">Array Index</param>
            <param name="symbol">Found Symbol (out-parameter)</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ArrayIndexType">
            <summary>
            Enum ArrayIndexType
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayIndexType.Standard">
            <summary>
            Standard Array
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayIndexType.Jagged">
            <summary>
            Jagged array
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayIndexType.Oversample">
            <summary>
            Oversampling array
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ArrayIndexConverter">
            <summary>
            Converts ArrayIndices to string and position/subindex and vice versa (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IndicesToString(System.Int32[])">
            <summary>
            Convert indices to string.
            </summary>
            <param name="indices">The indices.</param>
            <returns>The string representation (including brackets)</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.StringToIndices(System.String)">
            <summary>
            Parses the Indices string to int array (as indices).
            </summary>
            <param name="indices">The indices.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.OversamplingSubElementToString(System.Int32)">
            <summary>
            Creates the Index String part for the Oversampling SubElement
            </summary>
            <param name="elementCount">Should be the element Count of the Dimension (one after the highest index).</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.SubIndexToIndexString(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Converts the SubIndex / Position to String.
            </summary>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="subIndex">Index of the sub.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.CalcSubIndexArray(System.Int32[],System.Int32[])">
            <summary>
            Calculates an internal array that contains the factors/multiplicators of the different dimensions for position/subIndex calculations.
            </summary>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.ArgumentNullException">
            lowerBounds
            or
            upperBounds
            </exception>
            <exception cref="T:System.ArgumentException">Dimensions mismatch!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.ArraySubElementCount(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Calculates the number of SubElements within the Array (including Oversampling Element)
            </summary>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.ArraySubElementCount(System.Int32[])">
            <summary>
            Gets the number of Single Elements within the Array.
            </summary>
            <param name="elements">The elements.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.SubIndexToIndices(System.Int32,TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Converts subIndex / position to indices.
            </summary>
            <param name="subIndex">Subindex / Position.</param>
            <param name="type">The array type.</param>
            <returns>Indices.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.SubIndexToIndices(System.Int32,System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Converts the subindex / position to the indices.
            </summary>
            <param name="subIndex">Subindex / position.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns>Indices.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IndicesToSubIndex(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Converts the indices specifier to the subindex / position.
            </summary>
            <param name="indices">The indices (not normalized)</param>
            <param name="type">The array type.</param>
            <returns>The subindex / position.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IndicesToSubIndex(System.Int32[],TwinCAT.TypeSystem.IArrayType,System.Boolean)">
            <summary>
            Converts the indices specifier to the subindex / position.
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The type.</param>
            <param name="normalizedIndices">if set to <c>true</c> [normalized indices].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IndicesToSubIndex(System.Int32[],System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Converts the indices specifier to the subindex / position.
            </summary>
            <param name="indices">The indices.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns>The subindex / position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">indices</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.TryGetSubIndex(System.Int32[],System.Int32[],System.Int32[],System.Boolean,System.Int32@)">
            <summary>
            Converts the indices specifier to the subindex / position.
            </summary>
            <param name="indices">The indices.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <param name="subIndex">Index of the sub.</param>
            <returns>The subindex / position.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.CheckIndices(System.Int32[],System.Int32[],System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Checks the indices against lower/upper bounds.
            </summary>
            <param name="indices">The indices.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="normalized">if set to <c>true</c> the indices are normalized.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">indices</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Indices are out of range.</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.TryCheckIndices(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Checks the indices whether they are inside bounds.
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The Array type.</param>
            <returns><c>true</c> if the indices are insinde bounds, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.TryCheckIndices(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Checks the indices whether they are inside bounds (only usable for first level of jagged arrays !!!)
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The Array type.</param>
            <returns><c>true</c> if the indices are insinde bounds, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.TryCheckIndices(System.Int32[],System.Int32[],System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Checks the indices whether they are inside bounds.
            </summary>
            <param name="indices">The indices.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="normalized">if set to <c>true</c> [normalized].</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns><c>true</c> if the indices are within the Array bounds, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            lowerBounds
            or
            upperBounds
            or
            indices
            </exception>
            <exception cref="T:System.ArgumentException">
            Dimensions mismatch!
            or
            Dimensions mismatch!
            </exception>
            <exception cref="T:System.ArgumentNullException">lowerBounds
            or
            upperBounds
            or
            indices</exception>
            <exception cref="T:System.ArgumentException">Dimensions mismatch!
            or
            Dimensions mismatch!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.TryCheckIndices(System.Int32[],System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Validates the indices.
            </summary>
            <param name="indices">The indices.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns><c>true</c> if the indices are within the array bounds, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.TryCheckElement(System.Int32,System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Validates the specified subElement index.
            </summary>
            <param name="subElement">The subElement index.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns><c>true</c> if the SubElement number is within the specified bounds, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.NormalizeIndices(System.Int32[],System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Normalizes the indices.
            </summary>
            <param name="indices">The indices (non normalized within bounds).</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.NormalizeIndices(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Normalizes the indices.
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The type.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IsOversampled(TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Determines whether the specified type is oversampled.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is oversampled; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.DenormalizeIndices(System.Int32[],System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Denormalizes the indices.
            </summary>
            <param name="normalizedIndices">The normalized indices</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="oversampled">if set to <c>true</c> [oversampled].</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.DenormalizeIndices(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Denormalizes the indices.
            </summary>
            <param name="normalizedIndices">The normalized indices.</param>
            <param name="type">The type.</param>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IsOversamplingElement(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Determines whether the subIndex specifies an oversampling element.
            </summary>
            <param name="subIndex">SubIndex / Position..</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <returns><c>true</c> if [is oversampling element] [the specified lower bounds]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.TryIsOversamplingElement(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Determines whether the subIndex specifies an oversampling element.
            </summary>
            <param name="subIndex">SubIndex / Position..</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <returns><c>true</c> if [is oversampling element] [the specified lower bounds]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IsOversamplingIndex(System.Int32[],TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Determines whether the indices specify the oversampling Element
            </summary>
            <param name="indices">The indices.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is oversampling index] [the specified indices]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            indices
            </exception>
            <exception cref="T:System.ArgumentException">Specified type is not an Oversampling type;type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.IsOversamplingIndex(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Determines whether the indices specifies the oversampling element.
            </summary>
            <param name="indices">The indices.</param>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <returns><c>true</c> if [is oversampling index] [the specified indices]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            lowerBounds
            or
            upperBounds
            </exception>
            <exception cref="T:System.ArgumentException">Dimensions mismatch!</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Oversampling arrays only support one Dimension!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexConverter.GetDimensionLenghts(System.Int32[],System.Int32[])">
            <summary>
            Gets the dimension lenghts.
            </summary>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <returns>System.Int32[].</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeStringParser">
            <summary>
            DataType String Parser class.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeStringParser.arrayExpression">
            <summary>
            Regular expression, parsing a Standard Array name with specified Dimension boundaries.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeStringParser.arrayDynExpression">
            <summary>
            Regular expression, ,parsing a Dynamic Array name, where the Dimension boundaries are return as unparsed string.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.TryParseString(System.String,System.Int32@,System.Text.Encoding@)">
            <summary>
            Tries to parse the string.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="length">The character count of the string (not including the /0)</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if successfull, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsString(System.String)">
            <summary>
            Determines whether the specified type name is string.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if the specified type name is string; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.TryParseDynamicArray(System.String,System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}}@,System.String@)">
            <summary>
            Tries to parse a dynamic array string
            </summary>
            <param name="typeName">Name of the Dynamic array.</param>
            <param name="dims">List of Dimension specifications.</param>
            <param name="baseType">Base type string</param>
            <returns><c>true</c> if the array is parsed, <c>false</c> otherwise.</returns>
            <remarks>The Problem is, that dynamic arrays contain expressions/Variables for Upper/Lower Bound and not the real Dimension values.
            Therefore, this function parses the dimensions only as Dictionary (LowerBound/UpperBound --&gt; Value), in a list for each dimension.
            Furthermore, the base Type string of the ElementType is extracted.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsArray(System.String)">
            <summary>
            Determines whether the specified type name is array.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if the specified type name is array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.TryParsePointer(System.String,System.String@)">
            <summary>
            Tries to parse the pointer type
            </summary>
            <param name="typeName">Name of the Pointer type</param>
            <param name="referencedType">Type of the referenced type.</param>
            <returns><c>true</c> if the pointer is parsed successfully, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typteName</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsPointer(System.String)">
            <summary>
            Determines whether the specified type name is pointer.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if the specified type name is pointer; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">typeName</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.TryParseReference(System.String,System.String@)">
            <summary>
            Tries to parse a reference type
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="referencedType">Type of the referenced.</param>
            <returns><c>true</c> if the reference is parsed successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsReference(System.String)">
            <summary>
            Determines whether the specified type name is reference.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if the specified type name is reference; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.TryParseSubRange``1(System.String,System.String@,``0@,``0@)">
            <summary>
            Tries to parse the string as SubRange type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="baseType">Type of the base.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <returns><c>true</c> if the SubRange is parsed sucessfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsSubRange(System.String)">
            <summary>
            Determines whether the specified string is a subrange type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if [is sub range] [the specified type name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsPlatformBoundType(System.String)">
            <summary>
            Determines whether the specified type name is a 'special type' (UXINT,XINT,XWORD).
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns><c>true</c> if [is special type name] [the specified type name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsIntegralType(System.String)">
            <summary>
            Determines whether the specified Type name is an (complex) intrinsic type
            </summary>
            <param name="typeName">Name of the type.</param>
            <remarks>
            (TOD)|(DT)|(TIME)|(DATE)|(LTIME)|(TIME_OF_DAY)|(DATE_AND_TIME)
            (XINT)|(UXINT)|(XWORD)
            </remarks>
            <returns><c>true</c> if [is intrinsic type] [the specified type name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeStringParser.IsPlcOpenType(System.String)">
            <summary>
            Determines whether the specified Type name is one of the PLC Open types
            </summary>
            <param name="typeName">Name of the type.</param>
            <remarks>
            (TOD)|(DT)|(TIME)|(DATE)|(LTIME)|(TIME_OF_DAY)|(DATE_AND_TIME)
            </remarks>
            <returns><c>true</c> if [is intrinsic type] [the specified type name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.Binder">
            <summary>
            Namespace Binder Base Implementation
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IBinder" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.#ctor(TwinCAT.TypeSystem.IInternalSymbolProvider,TwinCAT.TypeSystem.ISymbolFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Binder"/> class.
            </summary>
            <param name="provider">The symbol provider.</param>
            <param name="symbolFactory">The symbol factory.</param>
            <param name="useVirtualInstances">if set to <c>true</c> [use virtual instances].</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.Binder._provider">
            <summary>
            The symbol provider
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Binder.Provider">
            <summary>
            Gets the Symbol provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.Binder._symbolFactory">
            <summary>
            The symbol factory
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.Binder._platformPointerSize">
            <summary>
            The platform pointer size
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Binder.PlatformPointerSize">
            <summary>
            Gets the size of the platform pointer (in Bytes)
            </summary>
            <value>The size of the platform pointer.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.SetPlatformPointerSize(System.Int32)">
            <summary>
            Sets the size of the platform pointer.
            </summary>
            <param name="sz">The sz.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.Bind(TwinCAT.TypeSystem.IHierarchicalSymbol)">
            <summary>
            Binds the specified symbol to the Resolver (Registering and linking Parents).
            </summary>
            <param name="subSymbol">The child symbol.</param>
            <returns>the parent Symbol where the subSymbol was bound to</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.createUniquePathName(TwinCAT.TypeSystem.IInstance)">
            <summary>
            Creates an unique path name
            </summary>
            <param name="instance">The instance.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.Binder.UseVirtualInstances">
            <summary>
            Indicates that Virtual (created StructInstances) are used.
            </summary>
            <value>The use virtual instances.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.RegisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.RegisterTypes(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Registers the specified types.
            </summary>
            <param name="types">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.UnregisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Unregisters/Unbinds a type
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.UnregisterAll">
            <summary>
            Unregisters all types.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.TryResolveType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Tries to resolve the type (parses it if not found and adds it to the resolver if necessary).
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type is resolved, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">name</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.ResolveTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously resolves the type name to the <see cref="T:TwinCAT.TypeSystem.IDataType"/> object.
            </summary>
            <param name="name">The name of the data type.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task object that represents the 'ResultType' operation and returns a <see cref="T:TwinCAT.Ads.ResultValue`1"/> as result. The result <see cref="T:TwinCAT.TypeSystem.IDataType"/> can be accessed via
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.OnTypeGenerated(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Handler function called when a type / types are generated
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.OnTypesGenerated(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Handler function called when a type / types are generated
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.Binder.OnTypeResolveError(System.String)">
            <summary>
            Handler function when a type name cannot be resolved.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="E:TwinCAT.TypeSystem.Binder.TypesGenerated">
            <summary>
            Occurs when new types are generated
            </summary>
        </member>
        <member name="E:TwinCAT.TypeSystem.Binder.TypeResolveError">
            <summary>
            Occurs when a typename cannot be resolved.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.DynamicValueMarshaler">
            <summary>
            Converter class that convert 'Any' objects.
            </summary>
            <remarks>The <see cref="T:TwinCAT.TypeSystem.DynamicValueMarshaler"/> adds Struct/Enum/Array creation possibilities to the <see cref="T:TwinCAT.TypeSystem.InstanceValueMarshaler"/>.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DynamicValueMarshaler"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DynamicValueMarshaler.DefaultValueEncoding">
            <summary>
            Gets the default value encoding like specified by the used ValueAccessor.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.Unmarshal(TwinCAT.TypeSystem.IAttributedInstance,System.ReadOnlySpan{System.Byte},System.Type,System.Object@)">
            <summary>
            Unmarshals the specified memory to the symbol value.
            </summary>
            <param name="symbol">The symbol to unmarshal.</param>
            <param name="valueType">Type of the target.</param>
            <param name="source">The source memory.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentNullException">type
            or
            targetType
            or
            data</exception>
            <exception cref="T:System.ArgumentNullException">type
            or
            targetType
            or
            data</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.CanMarshal(TwinCAT.TypeSystem.IAttributedInstance,System.Type)">
            <summary>
            Determines whether this instance can marshal the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">Type of the value.</param>
            <returns><c>true</c> if this instance can marshal the specified symbol; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.InitializeInstanceValue(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object@,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes the specified targetInstance value with the raw byte data.
            </summary>
            <param name="type">The source symbol.</param>
            <param name="encoding">The encoding.</param>
            <param name="targetInstance">The target instance.</param>
            <param name="source">The source data.</param>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.initializeInstanceValue(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Type,System.Object,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes the specified target instance with the raw byte data.
            </summary>
            <param name="dataType">The type.</param>
            <param name="encoding">The forced encoding or NULL.</param>
            <param name="targetInstance">The target instance.</param>
            <param name="valueType">Type of the target.</param>
            <param name="targetMember">The target member.</param>
            <param name="source">The source data.</param>
            <exception cref="T:System.ArgumentException">Type is not an enum type!;type</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.initializeInstanceValue(System.Object,System.Object,System.Object)">
            <summary>
            Initializes the instance value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="member">The member.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="F:TwinCAT.TypeSystem.DynamicValueMarshaler._checkedTypesDict">
            <summary>
            Cache of already checked 'Any' proxy types.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.CheckType(TwinCAT.TypeSystem.IDataType,System.Type)">
            <summary>
            Checks the 'Any'/Proxy type.
            </summary>
            <param name="type">The type.</param>
            <param name="targetType">Type of the target.</param>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">
            </exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.Marshal(TwinCAT.TypeSystem.IAttributedInstance,System.Object)">
            <summary>
            Converts the specified Value of the the Value Instance object to raw bytes.
            </summary>
            <param name="symbol">Type of the data.</param>
            <param name="value">The object.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.MarshalSize(TwinCAT.TypeSystem.IInstance)">
            <summary>
            Calculates the MarshalSize of the value.
            </summary>
            <param name="symbol">The type.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.Marshal(TwinCAT.TypeSystem.IAttributedInstance,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the specified Symbol value to a memory location.
            </summary>
            <param name="symbol">The Symbol.</param>
            <param name="val">The value.</param>
            <param name="destination">The b value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Type is not an enum type!;type
            or
            Struct member not found!;type</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.Marshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the specified value to a memory location.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <param name="val">The value or NULL (only if NULL-Pointer value)</param>
            <param name="destination">The b value.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Type is not an enum type!;type
            or
            Struct member not found!;type</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.TryGetManagedType(TwinCAT.TypeSystem.IDataType,System.Type@)">
            <summary>
            Tries to get the corresponding managed type.
            </summary>
            <param name="type">The type.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if the managed type could be resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DynamicValueMarshaler.TryGetManagedType(TwinCAT.TypeSystem.IAttributedInstance,System.Type@)">
            <summary>
            Tries to get the corresponding managed type.
            </summary>
            <param name="symbol">The type.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if the managed type could be determined, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.InstanceValueMarshaler">
            <summary>
            Symbol Converter marshaller / Value converter
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.InstanceValueMarshaler._typeMarshaller">
            <summary>
            The type marshaller
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.InstanceValueMarshaler.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.InstanceValueMarshaler"/> class.
            </summary>
            <param name="defaultValueEncoding">The default value encoding.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.InstanceValueMarshaler.TypeMarshaller">
            <summary>
            Gets the type marshaller.
            </summary>
            <value>The type marshaller.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.InstanceValueMarshaler.DefaultValueEncoding">
            <summary>
            Gets the default value encoding like specified by the used ValueAccessor.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.InstanceValueMarshaler.CanMarshal(TwinCAT.TypeSystem.IAttributedInstance,System.Type)">
            <summary>
            Determines whether this instance can marshal the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">Managed value Type (optional, can be null for primitives, strings or arrays of primitives).</param>
            <returns><c>true</c> if this instance can marshal the specified symbol; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.InstanceValueMarshaler.Marshal(TwinCAT.TypeSystem.IAttributedInstance,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the value to destination span/memory.
            </summary>
            <param name="symbol">The type.</param>
            <param name="value">The data.</param>
            <param name="destination">The bytes.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentNullException">destination</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.InstanceValueMarshaler.MarshalSize(TwinCAT.TypeSystem.IInstance)">
            <summary>
            Gets the MarshalSize of the symbol/value.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.InstanceValueMarshaler.TryGetManagedType(TwinCAT.TypeSystem.IAttributedInstance,System.Type@)">
            <summary>
            Tries the type of the get managed.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.InstanceValueMarshaler.TryGetManagedType(TwinCAT.TypeSystem.IDataType,System.Type@)">
            <summary>
            Tries to get the corresponding managed type.
            </summary>
            <param name="type">The type.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if the managed type could be determined, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.InstanceValueMarshaler.Unmarshal(TwinCAT.TypeSystem.IAttributedInstance,System.ReadOnlySpan{System.Byte},System.Type,System.Object@)">
            <summary>
            Unmarshals the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="source">The source memory/span.</param>
            <param name="valueType">Target type.</param>
            <param name="value">The unmarshaled value.</param>
            <returns>The number of unmarshaled bytes</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.EnumValueFactory">
            <summary>
            Factory class for Enum Values.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueFactory.Create(TwinCAT.Ads.AdsDataTypeId,TwinCAT.Ads.Internal.AdsEnumInfoEntry)">
            <summary>
            Creates the specified <see cref="T:TwinCAT.TypeSystem.IEnumValue"/>
            </summary>
            <param name="baseTypeId">Id of the enum base type.</param>
            <param name="enumInfo">The entry.</param>
            <returns>IEnumGenericValue.</returns>
            <exception cref="T:System.ArgumentNullException">entry</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">baseTypeId</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueFactory.Create(TwinCAT.TypeSystem.IEnumType,System.Object)">
            <summary>
            Creates the specified enum type.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
            <returns>IEnumValue.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueFactory.Create(TwinCAT.TypeSystem.IEnumType,System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates the specified enum type.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="source">The bytes.</param>
            <returns>IEnumValue.</returns>
            <exception cref="T:System.ArgumentException">Wrong Enum base type.</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.EnumTypeConverter`1">
            <summary>
            Generic type converter class for Enum values
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.GetEntry(TwinCAT.TypeSystem.IEnumType,`0)">
            <summary>
            Converts the primitive value into the appropriate <see cref="T:TwinCAT.TypeSystem.EnumValue`1"/>
            </summary>
            <param name="enumType">Enum base data type.</param>
            <param name="value">The value as primitive.</param>
            <returns>EnumValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.GetEntry(TwinCAT.TypeSystem.IEnumType,System.String)">
            <summary>
            Gets the enum value object corresponding to the specified string value.
            </summary>
            <param name="enumType">Enum base type.</param>
            <param name="value">The value (in string representation).</param>
            <returns>EnumValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.TryGetName(TwinCAT.TypeSystem.IEnumType,`0,System.String@)">
            <summary>
            Tries to get the string representation of the enum value.
            </summary>
            <param name="enumType">Base type of the enum.</param>
            <param name="value">The primitive value.</param>
            <param name="nameValue">String representation of the value.</param>
            <returns><c>true</c> if valid, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            enumType
            or
            value
            </exception>
            <exception cref="T:System.ArgumentException">Specified type is not an enum type!;enumType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.TryGetValue(TwinCAT.TypeSystem.IEnumType,System.String,`0@)">
            <summary>
            Tries to get the primitive value of the string represented value
            </summary>
            <param name="enumType">Base type of the enum.</param>
            <param name="stringValue">The string value.</param>
            <param name="value">The value as primitive.</param>
            <returns><c>true</c> if valid, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">enumType</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">stringValue</exception>
            <exception cref="T:System.ArgumentException">Specified type is not an enum type!;enumType</exception>
            <remarks>The string value here is compared to the list of valid Enum Fields. No parsing is done to the base type.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.TryParse(TwinCAT.TypeSystem.IEnumType,System.String,`0@)">
            <summary>
            Tries to parse the EnumValue.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="stringValue">The string value.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the enum type could be parsed, <c>false</c> otherwise.</returns>
            <remarks>The string value is compared against the EnumFields and furthermore a BaseType parsing is done in addition.</remarks>
            <exception cref="T:System.ArgumentNullException">enumType</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">stringValue</exception>
            <exception cref="T:System.ArgumentException">Specified type is not an enum type! - enumType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.Parse(TwinCAT.TypeSystem.IEnumType,System.String)">
            <summary>
            Parses the string value
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="stringValue">The string value.</param>
            <returns>T.</returns>
            <exception cref="T:System.FormatException">Value '{stringValue}' is not valid for type '{enumType.Name}'!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.TryChangeType(System.String,`0@)">
            <summary>
            Tries to change the string value to the specified type.
            </summary>
            <param name="value">The value.</param>
            <param name="val">The value.</param>
            <returns><c>true</c> if the Type couold be changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.ToValue(TwinCAT.TypeSystem.IEnumType,System.String)">
            <summary>
            Converts the string represented value to its primitive value.
            </summary>
            <param name="enumType">Base type of the enum.</param>
            <param name="stringValue">The string value.</param>
            <returns>The value as primitive.</returns>
            <exception cref="T:System.ArgumentNullException">
            enumType
            or
            value
            </exception>
            <exception cref="T:System.ArgumentException">Specified type is not an enum type!;enumType</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">stringValue</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumTypeConverter`1.ToString(TwinCAT.TypeSystem.IEnumType,`0)">
            <summary>
            Converts the primitive value of the specified enum type into its string representation.
            </summary>
            <param name="enumType">Base type of the enum.</param>
            <param name="val">The value as primitive.</param>
            <returns>A <see cref="T:System.String" /> that represents the value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">val</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.TypeAttributeCollection">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.ITypeAttribute">AdsAttributes</see>
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.TypeAttributeCollection.list">
            <summary>
            List of Attributes
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.TypeAttributeCollection"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.TypeAttributeCollection.Empty">
            <summary>
            Returns an Empty <see cref="T:TwinCAT.TypeSystem.TypeAttributeCollection"/>.
            </summary>
            <returns>TypeAttributeCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ITypeAttribute})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.TypeAttributeCollection"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.IndexOf(TwinCAT.TypeSystem.ITypeAttribute)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.Insert(System.Int32,TwinCAT.TypeSystem.ITypeAttribute)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.TypeAttributeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>AdsAttribute.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.TypeAttributeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.Add(TwinCAT.TypeSystem.ITypeAttribute)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.AddRange(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ITypeAttribute})">
            <summary>
            Adds the range.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.Contains(TwinCAT.TypeSystem.ITypeAttribute)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:TwinCAT.TypeSystem.TypeAttributeCollection"/> contains the <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.CopyTo(TwinCAT.TypeSystem.ITypeAttribute[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.TypeAttributeCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.TypeAttributeCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.Remove(TwinCAT.TypeSystem.ITypeAttribute)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.Remove(System.String)">
            <summary>
            Removes the specified <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/> from the <see cref="T:TwinCAT.TypeSystem.TypeAttributeCollection"/>
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if the attribute is removed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.AsReadOnly">
            <summary>
            Gets a read only version of this <see cref="T:TwinCAT.TypeSystem.TypeAttributeCollection" />
            </summary>
            <returns>ReadOnlyAttributeCollection.</returns>
            <value>As read only.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.TryGetAttribute(System.String,TwinCAT.TypeSystem.ITypeAttribute[]@)">
            <summary>
            Tries to get the specified <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/>
            </summary>
            <param name="name">The name of the <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/>.</param>
            <param name="att">The att.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.TryGetValue(System.String,System.String[]@)">
            <summary>
            Tries to get the specified Attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if value could be found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttributeCollection.TryGetSingleValue(System.String,System.String@)">
            <summary>
            Tries to get a single attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
            <remarks>If more than one Attribute with the same exists, then this method returns fals.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection">
            <summary>
            Read only version of the <see cref="T:TwinCAT.TypeSystem.TypeAttributeCollection"/>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection.#ctor(TwinCAT.TypeSystem.TypeAttributeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection"/> class (for internal use only)
            </summary>
            <param name="coll">The coll.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection"/> contains the specified attribute.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection.TryGetAttribute(System.String,TwinCAT.TypeSystem.ITypeAttribute[]@)">
            <summary>
            Tries to get the specified <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/>
            </summary>
            <param name="name">The name of the <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/>.</param>
            <param name="attribute">The attribute.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection.TryGetValue(System.String,System.String[]@)">
            <summary>
            Tries to get the specified Attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value could be found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection.TryGetSingleValue(System.String,System.String@)">
            <summary>
            Tries to get a single attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
            <remarks>If more than one Attribute with the same exists, then this method returns fals.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection.Empty">
            <summary>
            Returns an empty <see cref="T:TwinCAT.TypeSystem.ReadOnlyTypeAttributeCollection"/>
            </summary>
            <returns>ReadOnlyTypeAttributeCollection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcMethodCollection">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.IRpcMethod">RpcMethods.</see>
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.RpcMethodCollection._list">
            <summary>
            Internal list (organizing the list index)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.RpcMethodCollection._dict">
            <summary>
            Dictionary MethodName--&gt;RpcMethod for fast search
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IRpcMethod})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodCollection"/> class.
            </summary>
            <param name="methods">The methods.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.#ctor(TwinCAT.Ads.Internal.AdsMethodEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodCollection" /> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodCollection.Empty">
            <summary>
            Gets the empty collection
            </summary>
            <value>The empty collection</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.IndexOf(TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.Insert(System.Int32,TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>RpcMethod.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.Add(TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.AddRange(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IRpcMethod})">
            <summary>
            Adds the range of Methods.
            </summary>
            <param name="methods">The methods.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.Contains(TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns><c>true</c> if contained.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.TryGetMethod(System.String,TwinCAT.TypeSystem.IRpcMethod@)">
            <summary>
            Tries to get the specified method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="method">The method if fund, <c>NULL</c> otherwise.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.TryGetMethod(System.Int32,TwinCAT.TypeSystem.IRpcMethod@)">
            <summary>
            Tries to get the specified method.
            </summary>
            <param name="vTableIndex">VTable index.</param>
            <param name="method">The method if fund, <c>NULL</c> otherwise.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IRpcMethod" /> with the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>RpcMethod.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.CopyTo(TwinCAT.TypeSystem.IRpcMethod[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.RpcMethodCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.Remove(TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodCollection.AsReadOnly">
            <summary>
            Gets a read only collection of this <see cref="T:TwinCAT.TypeSystem.RpcMethodCollection" />
            </summary>
            <returns>ReadOnlyRpcMethodCollection.</returns>
            <value>Returns a read only version of this <see cref="T:TwinCAT.TypeSystem.RpcMethodCollection" /></value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection">
            <summary>
            Read only <see cref="T:TwinCAT.TypeSystem.RpcMethodCollection" />
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection.#ctor(TwinCAT.TypeSystem.RpcMethodCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection" /> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection.Empty">
            <summary>
            Gets the empty collection..
            </summary>
            <value>The empty collection.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns><c>true</c> if contained.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection.TryGetMethod(System.String,TwinCAT.TypeSystem.IRpcMethod@)">
            <summary>
            Tries to get the specified method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="method">The method if fund, <c>NULL</c> otherwise.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection.TryGetMethod(System.Int32,TwinCAT.TypeSystem.IRpcMethod@)">
            <summary>
            Tries to get the specified method.
            </summary>
            <param name="vTableIndex">vTableIndex.</param>
            <param name="method">The method if fund, <c>NULL</c> otherwise.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyRpcMethodCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IRpcMethod" /> with the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>RpcMethod.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeCollection">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.IDataType">DataTypes.</see>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> class (Copy constructor).
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.AsReadOnly">
            <summary>
            Returns A ReadOnly-Version of the  <see cref="T:TwinCAT.TypeSystem.DataTypeCollection" />.
            </summary>
            <returns>A read only version of this <see cref="T:TwinCAT.TypeSystem.DataTypeCollection" />.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeCollection.Clone">
            <summary>
            Clones this <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/> (Shallow Copy)
            </summary>
            <returns>A clone of this <see cref="T:TwinCAT.TypeSystem.DataTypeCollection"/>.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.DataTypeCollection.Empty">
            <summary>
            Gets the empty collection.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyDataTypeCollection">
            <summary>
            ReadOnly Collection of <see cref="T:TwinCAT.TypeSystem.IDataType"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyDataTypeCollection.#ctor(TwinCAT.TypeSystem.Generic.DataTypeCollection{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyDataTypeCollection"/> class.
            </summary>
            <param name="coll">Collection of types.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyDataTypeCollection.Empty">
            <summary>
            Gets the empty collection.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.FluentAlignedMemberCollectionExtension">
            <summary>
            Class FluentStructTypeExtension.
            </summary>
            <remarks>
            Fluent interface for adding members to <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>s.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.FluentAlignedMemberCollectionExtension.AddAligned(TwinCAT.TypeSystem.AlignedMemberCollection,TwinCAT.TypeSystem.IMember)">
            <summary>
            Adds a member to the <see cref="T:TwinCAT.Ads.TypeSystem.StructType"/>
            </summary>
            <param name="str">The string.</param>
            <param name="member">The member.</param>
            <returns>StructType.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.AlignedMemberCollection">
            <summary>
            Class AlignedMemberCollection.
            Implements the <see cref="T:TwinCAT.TypeSystem.MemberCollection" />
            </summary>
            <remarks>The <see cref="T:TwinCAT.TypeSystem.AlignedMemberCollection"/> calculates its member offsets by itself. Dependant on the pack mode</remarks>
            <seealso cref="T:TwinCAT.TypeSystem.MemberCollection" />
        </member>
        <member name="M:TwinCAT.TypeSystem.AlignedMemberCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AlignedMemberCollection"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.AlignedMemberCollection.Empty">
            <summary>
            Returns an Empty Member Collection.
            </summary>
            <returns>MemberCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AlignedMemberCollection.Add(TwinCAT.TypeSystem.IMember)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">item</exception>
            <exception cref="T:System.NotSupportedException">Static members are not supported yet!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AlignedMemberCollection.Insert(System.Int32,TwinCAT.TypeSystem.IMember)">
            <summary>
            Inserts the specified <see cref="T:TwinCAT.TypeSystem.IInstance" /> at the specified index.
            </summary>
            <param name="index">The instance.</param>
            <param name="instance">The item.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AlignedMemberCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:TwinCAT.TypeSystem.IInstance" /> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.MemberCollection">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.IMember"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MemberCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IMember})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.MemberCollection"/> class (copy constructor)
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.AsReadOnly">
            <summary>
            Returns a read only copy of this collection (shallow copy)
            </summary>
            <returns>The readonly copy.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.MemberCollection.Empty">
            <summary>
            Returns an Empty Member Collection.
            </summary>
            <returns>MemberCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.Clone">
            <summary>
            Clones this <see cref="T:TwinCAT.TypeSystem.MemberCollection"/>.
            </summary>
            <returns>A cloned <see cref="T:TwinCAT.TypeSystem.MemberCollection"/>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.TryGetMember(System.String,TwinCAT.TypeSystem.IMember@)">
            <summary>
            Tries to get the specified member
            </summary>
            <param name="fieldName">Name of the member.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.CalcSize">
            <summary>
            Calculates the Byte Size of the <see cref="T:TwinCAT.TypeSystem.IMemberCollection" />
            </summary>
            <returns>System.Int32.</returns>
            <remarks>This takes only the instance fields/members into account.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.MemberCollection.Instances">
            <summary>
            Gets the Instance members (non static)
            </summary>
            <value>The instances.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.MemberCollection.Statics">
            <summary>
            Gets the Static Members
            </summary>
            <value>The statics.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.MemberCollection.Add(TwinCAT.TypeSystem.IMember)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.FieldCollection">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.IField"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.FieldCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.FieldCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.FieldCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IField})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.FieldCollection"/> class (copy constructor)
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.FieldCollection.AsReadOnly">
            <summary>
            Returns a read only copy of this collection (shallow copy)
            </summary>
            <returns>The readonly copy.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.FieldCollection.Clone">
            <summary>
            Clones this <see cref="T:TwinCAT.TypeSystem.FieldCollection"/>.
            </summary>
            <returns>A cloned <see cref="T:TwinCAT.TypeSystem.FieldCollection"/>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.FieldCollection.TryGetMember(System.String,TwinCAT.TypeSystem.IField@)">
            <summary>
            Tries to get the specified member
            </summary>
            <param name="fieldName">Name of the member.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyFieldCollection">
            <summary>
            Read only collection of <see cref="T:TwinCAT.TypeSystem.IField"/> objects
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyFieldCollection.#ctor(TwinCAT.TypeSystem.FieldCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyMemberCollection"/> class.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyFieldCollection.TryGetMember(System.String,TwinCAT.TypeSystem.IField@)">
            <summary>
            Tries to get the specified member
            </summary>
            <param name="fieldName">Name of the member.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyMemberCollection">
            <summary>
            Read only collection of <see cref="T:TwinCAT.TypeSystem.IMember"/> objects
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyMemberCollection.#ctor(TwinCAT.TypeSystem.MemberCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyMemberCollection"/> class.
            </summary>
            <param name="members">The members.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyMemberCollection.TryGetMember(System.String,TwinCAT.TypeSystem.IMember@)">
            <summary>
            Tries to get the specified member
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyMemberCollection.Empty">
            <summary>
            Returns an Empty <see cref="T:TwinCAT.TypeSystem.ReadOnlyMemberCollection"/>
            </summary>
            <returns>ReadOnlyMemberCollection.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyMemberCollection.Statics">
            <summary>
            Gets the Static Members
            </summary>
            <value>The statics.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyMemberCollection.Instances">
            <summary>
            Gets the Instance members (non static)
            </summary>
            <value>The instances.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyMemberCollection.CalcSize">
            <summary>
            Calculates the Byte Size of the <see cref="T:TwinCAT.TypeSystem.IMemberCollection" />
            </summary>
            <returns>System.Int32.</returns>
            <remarks>This takes only the instance fields/members into account.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolCollection">
            <summary>
            Interface represents a collection of <see cref="T:TwinCAT.TypeSystem.ISymbol"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolCollection"/> class organized with InstancePath.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.#ctor(TwinCAT.TypeSystem.InstanceCollectionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolCollection" /> class.
            </summary>
            <param name="mode">The mode.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolCollection"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.AsReadOnly">
            <summary>
            Returns a Read only version of this collection (shallow copy).
            </summary>
            <returns>Read only collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolCollection.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>Cloned <see cref="T:TwinCAT.TypeSystem.SymbolCollection"/>.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolCollection.Empty">
            <summary>
            Returns an Empty Collection.
            </summary>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlySymbolCollection">
            <summary>
            ReadOnly collection containing <see cref="T:TwinCAT.TypeSystem.ISymbol"/> objects.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlySymbolCollection.#ctor(TwinCAT.TypeSystem.IInstanceCollection{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlySymbolCollection"/> class.
            </summary>
            <param name="symbols">The symbols.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlySymbolCollection.Empty">
            <summary>
            Returns an Empty collection.
            </summary>
            <returns>ReadOnlySymbolCollection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.NamespaceCollection">
            <summary>
            Collection of Namespaces (internally using <see cref="T:TwinCAT.TypeSystem.Generic.INamespace`1" />
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.NamespaceCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.NamespaceCollection" /> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.NamespaceCollection.AsReadOnly">
            <summary>
            Creates a read-only version of this <see cref="T:TwinCAT.TypeSystem.NamespaceCollection" />.
            </summary>
            <returns>A readonly <see cref="T:TwinCAT.TypeSystem.NamespaceCollection" />.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.NamespaceCollection.RegisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers a type on its namespace
            </summary>
            <param name="type">The type.</param>
            <remarks>Creates a new namespace if not existing in the collection.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyNamespaceCollection">
            <summary>
            ReadOnly namespace collection
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyNamespaceCollection.#ctor(TwinCAT.TypeSystem.NamespaceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyNamespaceCollection" /> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.EnumValue`1">
            <summary>
            Enum Value
            </summary>
            <typeparam name="T">Enum base type (byte,sbyte,short,ushort,int,uint,long or ulong)</typeparam>
        </member>
        <member name="F:TwinCAT.TypeSystem.EnumValue`1._name">
            <summary>
            Name of the Enum Value (as string)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.EnumValue`1._value">
            <summary>
            The Value of the Enum
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValue`1.Name">
            <summary>
            Gets the name of the Enum Value
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValue`1.Primitive">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValue`1.ToAdsEnumEntry(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Converts to <see cref="T:TwinCAT.Ads.Internal.AdsEnumInfoEntry"/>
            </summary>
            <param name="marshaler">The marshaler.</param>
            <returns>AdsEnumInfoEntry.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValue`1.#ctor(TwinCAT.Ads.Internal.AdsEnumInfoEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.EnumValue`1"/> class.
            </summary>
            <param name="entry">The entry.</param>
            <exception cref="T:System.ArgumentException">Wrong Enum base type.</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValue`1.#ctor(TwinCAT.TypeSystem.IEnumType{`0},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.EnumValue`1"/> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValue`1.#ctor(System.String,`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.EnumValue`1"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="valueSize">Value size in bytes.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValue`1.TwinCAT#TypeSystem#IEnumValue#Primitive">
            <summary>
            Gets the Value of the enumeration value (value as object)
            </summary>
            <value>The object value.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValue`1.RawValue">
            <summary>
            Gets the raw value of the enumeration (as byte array)
            </summary>
            <value>The raw value.</value>
            <exception cref="T:System.NotSupportedException">Base type of enum is not allowed!</exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValue`1.ManagedBaseType">
            <summary>
            Gets the enumeration base type (sint,byte,short,ushort,int,uint,Int64,UInt64 supported)
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValue`1.Size">
            <summary>
            Gets the size of the Enum value (in bytes)
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValue`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValue`1.TryParse(TwinCAT.TypeSystem.IEnumType{`0},System.String,TwinCAT.TypeSystem.EnumValue{`0}@)">
            <summary>
            Parse EnumType string
            </summary>
            <param name="type">The type.</param>
            <param name="str">The string.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.TypeSystem.EnumValue`1"/> could be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValue`1.Parse(TwinCAT.TypeSystem.IEnumType{`0},System.String)">
            <summary>
            Parse Enum Type string
            </summary>
            <param name="type">The type.</param>
            <param name="str">The string.</param>
            <returns>EnumValue&lt;T&gt;.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.EnumValueCollection`1">
            <summary>
            Collection of <see cref="T:TwinCAT.TypeSystem.EnumValue`1">EnumValues</see>
            </summary>
            <typeparam name="T">Base type of enum</typeparam>
        </member>
        <member name="F:TwinCAT.TypeSystem.EnumValueCollection`1._list">
            <summary>
            Internal list organizing the Index
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.EnumValueCollection`1._nameValueDict">
            <summary>
            Dictionary Name --&gt; EnumValue for fast find
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.#ctor(TwinCAT.Ads.Internal.AdsEnumInfoEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.EnumValueCollection`1" /> class.
            </summary>
            <param name="coll">The coll.</param>
            <exception cref="T:System.ArgumentNullException">coll</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.EnumValueCollection`1"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.IndexOf(TwinCAT.TypeSystem.EnumValue{`0})">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Insert(System.Int32,TwinCAT.TypeSystem.EnumValue{`0})">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>EnumValue&lt;T&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection`1.Item(System.String)">
            <summary>
            Gets the enumeration value <paramref name="str"/> from the string representation.
            </summary>
            <param name="str">The string.</param>
            <returns>T.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Add(TwinCAT.TypeSystem.EnumValue{`0})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.AddValue(System.String,`0)">
            <summary>
            Adds the value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns>EnumValueCollection&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Contains(TwinCAT.TypeSystem.EnumValue{`0})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.TryGetValue(`0,TwinCAT.TypeSystem.EnumValue{`0}@)">
            <summary>
            Tries to get the value
            </summary>
            <param name="val">The value.</param>
            <param name="ei">The ei.</param>
            <returns><c>true</c> if the value is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.TryParse(System.String,`0@)">
            <summary>
            Parse the specified string to the enum value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.TryParse(System.String,TwinCAT.TypeSystem.EnumValue{`0}@)">
            <summary>
            Parse the specified string to the enum value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Parse(System.String)">
            <summary>
            Parses the specified string to the Enum value.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">name</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.CopyTo(TwinCAT.TypeSystem.EnumValue{`0}[],System.Int32)">
            <summary>
            Copies the entire list.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.Remove(TwinCAT.TypeSystem.EnumValue{`0})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.GetNames">
            <summary>
            Gets the names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.AsReadOnly">
            <summary>
            Gets as read only.
            </summary>
            <returns>ReadOnlyEnumValueCollection&lt;T&gt;.</returns>
            <value>As read only.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection`1.op_Explicit(TwinCAT.TypeSystem.EnumValueCollection{`0})~TwinCAT.TypeSystem.EnumValueCollection">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.EnumValueCollection`1" /> to <see cref="T:TwinCAT.TypeSystem.EnumValueCollection" />.
            </summary>
            <param name="coll">The coll.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection`1.Empty">
            <summary>
            Return an Empty Collection.
            </summary>
            <returns>EnumValueCollection&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1">
            <summary>
            Read only version of the <see cref="T:TwinCAT.TypeSystem.EnumValueCollection`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.#ctor(TwinCAT.TypeSystem.EnumValueCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified name].
            </summary>
            <param name="value">Value</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.TryParse(System.String,`0@)">
            <summary>
            Tries to parse the string value of the Enum.
            </summary>
            <param name="strValue">The Value in string represention.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the enum value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.TryParse(System.String,TwinCAT.TypeSystem.EnumValue{`0}@)">
            <summary>
            Tries to parse the string value of the Enum.
            </summary>
            <param name="strValue">The Value in string represention.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the enum value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.GetNames">
            <summary>
            Gets the Value Names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1.Item(System.String)">
            <summary>
            Gets the enumeration value <typeparamref name="T"/> from its string representation.
            </summary>
            <param name="name">The name of the enum value.</param>
            <returns>T.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.EnumValueCollection">
            <summary>
            Class EnumValueCollection.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.EnumValueCollection._list">
            <summary>
            Internal list organizing the Index
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.EnumValueCollection._nameValueDict">
            <summary>
            Dictionary Name --> EnumValue for fast find
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.#ctor(TwinCAT.Ads.AdsDataTypeId,TwinCAT.Ads.Internal.AdsEnumInfoEntry[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.EnumValueCollection`1" /> class.
            </summary>
            <param name="typeId">The type identifier.</param>
            <param name="coll">The coll.</param>
            <exception cref="T:System.ArgumentNullException">coll</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IEnumValue})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.EnumValueCollection"/> class (for internal use only).
            </summary>
            <param name="coll">The coll.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.IndexOf(TwinCAT.TypeSystem.IEnumValue)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Insert(System.Int32,TwinCAT.TypeSystem.IEnumValue)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>EnumValue&lt;T&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection.Item(System.String)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="name">The name of the value</param>
            <returns>EnumValue&lt;T&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Add(TwinCAT.TypeSystem.IEnumValue)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Contains(TwinCAT.TypeSystem.IEnumValue)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified name].
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Contains(System.Object)">
            <summary>
            Determines whether [contains] [the specified value].
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if [contains] [the specified value]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.TryGetInfo(System.Object,TwinCAT.TypeSystem.IEnumValue@)">
            <summary>
            Tries the get information.
            </summary>
            <param name="val">The value.</param>
            <param name="ei">The ei.</param>
            <returns><c>true</c> if the value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.TryParse(System.String,System.IConvertible@)">
            <summary>
            Parse the specified string to the enum value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.TryParse(System.String,TwinCAT.TypeSystem.IEnumValue@)">
            <summary>
            Parse the specified string to the enum value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Parse(System.String)">
            <summary>
            Parses the specified string to the Enum value.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">name</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.ToArray(TwinCAT.TypeSystem.IStringMarshaler)">
            <summary>
            Converts to array.
            </summary>
            <param name="marshaler">The marshaler.</param>
            <returns>AdsEnumInfoEntry[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.CopyTo(TwinCAT.TypeSystem.IEnumValue[],System.Int32)">
            <summary>
            Copies the entire list.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.EnumValueCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.Remove(TwinCAT.TypeSystem.IEnumValue)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.GetNames">
            <summary>
            Gets the names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.EnumValueCollection.AsReadOnly">
            <summary>
            Gets as read only.
            </summary>
            <returns>ReadOnlyEnumValueCollection.</returns>
            <value>As read only.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection">
            <summary>
            Read only version of the <see cref="T:TwinCAT.TypeSystem.EnumValueCollection`1" />
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.#ctor(TwinCAT.TypeSystem.EnumValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection`1"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified name].
            </summary>
            <param name="value">Value</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.TryParse(System.String,System.IConvertible@)">
            <summary>
            Tries to pars the string value of the Enum.
            </summary>
            <param name="strValue">The Value in string represention.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.TryParse(System.String,TwinCAT.TypeSystem.IEnumValue@)">
            <summary>
            Tries to pars the string value of the Enum.
            </summary>
            <param name="strValue">The Value in string represention.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the value can be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.GetNames">
            <summary>
            Gets the Value Names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyEnumValueCollection.Item(System.String)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="name">The name of the value</param>
            <returns>EnumValue&lt;T&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.ArrayElementSymbolCollection">
            <summary>
            This collection represents the SubItems of an Array
            </summary>
            <remarks>This <see cref="T:TwinCAT.TypeSystem.ISymbolCollection`1"/> is an optimization for <see cref="T:TwinCAT.TypeSystem.SymbolCollection"/> which doesn't cache the
            contained Elements. Here in the <see cref="T:TwinCAT.TypeSystem.ArrayElementSymbolCollection"/> the array elements will be created 'On-Access'.
            Additionally, this collection is Read-Only.
            </remarks>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayElementSymbolCollection._arrayInstance">
            <summary>
            The array instance (can be ArrayInstance, Union Instance or Reference instance!)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayElementSymbolCollection._arrayType">
            <summary>
            The array type (Can be Array, Union Array, or Reference to Array)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayElementSymbolCollection._symbolFactory">
            <summary>
            The used symbol factory
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.#ctor(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IArrayType,TwinCAT.TypeSystem.ISymbolFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ArrayElementSymbolCollection"/> class organized with InstancePath.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Item(System.Int32)">
            <summary>
            Gets the ArrayElementInstance at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>ISymbol.</returns>
            <remarks>The Index Setter will throw an exception.</remarks>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Item(System.String)">
            <summary>
            Gets the Array element instance with the specified instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>ISymbol.</returns>
            <exception cref="T:System.ArgumentException">Symbol not found!</exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Count">
            <summary>
            Gets the number of contained array element instances.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ArrayElementSymbolCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Mode">
            <summary>
            Gets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Add(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Contains(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Determines whether the specified ArrayElement instance is contained
            </summary>
            <param name="element">The item.</param>
            <returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the array element with the specified path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns><c>true</c> if [contains] [the specified instance path]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.ContainsName(System.String)">
            <summary>
            Determines whether this collection contains an ArrayElement with the specified name with indices.
            </summary>
            <param name="instanceNameWithIndices">The instance name with indices.</param>
            <returns><c>true</c> if the specified instance name with indices contains name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.CopyTo(TwinCAT.TypeSystem.ISymbol[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator&lt;ISymbol&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.GetInstance(System.String)">
            <summary>
            Gets the instance.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.GetInstanceByName(System.String)">
            <summary>
            Gets the name of the instance by.
            </summary>
            <param name="instanceNameWithIndices">The instance name with indices.</param>
            <returns>IList&lt;ISymbol&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.IndexOf(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Gets the SubIndex of the specified Array Element instance.
            </summary>
            <param name="item">The item.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">item</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Insert(System.Int32,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.Remove(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the symbol is removed, <c>false</c> otherwise.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.RemoveAt(System.Int32)">
            <summary>
            Removes at.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.TryGetInstance(System.String,TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries the get instance.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if the symbol is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.TryGetInstanceByName(System.String,System.Collections.Generic.IList{TwinCAT.TypeSystem.ISymbol}@)">
            <summary>
            Tries the name of the get instance by.
            </summary>
            <param name="instanceNameWithIndices">The instance name with indices.</param>
            <param name="symbols">The symbols.</param>
            <returns><c>true</c> if the symbol(s) are found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayElementSymbolCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="T:TwinCAT.ValueAccess.CannotAccessValueException">
            <summary>
            Class CannotAccessValueException. This class cannot be inherited.
            Implements the <see cref="T:TwinCAT.TypeSystem.SymbolException" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.SymbolException" />
        </member>
        <member name="M:TwinCAT.ValueAccess.CannotAccessValueException.#ctor(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.CannotAccessValueException"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.CannotAccessValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.CannotAccessValueException"/> class.
            </summary>
        </member>
        <member name="T:TwinCAT.ValueAccess.ValueAccessorException">
            <summary>
            Value Accessor Exceptions
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessorException._accessor">
            <summary>
            Symbol that is bound to the <see cref="T:TwinCAT.ValueAccess.IAccessorRawValue" />
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueAccessorException.Accessor">
            <summary>
            Symbol that is bound to the <see cref="T:TwinCAT.ValueAccess.IAccessorRawValue" />
            </summary>
            <value>The accessor.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessorException.#ctor(TwinCAT.ValueAccess.IAccessorRawValue,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueAccessorException" /> class.
            </summary>
            <param name="accessor">The accessor.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessorException.#ctor(System.String,TwinCAT.ValueAccess.IAccessorRawValue)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueAccessorException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="accessor">The accessor.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessorException.#ctor(System.String,TwinCAT.ValueAccess.IAccessorRawValue,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueAccessorException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="accessor">The accessor.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueAccessorException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.ValueAccess.ValueAccessor">
            <summary>
            Value Accessor base class (implements RawValue and Value Access)
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorRawValue" />
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorValue" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueAccessor" /> class.
            </summary>
            <param name="factory">The value factory.</param>
            <param name="session">The session (if session based) or NULL</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueAccessor" /> class.
            </summary>
            <param name="factory">The value factory.</param>
            <param name="connection">The connection.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessor.connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueAccessor.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessor.session">
            <summary>
            Session object
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueAccessor.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session or NULL if not session based.</value>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessor.valueFactory">
            <summary>
            The value factory
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueAccessor.ValueFactory">
            <summary>
            Gets the value factory.
            </summary>
            <value>The value factory.</value>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueAccessor.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.ReadValue(TwinCAT.TypeSystem.ISymbol,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads the symbol value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="timeStamp">The read time snapshot.</param>
            <returns>The value object (Primitive type or DynamicValue)</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.TryReadArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads an array element value as bytes.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices specify which element to read.</param>
            <param name="destination">The destination / value memory.</param>
            <param name="timeStamp">The read time snapshot</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.TryReadValue(TwinCAT.TypeSystem.ISymbol,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads a value from the specified ADS address
            </summary>
            <param name="symbol">The address.</param>
            <param name="value">Raw value</param>
            <param name="timeStamp">The read time snapshot.</param>
            <returns>AdsErrorCode.</returns>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the symbol value as an asynchronous operation.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReadValue' operation. The value of the result can be accessed via the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> result.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.TryReadRaw(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Try to read value
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="value">The value.</param>
            <param name="utcReadTime">The read time snapshot (User Time, UTC)</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.TryWriteArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes an array element value from raw memory asynchronously to the ADS Device.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="sourceData">The data to write to the ADS Device./>.</param>
            <param name="timeStamp">Write time / timestamp</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.TryWriteValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to write the Value
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="utcWriteTime">The UTC write time.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.TryWriteRaw(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to write the Value
            </summary>
            <param name="symbolInstance">The address.</param>
            <param name="sourceValue">The value as memory.</param>
            <param name="utcWriteTime">The write time snapshot.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes the value to the symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value</param>
            <param name="utcWriteTime">The write time snapshot.</param>
            <exception cref="T:System.ArgumentNullException">
            symbol
            or
            value
            </exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the value as asynchronous operation.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'WriteValue' operation. The task result is available via the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> type.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.ReadRawAsync(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read the raw memory value as asynchronous operation.
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="destination">the memory destination.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReadRaw' operation. The result of the operation is represented by the type <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess"/>.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.ReadArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the raw memory value of an array element as asynchronous operation
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the element</param>
            <param name="destination">Memory location for the value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'ReadArrayElementRaw' operation. The result of the operation is represented by the type <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess"/>.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.WriteRawAsync(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the raw value to the symbol as asynchronous operation.
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="sourceValue">The raw source value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'WriteRAw' operation. The result of the operation is represented by the type <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" />.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.WriteArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the raw value of an array element as asynchronous operation.
            </summary>
            <param name="arrayInstance">The symbol instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="sourceValue">The raw source element value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'WriteRAw' operation. The result of the operation is represented by the type <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" />.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.OnRawValueChanged(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.DateTimeOffset)">
            <summary>
            Handler function for reading the raw value asynchronously.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="rawValue">The raw value.</param>
            <param name="timeStamp">The timstamp of the read operation.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueAccessor.OnValueChanged(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.DateTimeOffset)">
            <summary>
            Called when the (Primitive) Value changes
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="source">The raw source value.</param>
            <param name="timeStamp">The timestamp specifying the time when the value change occurred.</param>
        </member>
        <member name="T:TwinCAT.ValueAccess.RpcNotificationAccessorBase">
            <summary>
            Abstract base class for Accessing Values with the RawValue, Value, Rpc and Notification concept.
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.ValueAccessor" />
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorNotification" />
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorRpc" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.RpcNotificationAccessorBase" /> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.IConnection,TwinCAT.Ads.INotificationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.RpcNotificationAccessorBase" /> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="connection">The connection.</param>
            <param name="defaultSettings">The default settings.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.RpcNotificationAccessorBase" /> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.#ctor(TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.ISession,TwinCAT.Ads.INotificationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.RpcNotificationAccessorBase" /> class.
            </summary>
            <param name="valueFactory">The value factory.</param>
            <param name="session">The session.</param>
            <param name="defaultSettings">The default settings.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.OnRegisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.INotificationSettings)">
            <summary>
            Registers a Notification on the <see cref="T:TwinCAT.TypeSystem.ISymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
            <param name="settings">The settings.</param>
            <exception cref="T:System.ArgumentNullException">
            symbol
            or
            settings
            </exception>
            <exclude />
            <remarks>Only one Notification is allowed on the symbol. On case of double announcement, we set the Notification parameters
            to the higher priority.</remarks>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.OnUnregisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes)">
            <summary>
            Unregisters a Notification from the <see cref="T:TwinCAT.TypeSystem.ISymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exclude />
        </member>
        <member name="F:TwinCAT.ValueAccess.RpcNotificationAccessorBase._notificationSettings">
            <summary>
            Default notification settings.
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.RpcNotificationAccessorBase.DefaultNotificationSettings">
            <summary>
            Gets / Sets the NotificationSettings that are used for Notification Defaults.
            </summary>
            <value>The default notification settings.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.TryGetNotificationSettings(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.INotificationSettings@)">
            <summary>
            Tries to get the current Notification Settings for the specified Symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="settings">The settings.</param>
            <returns>
            true, if already a notification for this symbol is registered. False if not.
            </returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.TryInvokeRpcMethod(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Invokes the RPC Method and returns its <paramref name="returnValue" />.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters spec.</param>
            <param name="retSpec">The ret spec.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="returnValue">The return value (Returns Null vor 'void' RpcMethods)</param>
            <param name="timeStamp">The invoke time snapshot.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.RpcNotificationAccessorBase.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the RPC Method asynchronously and returns its RPC Return value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters spec.</param>
            <param name="retSpec">The ret spec.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> parameter contains the return value (optionally)
            (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue" />) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="T:TwinCAT.ValueAccess.ValueFactory">
            <summary>
            Value Factory
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorValueFactory" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueFactory.mode">
            <summary>
            The Value Creation mode
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueFactory.Mode">
            <summary>
            Gets the <see cref="T:TwinCAT.ValueAccess.ValueCreationModes"/>
            </summary>
            <value>The mode.</value>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueFactory.valueMarshaler">
            <summary>
            The value converter / Marshaller
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueFactory.ValueConverter">
            <summary>
            The value converter / Marshaller
            </summary>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueFactory.#ctor(TwinCAT.ValueAccess.ValueCreationModes)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueFactory"/> class.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ValueFactory"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueFactory.accessor">
            <summary>
            A Backlink to the Value Accessor.
            </summary>
            <remarks>This enables the DynamicValueFactory to Dereference References 'On the fly'</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueFactory.SetValueAccessor(TwinCAT.ValueAccess.IAccessorRawValue)">
            <summary>
            Sets the value accessor
            </summary>
            <param name="accessor">The accessor.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueFactory.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor or NULL</value>
            <remarks>The Value accessor can be used for the possibility to Read Values on ValueAccess on the Fly.
            E.g. when dereferencing ReferenceTypes on property access.
            The 'on-the-fly' access is optional and doesn't have to be supported, but the DynamicValueFactory can use if available.</remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.ValueAccess.ValueFactory.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueFactory.SetDefaultValueStringEncoding(System.Text.Encoding)">
            <summary>
            Sets the default value string encoding.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueFactory.CreatePrimitiveValue(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IValue,System.DateTimeOffset)">
            <summary>
            Creates a primitive value, independent of any settings.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="sourceData">The source data.</param>
            <param name="parent">The parent.</param>
            <param name="timeStamp">The time stamp.</param>
            <returns>A primitive value.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.ValueFactory.CreateValue(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IValue,System.DateTimeOffset)">
            <summary>
            Creates the value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="source">The source memory.</param>
            <param name="parent">The parent.</param>
            <param name="timeStamp">The time stamp.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">source</exception>
        </member>
        <member name="T:TwinCAT.ValueAccess.DynamicValueAccessor">
            <summary>
            Dynamic Value Accessor implementation class
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.ValueAccess.DynamicValueAccessor._mode">
            <summary>
            Value Access Mode
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.DynamicValueAccessor._inner">
            <summary>
            The inner value accessor
            </summary>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.#ctor(TwinCAT.ValueAccess.IAccessorValue,TwinCAT.ValueAccess.IAccessorValueFactory,TwinCAT.ValueAccess.ValueCreationModes)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.DynamicValueAccessor" /> class.
            </summary>
            <param name="inner">The inner Accessor</param>
            <param name="factory">The factory.</param>
            <param name="mode">The mode.</param>
            <exception cref="T:System.ArgumentNullException">valueAccessor</exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes the value to the symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value (Primitive typed value or <see cref="T:TwinCAT.TypeSystem.DynamicValue" /></param>
            <param name="utcWriteTime">The write time snapshot.</param>
            <exception cref="T:System.ArgumentNullException">
            symbol
            or
            value
            </exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the value as asynchronous operation.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'WriteValue' operation. The task result is available via the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> type.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.TryWriteValue(TwinCAT.TypeSystem.IDynamicValue,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes a dynamic symbol value.
            </summary>
            <param name="value">Dynamic value (non primitive type).</param>
            <param name="utcWriteTime">The write time snapshot.</param>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentException">value</exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.WriteValueAsync(TwinCAT.TypeSystem.IDynamicValue,System.Threading.CancellationToken)">
            <summary>
            Writes the value asynchronously.
            </summary>
            <param name="value">The value to write</param>
            <param name="cancel">The cancellation token..</param>
            <returns>An asynchronous task object that represents the 'WriteValue' operation. The result type of the task is <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/>.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.OnRegisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.INotificationSettings)">
            <summary>
            Registers a Notification on the <see cref="T:TwinCAT.TypeSystem.ISymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
            <param name="settings">The settings.</param>
            <exclude />
            <remarks>Only one Notification is allowed on the symbol. On case of double announcement, we set the Notification parameters
            to the higher priority.</remarks>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.OnUnregisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes)">
            <summary>
            Unregisters a Notification from the <see cref="T:TwinCAT.TypeSystem.ISymbol" />.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.TryInvokeRpcMethod(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Invokes the RPC Method and returns its <paramref name="returnValue" />.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters specifications or NULL</param>
            <param name="retSpec">The return value specification or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="returnValue">The return value (Returns Null vor 'void' RpcMethods)</param>
            <param name="timeStamp">The invoke time snapshot.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the RPC Method asynchronously and returns its RPC Return value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters spec.</param>
            <param name="retSpec">The ret spec.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> parameter contains the return value (optionally)
            (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue" />) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.TryReadArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads an array element value as bytes.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices specify which element to read.</param>
            <param name="destination">The destination / value memory.</param>
            <param name="timeStamp">The read time snapshot</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.ReadArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the array element value as bytes asynchronously.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices, which specify the element to read.</param>
            <param name="destination">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadArrayElementRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess" /> result contains the
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value" />) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.TryReadRaw(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Try to read value
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="value">The value.</param>
            <param name="utcReadTime">The read time snapshot (User Time, UTC)</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.ReadRawAsync(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read a Symbol value asynchronously as bytes .
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="destination">The destination / value memory.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess"/> result contains the
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/>) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.TryWriteArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes an array element value from raw memory asynchronously to the ADS Device.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="sourceData">The data to write to the ADS Device./>.</param>
            <param name="timeStamp">Write time / timestamp</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.WriteArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes an array element value from raw memory asynchronously to the ADS Device.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="sourceData">The element value to write in raw memory format.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> result contains the
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.TryWriteRaw(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes the symbol value from source memory location to the ADS Device.
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="source">The source memory location.</param>
            <param name="timeStamp">The write timestamp.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueAccessor.WriteRawAsync(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the symbol value asynchronously from source memory location to the ADS Device.
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="sourceData">The source value from memory location.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> result contains the
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="T:TwinCAT.ValueAccess.DynamicValueFactory">
            <summary>
            Class DynamicValueFactory.
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorValueFactory" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueFactory.#ctor(TwinCAT.ValueAccess.ValueUpdateMode,TwinCAT.ValueAccess.ValueCreationModes,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.DynamicValueFactory" /> class.
            </summary>
            <param name="updateMode">The update mode.</param>
            <param name="creationModes">The creation modes.</param>
            <param name="expandArrayElements">if set to <c>true</c> [expand array elements].</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueFactory.#ctor(TwinCAT.ValueAccess.ValueCreationModes)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.DynamicValueFactory" /> class.
            </summary>
            <param name="valueCreationMode">The value creation mode.</param>
        </member>
        <member name="F:TwinCAT.ValueAccess.DynamicValueFactory._expandArrayElements">
            <summary>
            Expands Array Elements on Array creation
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.DynamicValueFactory._updateMode">
            <summary>
            The value update mode
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.DynamicValueFactory.UpdateMode">
            <summary>
            Gets the Value update mode.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueFactory.CreateValue(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IValue,System.DateTimeOffset)">
            <summary>
            Creates the symbols value from raw memory data
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="sourceData">Memory data.</param>
            <param name="parent">The parent value</param>
            <param name="timeStamp">The timestamp of the memory data.</param>
            <returns>The unmarshalled value object.</returns>
            <exception cref="T:System.ArgumentNullException">symbol</exception>
            <exception cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"></exception>
            <remarks>The <paramref name="parent" /> argument is used to organize values in hierarchies, equally to the corresponding symbol/instance trees.</remarks>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueFactory.createPointer(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IPointerType,System.Memory{System.Byte},TwinCAT.TypeSystem.IValue,System.DateTimeOffset)">
            <summary>
            Creates a Pointer Value
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="resolved">The resolved.</param>
            <param name="data">The data.</param>
            <param name="parent">The parent.</param>
            <param name="timeStamp">The time stamp.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.DynamicValueFactory.createValueArray(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IArrayType,System.Memory{System.Byte},TwinCAT.TypeSystem.IValue,System.DateTimeOffset)">
            <summary>
            Creates the value array.
            </summary>
            <param name="arraySymbol">The array symbol.</param>
            <param name="arrayType">Type of the array.</param>
            <param name="data">The data.</param>
            <param name="parent">The parent.</param>
            <param name="utcReadTime">The UTC read time.</param>
            <returns>System.Object.</returns>
            <exception cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"></exception>
        </member>
        <member name="T:TwinCAT.SessionException">
            <summary>
            Session Exception
            </summary>
            <seealso cref="T:TwinCAT.AdsException" />
        </member>
        <member name="F:TwinCAT.SessionException._session">
            <summary>
            The session
            </summary>
        </member>
        <member name="P:TwinCAT.SessionException.Session">
            <summary>
            Gets the session.
            </summary>
            <value>The session.</value>
        </member>
        <member name="M:TwinCAT.SessionException.#ctor(System.String,TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:TwinCAT.SessionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwinCAT.SessionException.#ctor(System.String,TwinCAT.ISession,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="session">The session.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.SessionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="M:TwinCAT.SessionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.SessionNotConnectedException">
            <summary>
            Class SessionNotConnectedException.
            </summary>
            <seealso cref="T:TwinCAT.SessionException" />
        </member>
        <member name="M:TwinCAT.SessionNotConnectedException.#ctor(TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionNotConnectedException" /> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:TwinCAT.SessionNotConnectedException.#ctor(System.String,TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionNotConnectedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="session">The session.</param>
        </member>
        <member name="M:TwinCAT.SessionNotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionNotConnectedException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.ClientNotConnectedException">
            <summary>
            Class ClientNotConnectedException
            </summary>
        </member>
        <member name="P:TwinCAT.ClientNotConnectedException.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="M:TwinCAT.ClientNotConnectedException.#ctor(TwinCAT.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ClientNotConnectedException" /> class.
            </summary>
        </member>
        <member name="M:TwinCAT.ClientNotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ClientNotConnectedException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.HandleBagNotInitializedException">
            <summary>
            Class ClientNotConnectedException
            </summary>
        </member>
        <member name="M:TwinCAT.HandleBagNotInitializedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.HandleBagNotInitializedException" /> class.
            </summary>
        </member>
        <member name="M:TwinCAT.HandleBagNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.HandleBagNotInitializedException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.SystemService.SystemServiceExtension">
            <summary>
            Class SystemServiceExtensions.
            </summary>
        </member>
        <member name="M:TwinCAT.SystemService.SystemServiceExtension.PollSystemServiceStateAsync(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit},System.Threading.CancellationToken)">
            <summary>
            Polls the system service state asynchronously
            </summary>
            <param name="connection">The client (should be an IAdsConnection on port 10000 with FastWriteThrough)</param>
            <param name="trigger">The trigger.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>IObservable&lt;ResultValue&lt;AdsSysServState&gt;&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Client doesn't target port 10000! - client</exception>
        </member>
        <member name="M:TwinCAT.SystemService.SystemServiceExtension.PollSystemServiceState(TwinCAT.Ads.IAdsConnection,System.IObservable{System.Reactive.Unit})">
            <summary>
            Polls the state of the system service.
            </summary>
            <param name="connection">The client (should be an IAdsConnection on port 10000 with FastWriteThrough)</param>
            <param name="trigger">The trigger.</param>
            <returns>IObservable&lt;ResultValue&lt;AdsSysServState&gt;&gt;.</returns>
        </member>
        <member name="M:TwinCAT.SystemService.SystemServiceExtension.ReadSysServStateAsync(TwinCAT.Ads.IAdsConnection,System.Threading.CancellationToken)">
            <summary>
            Reads the System Service state (<see cref="T:TwinCAT.SystemService.AdsSysServState"/>) (asynchronous)
            </summary>
            <param name="connection">The client.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultValue`1&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Service only available on AmsPort 10000 (SystemService). Cannot use this function on the specified client! - client</exception>
        </member>
        <member name="M:TwinCAT.SystemService.SystemServiceExtension.ReadSysServState(TwinCAT.Ads.IAdsConnection)">
            <summary>
            Reads the System Service state (<see cref="T:TwinCAT.SystemService.AdsSysServState"/>) 
            </summary>
            <param name="connection">The client (should be an IAdsConnection on port 10000)</param>
            <returns>ResultValue&lt;AdsSysServState&gt;.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Service only available on AmsPort 10000 (SystemService). Cannot use this function on the specified client! - client</exception>
        </member>
        <member name="M:TwinCAT.SystemService.SystemServiceExtension.WaitUntilRestartedAsync(TwinCAT.Ads.IAdsConnection,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits until the SystemService Restart is detectd on the client (SystemService, Port 10000) (asynchronously)
            </summary>
            <param name="connection">The client (should be an IAdsConnection on port 10000)</param>
            <param name="pollingRate">The polling rate (should be lower than the connection timeout).</param>
            <param name="waitTimeout">The wait timeout.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;System.Boolean&gt; representing whether the restart is detected (true), or the timeout occurred (false).</returns>
        </member>
        <member name="M:TwinCAT.SystemService.SystemServiceExtension.RestartTwinCATAsync(TwinCAT.Ads.IAdsConnection,TwinCAT.Ads.AdsStateCommand,System.TimeSpan,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Sends a SystemService Restart to the target system and waits until the system has finished the state changes (SystemService, Port 10000) (asynchronously)
            </summary>
            <param name="connection">The connection (should be an IAdsConnection on port 10000 in FastWriteThrough mode)</param>
            <param name="request">The request/command for (Reconfig/Reset)</param>
            <param name="pollingRate">The polling rate (should be lower than the connection timeout).</param>
            <param name="waitTimeout">The wait timeout.</param>
            <param name="noReinit">if set to <c>true</c> then this method first checks if the system is already in the requested target state. In that case the method can return immediatly.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <remarks>Be sure to have the client in FastWriteThrough settings, that the 
            </remarks>
            <returns>A Task&lt;System.Boolean&gt; representing whether the restart is detected (true), or the timeout occurred (false).</returns>
            <exception cref="T:System.ArgumentException">The connection is not conncted to '{AmsPort.SystemService}' - client</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">request</exception>
        </member>
        <member name="M:TwinCAT.SystemService.SystemServiceExtension.WaitUntilRestarted(TwinCAT.Ads.IAdsConnection,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits until the Restart is detected on the client (SystemService, Port 10000)
            </summary>
            <param name="connection">The connection (should be an IAdsConnection on port 10000)</param>
            <param name="pollingRate">The polling rate (should be lower than the connection timeout)</param>
            <param name="waitTimeout">The wait timeout.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns><c>true</c> if the restart was detected, <c>false</c> if WaitUntilRestarted ran into the wait timeout.</returns>
        </member>
        <member name="T:TwinCAT.Session">
            <summary>
            Abstract Session base class.
            </summary>
            <seealso cref="T:TwinCAT.ISession" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:TwinCAT.Session.#ctor(TwinCAT.ISessionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Session"/> class.
            </summary>
            <param name="provider">The provider.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Session.provider">
            <summary>
            The provider
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Session.Provider">
            <summary>
            Gets the Session Provider
            </summary>
            <value>The provider or NULL if instantiated directly</value>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Session.s_id">
            <summary>
            Session ID counter (static)
            </summary>
        </member>
        <member name="F:TwinCAT.Session._id">
            <summary>
            Session Identifier
            </summary>
        </member>
        <member name="P:TwinCAT.Session.Id">
            <summary>
            Gets the Session Identifier
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="F:TwinCAT.Session.connection">
            <summary>
            The (established) connection
            </summary>
        </member>
        <member name="P:TwinCAT.Session.Connection">
            <summary>
            Gets the (established) connection.
            </summary>
            <value>The <see cref="T:TwinCAT.IConnection"/> if connection established, or <b>null</b> if not connected.</value>
        </member>
        <member name="P:TwinCAT.Session.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Session.Connect">
            <summary>
            Connects the session.
            </summary>
            <returns>The <see cref="T:TwinCAT.IConnection" /> object.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.AdsException">Connection to '{this.AddressSpecifier}' couldn't be established!</exception>
            <remarks>The <see cref="T:TwinCAT.IConnection" /> will be valid until the <see cref="T:TwinCAT.ISession" /> is disconnected via
            the <see cref="M:TwinCAT.ISession.Disconnect" /> method or the Dispose method is called. Any possible resurrections after communication
            losses will be done transparently within the <see cref="T:TwinCAT.IConnection" /> so that the <see cref="T:TwinCAT.IConnection" /> instance and <see cref="T:TwinCAT.ISession" /> instance
            remains.</remarks>
        </member>
        <member name="M:TwinCAT.Session.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects the session.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;IConnection&gt; representing the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:TwinCAT.AdsException">Connection to '{this.AddressSpecifier}' couldn't be established!</exception>
            <remarks>The <see cref="T:TwinCAT.IConnection" /> will be valid until the <see cref="T:TwinCAT.ISession" /> is disconnected via
            the <see cref="M:TwinCAT.ISession.Disconnect" /> method or the Dispose method is called. Any possible resurrections after communication
            losses will be done transparently within the <see cref="T:TwinCAT.IConnection" /> so that the <see cref="T:TwinCAT.IConnection" /> instance and <see cref="T:TwinCAT.ISession" /> instance
            remains.</remarks>
        </member>
        <member name="M:TwinCAT.Session.OnConnect(System.Boolean)">
            <summary>
            Handler function connecting the Session.
            </summary>
            <param name="reconnect">if set to <c>true</c> [reconnect].</param>
            <returns>IConnection.</returns>
        </member>
        <member name="M:TwinCAT.Session.OnConnectAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Handler function connecting the Session.
            </summary>
            <param name="reconnect">if set to <c>true</c> [reconnect].</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;System.Nullable&lt;IConnection&gt;&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Session.Disconnect">
            <summary>
            Disconnects the session from the target.
            </summary>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Session"/> is disconnected, <c>false</c> otherwise (the connection was disconnected before)</returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <remarks>Closes (and disposes) the underlying <see cref="T:TwinCAT.IConnection" />
            The <see cref="T:TwinCAT.Session"/> itself will not be Disposed and can be reconnected.</remarks>
        </member>
        <member name="M:TwinCAT.Session.OnDisconnect">
            <summary>
            Handler function disconnecting the session.
            </summary>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Session"/> is disconnected, <c>false</c> if the <see cref="T:TwinCAT.Session"/> was disconnected before.</returns>
        </member>
        <member name="P:TwinCAT.Session.EstablishedAt">
            <summary>
            Gets the UTC time when the session was established.
            </summary>
            <value>The session established at.</value>
        </member>
        <member name="M:TwinCAT.Session.OnConnectionStateChanged(System.Object,TwinCAT.ConnectionStateChangedEventArgs)">
            <summary>
            Handles the <see cref="E:ConnectionStateChanged" /> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:TwinCAT.ConnectionStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:TwinCAT.Session._disposed">
            <summary>
            Disposed flag.
            </summary>
        </member>
        <member name="P:TwinCAT.Session.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Session"/> is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Session.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Session.Close">
            <summary>
            Closes this <see cref="T:TwinCAT.ISession" />
            </summary>
            <remarks>Closes also the <see cref="T:TwinCAT.IConnection" />.</remarks>
        </member>
        <member name="M:TwinCAT.Session.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:TwinCAT.Session._symbolServer">
            <summary>
            The symbol server
            </summary>
        </member>
        <member name="E:TwinCAT.Session.ConnectionStateChanged">
            <summary>
            Occurs when connection status of the <see cref="T:TwinCAT.IConnectionStateProvider"/> has been changed.
            </summary>
            <remarks>The Connection state changes only if the <see cref="T:TwinCAT.IConnection"/> is established / shut down
            or active communication is triggered by the User of the <see cref="T:TwinCAT.IConnection"/> object.
            </remarks>
            <example>
            The following sample shows how to keep the <see cref="P:TwinCAT.Session.ConnectionState"/> updated by triggering ADS Communication.
            <code language="C#" title="Trigger ConnectionState changes in WPF Applications" source="..\..\Samples\TwinCAT.ADS.NET_Samples\40_ADS.NET_WPFConnectionObserver\MainWindow.xaml.cs" region="CODE_SAMPLE" />
            </example>   
            <seealso cref="P:TwinCAT.Session.ConnectionState"/>
        </member>
        <member name="P:TwinCAT.Session.SymbolServer">
            <summary>
            Gets the symbol server.
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.Session"/> object holds and caches the symbolic information.
            To initially create this information, the Connection must be established.
            </remarks>
            <value>The symbol server.</value>
        </member>
        <member name="M:TwinCAT.Session.OnCreateSymbolServer">
            <summary>
            Handler function creating the <see cref="T:TwinCAT.TypeSystem.ISymbolServer"/>
            </summary>
            <returns>ISymbolServer.</returns>
            <exception cref="T:TwinCAT.SessionNotConnectedException">The connection is not established!</exception>
        </member>
        <member name="P:TwinCAT.Session.Name">
            <summary>
            Gets the name of the session
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.Session.ConnectionState">
            <summary>
            Gets the current Connection state of the <see cref="T:TwinCAT.Session" />
            </summary>
            <value>The state of the connection.</value>
            <remarks>The Connection state changes only if the <see cref="T:TwinCAT.IConnection"/> is established / shut down
            or active communication is triggered by the User of the <see cref="T:TwinCAT.IConnection"/> object.
            </remarks>
            <example>
            The following sample shows how to keep the <see cref="P:TwinCAT.Session.ConnectionState"/> updated by triggering ADS Communication.
            <code language="C#" title="Trigger ConnectionState changes in WPF Applications" source="..\..\Samples\TwinCAT.ADS.NET_Samples\40_ADS.NET_WPFConnectionObserver\MainWindow.xaml.cs" region="CODE_SAMPLE" />
            </example>   
            <seealso cref="E:TwinCAT.Session.ConnectionStateChanged"/>
        </member>
        <member name="P:TwinCAT.Session.AddressSpecifier">
            <summary>
            Gets the communication endpoint address string representation.
            </summary>
            <value>The address.</value>
        </member>
        <member name="M:TwinCAT.Session.OnGetAddress">
            <summary>
            Handler function getting the address of the session.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Session.GetSessionName">
            <summary>
            Gets the name/string identifier of the session.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Session.EnsureConnection">
            <summary>
            Ensures, that the <see cref="T:TwinCAT.ISession" /> is connected and returns the <see cref="T:TwinCAT.IConnection" /> object.
            </summary>
            <returns>IConnection.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>If the session is actually not connected an exception will be thrown.</remarks>
        </member>
        <member name="M:TwinCAT.Session.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:TwinCAT.SessionProvider`3">
            <summary>
            Abstract base class for a Custom Session provider
            </summary>
            <typeparam name="TSession">SessionType</typeparam>
            <typeparam name="TAddress">Address type</typeparam>
            <typeparam name="TSettings">Communication settings type</typeparam>
            <seealso cref="T:TwinCAT.ISessionProvider`3" />
            <Exclude/>
        </member>
        <member name="F:TwinCAT.SessionProvider`3.capabilities">
            <summary>
            The capabilities of the <see cref="T:TwinCAT.ISessionProvider`3"/>
            </summary>
        </member>
        <member name="P:TwinCAT.SessionProvider`3.Capabilities">
            <summary>
            Gets the capabilities.
            </summary>
            <value>The capabilities.</value>
        </member>
        <member name="M:TwinCAT.SessionProvider`3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionProvider`3"/> class.
            </summary>
            <exception cref="T:System.Exception">Session provider already instantiated!</exception>
        </member>
        <member name="M:TwinCAT.SessionProvider`3.#ctor(TwinCAT.SessionProviderCapabilities)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionProvider`3"/> class.
            </summary>
            <exception cref="T:System.Exception">Session provider already instantiated!</exception>
        </member>
        <member name="F:TwinCAT.SessionProvider`3.s_self">
            <summary>
            Singleton Instance.
            </summary>
        </member>
        <member name="P:TwinCAT.SessionProvider`3.Name">
            <summary>
            Gets the name of the SessionProvider
            </summary>
            <value>The name.</value>
        </member>
        <member name="M:TwinCAT.SessionProvider`3.Create(System.Object,TwinCAT.ISessionSettings)">
            <summary>
            Creates the Session with address and communication settings.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <returns>ISession.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.SessionProvider`3.Create(`1,`2)">
            <summary>
            Creates the Session with specified address and communication settings.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The communicationSettings.</param>
            <returns>S.</returns>
        </member>
        <member name="T:TwinCAT.AdsCommunicationStatistics">
            <summary>
            ADS Communication statistics
            </summary>
            <remarks>
            These statistics can be used for communication diagnosis.
            They contain Error/Succeed counts as well as Resurrection infos.
            </remarks>
        </member>
        <member name="M:TwinCAT.AdsCommunicationStatistics.#ctor(TwinCAT.Ads.AdsSessionBase)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.AdsCommunicationStatistics"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.TotalCycles">
            <summary>
            Gets the total cycles/requests done so far by this session.
            </summary>
            <value>The total cycles / requests</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.TotalErrors">
            <summary>
            Gets the total number of negative ADS responses.
            </summary>
            <value>The total number of negative ADS responses.
            </value>
            <remarks>This number includes all communication/tripping errors and succeeded negative ADS responses.</remarks>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.LastSucceededAt">
            <summary>
            Gets the Date/Time of the last succeeded ADS communication/Roundtrip.
            </summary>
            <value>The Date/Time value.</value>
            <remarks>A successful communication is also a negative ADS response (not  <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>) that is not classified as communication/tripping error (<see cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>).
            </remarks>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.LastAccessAt">
            <summary>
            Gets the Time of the last read/write access 
            </summary>
            <value>DateTime of the last access.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.LastErrorCode">
            <summary>
            Gets error code of the last access. 
            </summary>
            <value>The last succeeded access.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.AccessWaitTime">
            <summary>
            Gets the wait time for the next access (Resurrection time) if in <see cref="F:TwinCAT.ConnectionState.Lost"/>.
            </summary>
            <value>The wait time if in <see cref="F:TwinCAT.ConnectionState.Lost"/> otherwise <b>TimeSpan.Zero</b>.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.CommunicationErrorsSinceLastSucceeded">
            <summary>
            Gets the number of communication errors since the last successful access
            </summary>
            <value></value>
            <remarks>Only communication (tripping, <see cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>) errors count here. A succeeded roundtrip (non tripping)
            sets this value to zero.
            </remarks>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.TotalCommunicationErrors">
            <summary>
            Gets the communication error count.
            </summary>
            <value>The communication error count.</value>
            <remarks>The communication errors are the errors that are classified as communication tripping errors (Network communication problems e.g. device not reachable, <see cref="F:TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors"/>)</remarks>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.LastCommunicationErrorAt">
            <summary>Gets the last tripping error time.</summary>
            <value>The last tripping error time.</value>
            <remarks>Tripping errors are errors that are preventing the ADS Session to communicate until a resurrection occurs.
            These are all errors that are classified that the target system could not be reached.
            </remarks>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.LastErrorAt">
            <summary>
            Get the Time of the last occurred Error (Error response codes and tripping errors)
            </summary>
            <value>The error count since last access.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.TotalResurrections">
            <summary>
            Gets the number of resurrections on the <see cref="T:TwinCAT.Ads.AdsConnection"/>
            </summary>
            <value>The resurrections.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.SessionEstablishedAt">
            <summary>
            Gets the UTC time when the session was established.
            </summary>
            <value>The session established at.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.ConnectionEstablishedAt">
            <summary>
            Gets the UTC time when the current connection was established.
            </summary>
            <value>The connection established at.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.ConnectionActiveSince">
            <summary>
            Gets the DateTime of the last connection activation.
            </summary>
            <value>Connection active time.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.TotalConnectionLosses">
            <summary>
            Gets the connection lost count.
            </summary>
            <value>The connection lost count.</value>
        </member>
        <member name="P:TwinCAT.AdsCommunicationStatistics.ConnectionLostAt">
            <summary>
            Gets the connection lost time.
            </summary>
            <value>The connection lost time.</value>
        </member>
        <member name="T:TwinCAT.CyclesPerSecond">
            <summary>
            Class StatisticsPerSecond.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.CyclesPerSecond.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.CyclesPerSecond"/> struct.
            </summary>
            <param name="requestsPerSecond">The requests per second.</param>
            <param name="succeedsPerSecond">The succeeds per second.</param>
            <param name="errorsPerSecond">The errors per second.</param>
        </member>
        <member name="F:TwinCAT.CyclesPerSecond.RequestsPerSecond">
            <summary>
            The requests per second
            </summary>
            <remarks>These are the cycles (per second) of the communication whether they are sucessfull or not.</remarks>
        </member>
        <member name="F:TwinCAT.CyclesPerSecond.SucceedsPerSecond">
            <summary>
            The succeeded cycles of the ADS communication per second.
            </summary>
        </member>
        <member name="F:TwinCAT.CyclesPerSecond.ErrorsPerSecond">
            <summary>
            The failed cycles of the ADS communication per second.
            </summary>
        </member>
        <member name="T:TwinCAT.StatisticExtensions">
            <summary>
            Class StatisticExtensions.
            </summary>
            <remarks>This class extends the <see cref="T:TwinCAT.Ads.AdsConnection"/> class by Cycles/Errors per second.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.PollCyclesPerSecond(TwinCAT.Ads.AdsConnection,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Polls the statistics.
            </summary>
            <param name="connection">The ADS connection.</param>
            <param name="pollingPeriod">The polling period (timespan between calculating each distinct value)</param>
            <param name="scheduler">The scheduler.</param>
            <returns>IObservable&lt;StatisticsPerSecond&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">connection</exception>
            <exception cref="T:System.ArgumentException">Connection doesn't have an ConnectionObserver!</exception>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.PollCyclesPerSecond(TwinCAT.IConnection,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Polls the statistics.
            </summary>
            <param name="connection">The ADS connection.</param>
            <param name="pollingPeriod">The polling period (timespan between calculating each distinct value)</param>
            <param name="scheduler">The scheduler.</param>
            <returns>IObservable&lt;StatisticsPerSecond&gt;.</returns>
            <exception cref="T:System.ArgumentException">Specified connection is not an AdsConnection - adsConnection</exception>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.PollCyclesPerSecond(TwinCAT.ISession,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
            <summary>
            Polls the statistics.
            </summary>
            <param name="session">The ADS session.</param>
            <param name="pollingPeriod">The polling period (timespan between calculating each distinct value)</param>
            <param name="scheduler">The scheduler.</param>
            <returns>IObservable&lt;StatisticsPerSecond&gt;.</returns>
            <exception cref="T:System.ArgumentException">Session is not connected! - session</exception>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.ValuesPerSecond(System.Collections.Generic.IList{System.Int32},System.TimeSpan)">
            <summary>
            Calc the Values/Second in the specified period of time.
            </summary>
            <param name="valueBuffer">The value buffer.</param>
            <param name="period">The period.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.ValuesPerSecond(System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.Int32}},System.TimeSpan)">
            <summary>
            Calc the Values/Second in the specified period of time.
            </summary>
            <param name="valueBuffer">The value buffer.</param>
            <param name="period">The period.</param>
            <returns>System.ValueTuple&lt;System.Double, System.Double&gt;.</returns>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.ValuesPerSecond(System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.Int32,System.Int32}},System.TimeSpan)">
            <summary>
            Calcs the Values/Second in the specified period of time.
            </summary>
            <param name="valueBuffer">The value buffer.</param>
            <param name="period">The period.</param>
            <returns>System.ValueTuple&lt;System.Double, System.Double, System.Double&gt;.</returns>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.ValuesPerSecond(System.Collections.Generic.IList{TwinCAT.ConnectionStatisticsInfo},System.TimeSpan)">
            <summary>
            Calc the Values/Second in the specified period of time.
            </summary>
            <param name="valueBuffer">The value buffer.</param>
            <param name="period">The period.</param>
            <returns>System.ValueTuple&lt;System.Double, System.Double, System.Double&gt;.</returns>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.CyclesPerSecond(System.Collections.Generic.IList{System.ValueTuple{System.Int32,System.Int32,System.Int32}},System.TimeSpan)">
            <summary>
            Calc the Cycles/Second in the specified period of time
            </summary>
            <param name="statBuffers">The stat buffers.</param>
            <param name="period">The period.</param>
            <returns>CyclesPerSecond.</returns>
        </member>
        <member name="M:TwinCAT.StatisticExtensions.CyclesPerSecond(System.Collections.Generic.IList{TwinCAT.ConnectionStatisticsInfo},System.TimeSpan)">
            <summary>
            Calc the Cycles/Second in the specified period of time
            </summary>
            <param name="statBuffers">The stat buffers.</param>
            <param name="period">The period.</param>
            <returns>CyclesPerSecond.</returns>
        </member>
        <member name="T:TwinCAT.SymbolLoaderSettings">
            <summary>
            Settings object for the SymbolLoader initialization.
            </summary>
            <seealso cref="T:TwinCAT.ISymbolLoaderSettings" />
            <seealso cref="T:TwinCAT.Ads.TypeSystem.SymbolLoaderFactory" />
            <seealso cref="T:TwinCAT.TypeSystem.ISymbolLoader"/>
            <seealso cref="T:TwinCAT.SymbolsLoadMode"/>
            <seealso cref="T:TwinCAT.ValueAccess.ValueAccessMode"/>
            <remarks>This settings object is used for the initialization of the internal Symbol loader object.</remarks>
        </member>
        <member name="M:TwinCAT.SymbolLoaderSettings.#ctor(TwinCAT.SymbolsLoadMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SymbolLoaderSettings"/> class with <see cref="F:TwinCAT.ValueAccess.ValueAccessMode.IndexGroupOffsetPreferred"/>.
            </summary>
            <param name="loadMode">The load mode.</param>
        </member>
        <member name="M:TwinCAT.SymbolLoaderSettings.#ctor(TwinCAT.SymbolsLoadMode,TwinCAT.ValueAccess.ValueAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SymbolLoaderSettings"/> class.
            </summary>
            <param name="loadMode">The load mode.</param>
            <param name="valueAccess">The value access.</param>
        </member>
        <member name="M:TwinCAT.SymbolLoaderSettings.#ctor(TwinCAT.SymbolsLoadMode,TwinCAT.ValueAccess.ValueCreationModes,TwinCAT.ValueAccess.ValueAccessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SymbolLoaderSettings"/> class.
            </summary>
            <param name="loadMode">The load mode.</param>
            <param name="valueCreation">The dynamic value creation.</param>
            <param name="valueAccess">The value access.</param>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.SymbolsLoadMode">
            <summary>
            Gets or sets the symbols load mode.
            </summary>
            <value>The symbols load mode.</value>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.ValueAccessMode">
            <summary>
            Gets or sets the value access mode.
            </summary>
            <value>The value access mode.</value>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.NonCachedArrayElements">
            <summary>
            Gets or sets the setting to create ArrayElements "On-The-Fly" (Default True)
            </summary>
            <value>The value access mode.</value>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.AutomaticReconnection">
            <summary>
            Gets or sets a value indicating whether Disconnect connections can be reconnected.
            </summary>
            <value><c>true</c> if Disconnect connections can be reconnected; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.SymbolLoaderSettings._expandArrayValues">
            <summary>
            The expand array values
            </summary>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.ExpandArrayValues">
            <summary>
            Gets or sets a value indicating whether the Value Factory automatically expands ArrayValues to its Elements (Default: true)
            </summary>
            <value><c>true</c> if [create array elements]; otherwise, <c>false</c>.</value>
            <remarks>Actually, this takes place when DynamicSymbols are created. Array Elements are created on-access to the Array, so that they can be accessed by
            a JSON Serializer without further expanding. If this property is set to false, then an array element is only created on access!</remarks>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.ValueCreation">
            <summary>
            Gets or sets the value creation mode.
            </summary>
            <value>The dynamic value mode.</value>
        </member>
        <member name="F:TwinCAT.SymbolLoaderSettings._valueUpdateMode">
            <summary>
            The value update mode
            </summary>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.ValueUpdateMode">
            <summary>
            Gets or sets the value update mode.
            </summary>
            <remarks>
            <list type="table">
            <listheader><term>Mode</term><description>Description</description></listheader>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Immediately"/></term><description>Writes the values of this <see cref="T:TwinCAT.TypeSystem.DynamicValue"/>"/> instantly when setting its value or the value
            of its child members/elements.</description></item>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Triggered"/></term><description>Caches internally the value of this <see cref="T:TwinCAT.TypeSystem.DynamicValue"/>"/> until the <see cref="M:TwinCAT.TypeSystem.DynamicValue.Write"/> method is called. This reduces
            ADS rountrips, if one or more member/element values should be changed. Furthermore the write on the destination system happens
            consistently in one ADS Write operation, which could be important for dependent properties/members/elements.</description></item>
            </list>
            </remarks>
            <value>The value update mode.</value>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.Default">
            <summary>
            Gets the default settings object for standard symbols.
            </summary>
            <remarks>
            The following defaults are set here:
            <list type="table">
            <listheader><term>Setting</term><description>Description</description></listheader>
                <item><term>Symbols load mode (<see cref="P:TwinCAT.SymbolLoaderSettings.SymbolsLoadMode"/>)</term><description>Create virtual tree (<see cref="F:TwinCAT.SymbolsLoadMode.VirtualTree"/>.</description></item>
                <item><term>Value access mode (<see cref="P:TwinCAT.SymbolLoaderSettings.ValueAccessMode"/>)</term><description>Prefer Symbolic access of values (<see cref="F:TwinCAT.ValueAccess.ValueAccessMode.SymbolicByHandle"/>).</description></item>
                <item><term>Value creation mode <see cref="P:TwinCAT.SymbolLoaderSettings.ValueCreation"/></term><description>Create .NET integral primitives if possible (<see cref="F:TwinCAT.ValueAccess.ValueCreationModes.Default"/>.</description></item>
            </list>
            </remarks>
            <value>The default settings object.</value>
            <seealso cref="P:TwinCAT.SymbolLoaderSettings.DefaultDynamic"/>
        </member>
        <member name="P:TwinCAT.SymbolLoaderSettings.DefaultDynamic">
            <summary>
            Gets the default settings object for Dynamic symbols.
            </summary>
            <remarks>
            The following defaults are set here:
            <list type="table">
            <listheader><term>Setting</term><description>Description</description></listheader>
                <item><term>Symbols load mode (<see cref="P:TwinCAT.SymbolLoaderSettings.SymbolsLoadMode"/>)</term><description>Create dynamic tree (<see cref="F:TwinCAT.SymbolsLoadMode.DynamicTree"/>.</description></item>
                <item><term>Value access mode (<see cref="P:TwinCAT.SymbolLoaderSettings.ValueAccessMode"/>)</term><description>Prefer Symbolic access of values (<see cref="F:TwinCAT.ValueAccess.ValueAccessMode.SymbolicByHandle"/>).</description></item>
                <item><term>Value creation mode <see cref="P:TwinCAT.SymbolLoaderSettings.ValueCreation"/></term><description>Create .NET integral primitives if possible (<see cref="F:TwinCAT.ValueAccess.ValueCreationModes.Default"/>.</description></item>
            </list>
            </remarks>
            <value>The dynamic default settings object.</value>
            <seealso cref="P:TwinCAT.SymbolLoaderSettings.Default"/>
        </member>
        <member name="T:SymbolRpcMarshaler">
            <summary>
            Marshalling class for uploaded Symbols
            </summary>
            <exclude/>
        </member>
        <member name="M:SymbolRpcMarshaler.#ctor(TwinCAT.TypeSystem.IDataTypeResolver,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SymbolRpcMarshaler"/> class.
            </summary>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:SymbolRpcMarshaler.OnMarshalParameter(TwinCAT.TypeSystem.IRpcMethodParameter,TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshals a single RpcMethodParameter to the memory.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="spec">Type specification</param>
            <param name="value">The value.</param>
            <param name="parameterSize">Size of the parameter.</param>
            <param name="destination">The destination memory (for all parameters!)</param>
            <returns>Number of marshalled bytes.</returns>
        </member>
        <member name="M:SymbolRpcMarshaler.UnmarshalReturnValue(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},System.Object@)">
            <summary>
            Unmarshals the return value
            </summary>
            <param name="method">The method.</param>
            <param name="returnSpec">Return type specification.</param>
            <param name="source">The source memory.</param>
            <param name="returnValue">The return value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="M:SymbolRpcMarshaler.OnUnmarshalInParameter(System.Int32,TwinCAT.TypeSystem.IRpcMethod,System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals a single RPC In parameter from the Buffer (used on the Symbolic Server side).
            </summary>
            <param name="parameterIndex">Index of the parameter.</param>
            <param name="method">The method.</param>
            <param name="buffer">The buffer.</param>
            <param name="values">The values.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Cannot determine LengthIs parameter value! - values</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">Cannot marshal {dataType.Name} as in parameter. Cannot map to managed type!</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">Cannot marshal {dataType.Name} as in parameter. Referenced type not found!</exception>
        </member>
        <member name="M:SymbolRpcMarshaler.OnUnmarshalOutParameter(System.Int32,TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.ReadOnlySpan{System.Byte},System.Object[])">
            <summary>
            Unmarshals a single RPC parameter from the Buffer
            </summary>
            <param name="parameterIndex">The index of the parameter</param>
            <param name="method">The method.</param>
            <param name="outSpec">The out parameter type specification.</param>
            <param name="source">The source data.</param>
            <param name="values">The values.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">Cannot marshal {dataType.Name} as out parameter. Cannot map to managed type!</exception>
            <exception cref="T:TwinCAT.TypeSystem.MarshalException">Cannot marshal {dataType.Name} as out parameter. Referenced type not found!</exception>
        </member>
        <member name="M:SymbolRpcMarshaler.MarshalReturnValue(TwinCAT.TypeSystem.IRpcMethod,TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object,System.Span{System.Byte})">
            <summary>
            Unmarshals the RPC method return value
            </summary>
            <param name="method">The method.</param>
            <param name="retSpec">The return type specification.</param>
            <param name="returnValue">The return value.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">method</exception>
            <exception cref="T:System.ArgumentNullException">returnType</exception>
        </member>
        <member name="M:SymbolRpcMarshaler.OnGetParameterSize(TwinCAT.TypeSystem.IRpcMethodParameter,TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[])">
            <summary>
            Handler function getting the Parameter Size
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="spec">The spec.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:TwinCAT.TypeSystem.DataTypeException">Cannot resolve dataType '{pointerType.Name}'. Base type '{pointerType.ReferenceTypeName}' is not known!</exception>
        </member>
        <member name="T:SymbolParser">
            <summary>
            Class parsing Symbols from String or from AdsStream (for internal use only)
            </summary>
            <exclude/>
        </member>
        <member name="M:SymbolParser.TryParseType(System.String,TwinCAT.TypeSystem.IBinder,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Tries to parse the Type string.
            </summary>
            <param name="typeName">Type string / name.</param>
            <param name="resolver">The resolver.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type is parsed successfully, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            typeName
            or
            resolver
            </exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SymbolParser.TryParseArrayElement(System.String,System.String@,System.String@,System.String@,System.Collections.Generic.IList{System.Int32[]}@,System.Nullable{TwinCAT.TypeSystem.ArrayIndexType}@)">
            <summary>
            Tries to parse an Array Instance
            </summary>
            <param name="fullPath">The name with indices string.</param>
            <param name="fullPathWithoutIndexes">The instanceName.</param>
            <param name="instanceName">Name of the instance.</param>
            <param name="indicesStr">The indices string.</param>
            <param name="jaggedIndices">The indices.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if the string specifies an array instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SymbolParser.TryParseIndices(System.String,System.Collections.Generic.IList{System.Int32[]}@,System.Nullable{TwinCAT.TypeSystem.ArrayIndexType}@)">
            <summary>
            Tries to parse the indices from an indices string.
            </summary>
            <param name="indicesStr">The indices string.</param>
            <param name="jaggedIndices">The jagged indices.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if the string specifies an array instance, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:SymbolParser.TryParseParentPath(TwinCAT.TypeSystem.IInstance,System.String@,System.String@)">
            <summary>
            Tries to parse the parent path of this <see cref="T:TwinCAT.Ads.TypeSystem.Symbol" />
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="parentPath">The parent path (out-parameter).</param>
            <param name="parentName">Name of the parent (out-parameter).</param>
            <returns>
            true if found, false if not contained.
            </returns>
        </member>
    </members>
</doc>
