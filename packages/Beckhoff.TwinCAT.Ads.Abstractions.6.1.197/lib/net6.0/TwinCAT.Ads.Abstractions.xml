<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwinCAT.Ads.Abstractions</name>
    </assembly>
    <members>
        <member name="T:TwinCAT.AdsException">
            <summary>
            Base class for all exceptions thrown by the TwinCAT.Ads component
            </summary>
        </member>
        <member name="M:TwinCAT.AdsException.#ctor">
            <summary>
            Initializes a new Instance of the <see cref="T:TwinCAT.AdsException"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.AdsException.#ctor(System.String)">
            <summary>
            Initializes a new Instance of the <see cref="T:TwinCAT.AdsException"/> class.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:TwinCAT.AdsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new Instance of the AdsException class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:TwinCAT.AdsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.AdsException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.Tls.TlsException">
            <summary>
            Base class for all exceptions thrown by the TwinCAT.Ads component
            </summary>
        </member>
        <member name="P:TwinCAT.Tls.TlsException.Error">
            <summary>
            Gets the TlsError value.
            </summary>
            <value>The error.</value>
        </member>
        <member name="M:TwinCAT.Tls.TlsException.#ctor(System.String,TwinCAT.Tls.TlsError)">
            <summary>
            Initializes a new Instance of the <see cref="T:TwinCAT.AdsException" /> class.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="error">The error.</param>
        </member>
        <member name="T:TwinCAT.Tls.TlsConnectInfoFlags">
            <summary>
            Enum TlsConnectInfoFlags
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.Response">
            <summary>
            The response (TlsConnectInfoFlag_Response,0x0001)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.AmsAllowed">
             <summary>
            User Password accepted (TlsConnectInfoFlag_AmsAllowed, 0x0002)
             </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.ServerInfo">
            <summary>
            save only serverinfo (e.g. fingerprint but not IP address of peer, TlsConnectInfoFlag_ServerInfo, 0x0004)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.OwnFile">
            <summary>
            Save in own file instead of staticroutes.xml (TlsConnectInfoFlag_OwnFile, 0x0008)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.SelfSigned">
            <summary>
            SelfSigned (TlsConnectInfoFlag_SelfSigned, 0x0010)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.IpAddr">
            <summary>
            The ip addr (TlsConnectInfoFlag_IpAddr,0x0020)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.IgnoreCn">
            <summary>
            Ignore CN (TlsConnectInfoFlag_IgnoreCn, 0x0040)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfoFlags.AddRemote">
            <summary>
            The add remote (TlsConnectInfoFlag_AddRemote,0x0080)
            </summary>
        </member>
        <member name="T:TwinCAT.Tls.TlsError">
            <summary>
            Enum TlsError
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Tls.TlsError.NoError">
            <summary>
            The no error (TlsConnectInfoError_NoError 0)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsError.Version">
            <summary>
            Requested version unknown (version contains highest available version, TlsConnectInfoError_Version, 1)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsError.CnMismatch">
            <summary>
            The cn mismatch (TlsConnectInfoError_CnMismatch, 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsError.UnknownCert">
            <summary>
            The unknown cert (TlsConnectInfoError_UnkownCert, 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsError.UnknownUser">
            <summary>
            The unknown user (TlsConnectInfoError_UnkownUser, 4)
            </summary>
        </member>
        <member name="T:TwinCAT.Tls.TlsConnectInfo">
            <summary>
            TlsConnectionInfo object
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.Flags">
            <summary>
            Gets the <see cref="T:TwinCAT.Tls.TlsConnectInfoFlags"/>
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.Version">
            <summary>
            Gets the version of the <see cref="T:TwinCAT.Tls.TlsConnectInfo"/> object.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.Error">
            <summary>
            Gets the <see cref="T:TwinCAT.Tls.TlsError"/>
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.NetId">
            <summary>
            Gets the NetId.
            </summary>
            <value>The NetId</value>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.Reserved">
            <summary>
            Gets the reserved bytes (18 bytes)
            </summary>
            <value>The reserved.</value>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfo._hostName">
            <summary>
            The host name
            </summary>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.HostName">
            <summary>
            Gets the HostName
            </summary>
            <value>The name of the host.</value>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfo._user">
            <summary>
            The user
            </summary>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.User">
            <summary>
            Gets the user name (used only for the request)
            </summary>
            <value>The user.</value>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectInfo._password">
            <summary>
            The password (used only for the Request)
            </summary>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfo.Password">
            <summary>
            Gets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectInfo.#ctor(TwinCAT.Ads.AmsNetId,System.String,System.Security.SecureString,System.String,TwinCAT.Tls.TlsConnectInfoFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnectInfo"/> class (Request)
            </summary>
            <remarks>
            This constructor is used to create the Tls request for a connection.
            </remarks>
            <param name="netId">The AmsNetId of the (local) system that requests the TlsConnect.</param>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <param name="hostName">HostName of the requesting host.</param>
            <param name="flags">The InfoFlags</param>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectInfo.#ctor(TwinCAT.Ads.AmsNetId,System.String,System.Security.SecureString,System.String,TwinCAT.Tls.TlsConnectInfoFlags,System.Byte,System.Byte[],TwinCAT.Tls.TlsError)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnectInfo"/> class (Response)
            </summary>
            <remarks>This constructor is used to initialize the TlsConnect response.</remarks>
            <param name="netId">The net identifier.</param>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <param name="hostName">Name of the host.</param>
            <param name="flags">The flags.</param>
            <param name="version">The version.</param>
            <param name="reserved">The reserved.</param>
            <param name="error">The error.</param>
        </member>
        <member name="T:TwinCAT.Tls.TlsConnectInfoMarshaler">
            <summary>
            Class TlsConnectInfoMarshaler.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnectInfoMarshaler.BaseSize">
            <summary>
            Gets the BaseSize of the <see cref="T:TwinCAT.Tls.TlsConnectInfo"/> structure without user and password.
            </summary>
            <value>The size of the base.</value>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectInfoMarshaler.GetMarshalSize(TwinCAT.Tls.TlsConnectInfo)">
            <summary>
            Gets MarshalSize of the <see cref="T:TwinCAT.Tls.TlsConnectInfo"/> structure.
            </summary>
            <param name="ci">The ci.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectInfoMarshaler.Unmarshal(System.Span{System.Byte},TwinCAT.Tls.TlsConnectInfo@)">
            <summary>
            Unmarshals the date to the <see cref="T:TwinCAT.Tls.TlsConnectInfo"/> object.
            </summary>
            <param name="data">The data.</param>
            <param name="ci">The ci.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Tls.X509CertificateExtension">
            <summary>
            Class X509CertificateExtension.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Tls.X509CertificateExtension.GetSha256Thumbprint(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Gets the SHA256 Thumbprint as its used by AdsSecure TwinCAT as Fingerprint.
            </summary>
            <param name="cert">The cert.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Tls.X509CertificateExtension.CreateFromPemEx(System.String,System.String)">
            <summary>
            Creates the Certificate from pem formatted strings.
            </summary>
            <param name="certificate">The text of the PEM-encoded X509 certificate.</param>
            <param name="rsaPrivateKey">The text of the PEM-encoded private key</param>
            <returns>X509Certificate2 in <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Pfx" /> format.</returns>
        </member>
        <member name="T:TwinCAT.Tls.X509CertificateHelper">
            <summary>
            Helper Object loading PEM Certificates.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Tls.X509CertificateHelper.CreateFromPem(System.String,System.String)">
            <summary>
            Creates from pem.
            </summary>
            <param name="certificate">The text of the PEM-encoded X509 certificate.</param>
            <param name="rsaPrivateKey">The text of the PEM-encoded private key</param>
            <returns>X509Certificate2 in <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Pfx"/> format.</returns>
        </member>
        <member name="M:TwinCAT.Tls.X509CertificateHelper.CreateFromPem(System.String)">
            <summary>
            Creates from pem.
            </summary>
            <param name="certificate">The text of the PEM-encoded X509 certificate.</param>
            <returns>X509Certificate2 in <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Pfx"/> format.</returns>
        </member>
        <member name="M:TwinCAT.Tls.X509CertificateHelper.createFromPem(System.String,System.String)">
            <summary>
            Creates a new X509 certificate from the contents of an RFC 7468 PEM-encoded certificate and private key.
            </summary>
            <param name="certificate">The certificate.</param>
            <param name="rsaPrivateKey">The RSA private key.</param>
            <returns>X509Certificate2.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Cannot createCertificate!</exception>
        </member>
        <member name="M:TwinCAT.Tls.X509CertificateHelper.createFromPem(System.String)">
            <summary>
            Creates a new X509 certificate from the contents of an RFC 7468 PEM-encoded certificate and private key.
            </summary>
            <param name="certificate">The certificate.</param>
            <returns>X509Certificate2.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Cannot createCertificate!</exception>
        </member>
        <member name="T:TwinCAT.Tls.X509CertificateHelper.PEMTYPE">
            <summary>The PEM Type</summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Tls.X509CertificateHelper.TryReadCertificate(System.String,TwinCAT.Tls.X509CertificateHelper.PEMTYPE@,System.Byte[]@)">
            <summary>
            Tries to read the PEM string.
            </summary>
            <param name="str">The string.</param>
            <param name="pemType">Type of the pem.</param>
            <param name="raw">The raw.</param>
            <returns><c>true</c> if the certificate is successfully read, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Tls.TlsConnectType">
            <summary>TlcConnectType enumeration.</summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectType.SelfSigned">
            <summary>
            SelfSigned
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnectType.CA">
            <summary>
            Certification Authority
            </summary>
        </member>
        <member name="T:TwinCAT.Tls.TlsConnect">
            <summary>
            Class TlsConnect.
            </summary>
            <remarks>This is a Helper object to instantiate TLS Connections.
            This class is only available under .NETCORE and .NET50 because the used support of 
            PEM formatted certificates with private keys is not supported under FullFramework / .NETSTANDARD.
            Please be aware, that on the initiating system the following cipher suite must be activated:
            TLS_DHE_RSA_WITH_AES_256_CBC_SHA
            This is disabled on new Versions of Windows by default.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.#ctor(TwinCAT.Ads.AmsNetId,System.String,TwinCAT.Tls.TlsConnectType,System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnect" /> class.
            </summary>
            <param name="source">The source NetId</param>
            <param name="hostNameOrIp">The target system as HostName or IPAddress.</param>
            <param name="mode">The mode.</param>
            <param name="certificate">The certificate.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.#ctor(TwinCAT.Ads.AmsNetId,System.String,TwinCAT.Tls.TlsConnectType,System.Security.Cryptography.X509Certificates.X509Certificate2Collection,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnect" /> class.
            </summary>
            <param name="source">The source NetId</param>
            <param name="hostNameOrIp">The target system as HostName or IPAddress.</param>
            <param name="mode">The mode.</param>
            <param name="certificates">The certificates.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnect.mode">
            <summary>
            The Connect type / mode
            </summary>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TwinCAT.Tls.TlsConnect"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnect.tlsFlags">
            <summary>
            The TLS Connection flags
            </summary>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnect.Flags">
            <summary>
            Gets the TLS Connection flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnect.HostNameOrIP">
            <summary>
            Gets HostName/IPAddress as string
            </summary>
            <value>HostName/IP.</value>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnect.localNetId">
            <summary>
            The Local AmsNetId
            </summary>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnect.SourceNetId">
            <summary>
            Gets the source NetId
            </summary>
            <value>The source net identifier.</value>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.GetStream">
            <summary>
            Gets the encrypted Stream object.
            </summary>
            <returns>System.Nullable&lt;SslStream&gt;.</returns>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnect.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnect.TargetAddress">
            <summary>
            Gets the target address.
            </summary>
            <value>The target address.</value>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnect.LocalAddress">
            <summary>
            Gets the local address.
            </summary>
            <value>The local address.</value>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnect._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="P:TwinCAT.Tls.TlsConnect.Logger">
            <summary>
            Gets the logger interface
            </summary>
            <value>The logger.</value>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnect._targetHost">
            <summary>
            The target host
            </summary>
        </member>
        <member name="F:TwinCAT.Tls.TlsConnect.clientCertificates">
            <summary>
            The client certificates
            </summary>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.Connect(TwinCAT.Ads.AmsAddress)">
            <summary>
            Connects to the target address.
            </summary>
            <param name="targetAddress">The target address.</param>
            <exception cref="T:TwinCAT.Tls.TlsException"></exception>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.ConnectAsync(TwinCAT.Ads.AmsAddress,System.Threading.CancellationToken)">
            <summary>
            Connects to the target as async operation.
            </summary>
            <param name="targetAddress">The target address.</param>
            <param name="cancel">The cancel.</param>
            <exception cref="T:TwinCAT.Tls.TlsException"></exception>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validates the server certificate.
            </summary>
            <param name="sender">The sender.</param>
            <param name="certificate">The certificate.</param>
            <param name="chain">The chain.</param>
            <param name="sslPolicyErrors">The SSL policy errors.</param>
            <returns><c>true</c> if the certificate is successfully validated, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.OnValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Handler function for validating Server Certificate.
            </summary>
            <param name="sender">The sender.</param>
            <param name="certificate">The certificate.</param>
            <param name="chain">The chain.</param>
            <param name="sslPolicyErrors">The SSL policy errors.</param>
            <returns><c>true</c> if if validated, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.SendTlsConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Sends the TLS Connect request and waits for the response (async)
            </summary>
            <param name="cancel">The cancellation token</param>
            <returns>TlsError.</returns>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.OnCreateConnectInfo">
            <summary>
            Creates the <see cref="T:TwinCAT.Tls.TlsConnectInfo"/> object.
            </summary>
            <returns>TlsConnectInfo.</returns>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.SendTlsConnect">
            <summary>
            Sends the TLS Connect request and waits for the response (sync)
            </summary>
            <returns>TlsError.</returns>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnect.Close">
            <summary>
            Closes the TLS Connection
            </summary>
        </member>
        <member name="T:TwinCAT.Tls.TlsConnectCA">
            <summary>
            TlsConnect class for Certifacte Authority AdsSecure connections.
            Implements the <see cref="T:TwinCAT.Tls.TlsConnect" />
            </summary>
            <seealso cref="T:TwinCAT.Tls.TlsConnect" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectCA.#ctor(TwinCAT.Ads.AmsNetId,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnect" /> class.
            </summary>
            <param name="source">The source NetId (NetId of the local device)</param>
            <param name="hostNameOrIp">The target system as HostName or IPAddress.</param>
            <param name="caCert">The Roote CA certificate.</param>
            <param name="certificate">The certificate of the local device.</param>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectCA.#ctor(TwinCAT.Ads.AmsNetId,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnect" /> class.
            </summary>
            <param name="source">The source NetId (NetId of the local device)</param>
            <param name="hostNameOrIp">The target system as HostName or IPAddress.</param>
            <param name="caCert">The Roote CA certificate.</param>
            <param name="certificate">The certificate of the local device.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectCA.OnValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Handler function validating the Server Certificate.
            </summary>
            <param name="sender">The sender.</param>
            <param name="certificate">The certificate.</param>
            <param name="chain">The chain.</param>
            <param name="sslPolicyErrors">The SSL policy errors.</param>
            <returns><c>true</c> if validated, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Tls.TlsConnectSelfSigned">
            <summary>
            Connect class for SelfSigned AdsSecure connections.
            Implements the <see cref="T:TwinCAT.Tls.TlsConnect" />
            </summary>
            <seealso cref="T:TwinCAT.Tls.TlsConnect" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectSelfSigned.#ctor(TwinCAT.Ads.AmsNetId,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnect" /> class.
            </summary>
            <param name="source">The source NetId</param>
            <param name="hostNameOrIp">The target system as HostName or IPAddress.</param>
            <param name="certificate">The certificate.</param>
            <param name="userName">Target System UserName</param>
            <param name="password">Target System Password</param>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectSelfSigned.#ctor(TwinCAT.Ads.AmsNetId,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.Security.SecureString,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Tls.TlsConnect" /> class.
            </summary>
            <param name="source">The source NetId</param>
            <param name="hostNameOrIp">The target system as HostName or IPAddress.</param>
            <param name="certificate">The certificate.</param>
            <param name="userName">Target System UserName</param>
            <param name="password">Target System Password</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectSelfSigned.OnCreateConnectInfo">
            <summary>
            Creates the <see cref="T:TwinCAT.Tls.TlsConnectInfo" /> object.
            </summary>
            <returns>TlsConnectInfo.</returns>
        </member>
        <member name="M:TwinCAT.Tls.TlsConnectSelfSigned.OnValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Handler function to validate the Server Certificate.
            </summary>
            <param name="sender">The sender.</param>
            <param name="certificate">The certificate.</param>
            <param name="chain">The chain.</param>
            <param name="sslPolicyErrors">The SSL policy errors.</param>
            <returns><c>true</c> if validated, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeException">
            <summary>
            Data Type Exception
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeException._dataType">
            <summary>
            The data type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DataTypeException.DataType">
            <summary>
            Gets the type of the data.
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DataTypeException.TypeName">
            <summary>
            Gets the name of the type.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeException.#ctor(System.String,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.CannotResolveDataTypeException">
            <summary>
            Class CannotResolveDataTypeException.
            Implements the <see cref="T:TwinCAT.TypeSystem.DataTypeException" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.DataTypeException" />
        </member>
        <member name="M:TwinCAT.TypeSystem.CannotResolveDataTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.CannotResolveDataTypeException.#ctor(TwinCAT.TypeSystem.IInstance)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"/> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.CannotResolveDataTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.CannotResolveDataTypeException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolException">
            <summary>
            Symbol bound exceptions
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolException._symbol">
            <summary>
            Symbol that is bound to the <see cref="T:TwinCAT.TypeSystem.SymbolException" />
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolException.Symbol">
            <summary>
            Gets the symbol.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolException.InstancePath">
            <summary>
            Gets the instance path.
            </summary>
            <value>The instance path.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(TwinCAT.TypeSystem.ISymbol,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="errorCode">The error code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(TwinCAT.TypeSystem.ISymbol,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.String,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.String,TwinCAT.TypeSystem.ISymbol,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="symbol">The symbol.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="instancePath">The symbol/instance path.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="instancePath">The symbol/instance path.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.String,TwinCAT.TypeSystem.ISymbol,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="symbol">The symbol.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.String,TwinCAT.TypeSystem.ISymbol,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="symbol">The symbol.</param>
            <param name="errorCode">The error code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="instancePath">The instance path.</param>
            <param name="errorCode">The error code.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcInvokeException">
            <summary>
            Class RpcInvokeException.
            Implements the <see cref="T:TwinCAT.TypeSystem.SymbolException" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.SymbolException" />
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeException.#ctor(TwinCAT.TypeSystem.IInterfaceInstance,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcInvokeException"/> class.
            </summary>
            <param name="rpcInstance">The RPC instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeException.#ctor(TwinCAT.TypeSystem.IInterfaceInstance,TwinCAT.TypeSystem.IRpcMethod,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcInvokeException" /> class.
            </summary>
            <param name="rpcInstance">The RPC instance.</param>
            <param name="method">The method.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeException.#ctor(TwinCAT.TypeSystem.IInterfaceInstance,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcInvokeException"/> class.
            </summary>
            <param name="rpcInstance">The RPC instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcInvokeException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">info</exception>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcMethodNotSupportedException">
            <summary>
            Symbol Exception
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodNotSupportedException.#ctor(System.String,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodNotSupportedException" /> class.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodNotSupportedException.#ctor(System.Int32,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodNotSupportedException" /> class.
            </summary>
            <param name="vTableIndex">Index of the v table.</param>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RpcMethodNotSupportedException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDataTypeCollection`1">
            <summary>
            Data Type container interface
            </summary>
            <typeparam name="T">Data Type type.</typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeCollection`1.ContainsType(System.String)">
            <summary>
            Determines whether the container contains the specified <see cref="T:TwinCAT.TypeSystem.IDataType" />.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if contained; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeCollection`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the specified <see cref="T:TwinCAT.TypeSystem.IDataType" /> from the <see cref="T:TwinCAT.TypeSystem.IDataTypeCollection`1" />.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type (Out parameter)</param>
            <returns>true if found</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataTypeCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType" /> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDataTypeCollection">
            <summary>
            Interface IDataTypeCollection
            Implements the <see cref="T:System.Collections.Generic.ICollection`1" />
            </summary>
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
        </member>
        <member name="T:TwinCAT.TypeSystem.IInstanceCollection`1">
            <summary>
            Generic InstanceCollection interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.IInstanceCollection`1.Contains(System.String)">
            <summary>
            Determines whether this collection contains an instance with the specified instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>
                <c>true</c> if this collection contains the specified instance path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IInstanceCollection`1.ContainsName(System.String)">
            <summary>
            Determines whether this collection contains an instance with the specified instance name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns>
                <c>true</c> if this collection contains the specified instance path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstanceCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance"/> with the specified instance path.
            </summary>
            <value></value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IInstanceCollection`1.TryGetInstance(System.String,`0@)">
            <summary>
            Tries to get the specified instance.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.TypeSystem.IInstance"/> is found; otherwise, <c>false</c></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IInstanceCollection`1.TryGetInstanceByName(System.String,System.Collections.Generic.IList{`0}@)">
            <summary>
            Tries to get the specified instance by name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="symbols">The found symbols.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.TypeSystem.IInstance"/> is found; otherwise, <c>false</c></returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IInstanceCollection`1.GetInstance(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance"/>by instance path.
            </summary>
            <param name="instancePath">The instance path.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IInstanceCollection`1.GetInstanceByName(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IInstance" /> by instance name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <returns>IList&lt;T&gt;.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstanceCollection`1.Mode">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.InstanceCollectionMode"/>.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.InstanceCollectionMode">
            <summary>
            Enum InstanceCollectionMode
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.InstanceCollectionMode.Names">
            <summary>
            InstanceCollection{T} is organized with InstanceNames instead of Instance Paths
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.InstanceCollectionMode.Path">
            <summary>
            InstanceCollection{T} is organized with InstancePaths in a flat list
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.InstanceCollectionMode.PathHierarchy">
            <summary>
            InstanceCollection{T} is organized with InstancePaths in a Hierarchy (Only Root objects appearing)
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolCollection`1">
            <summary>
            Interface ISymbolCollection
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:TwinCAT.TypeSystem.IInstanceCollection`1" />
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolCollection">
            <summary>
            Interface ISymbolCollection
            Implements the <see cref="T:TwinCAT.TypeSystem.IInstanceCollection`1" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IInstanceCollection`1" />
        </member>
        <member name="T:TwinCAT.TypeSystem.IFieldCollection">
            <summary>
            Interface IFieldCollection
            Implements the <see cref="T:TwinCAT.TypeSystem.IInstanceCollection`1" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IInstanceCollection`1" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IFieldCollection.TryGetMember(System.String,TwinCAT.TypeSystem.IField@)">
            <summary>
            Gets the Field/Member with the specified name from the collection.
            </summary>
            <param name="fieldName">Name of the field/member.</param>
            <param name="symbol">The symbol with the specified name.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IMemberCollection">
            <summary>
            Interface IMemberCollection
            Implements the <see cref="T:TwinCAT.TypeSystem.IInstanceCollection`1" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IInstanceCollection`1" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IMemberCollection.TryGetMember(System.String,TwinCAT.TypeSystem.IMember@)">
            <summary>
            Gets the member with the specified name from the collection.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="symbol">The symbol.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IMemberCollection.CalcSize">
            <summary>
            Calculates the Byte Size of the <see cref="T:TwinCAT.TypeSystem.IMemberCollection"/>
            </summary>
            <remarks>This takes only the instance fields/members into account.</remarks>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IMemberCollection.Statics">
            <summary>
            Gets the Static Members
            </summary>
            <value>The statics.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IMemberCollection.Instances">
            <summary>
            Gets the Instance members (non static)
            </summary>
            <value>The instances.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolServer">
            <summary>
            Symbol Server Interface
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolServer.DataTypes">
            <summary>
            Gets the data types
            </summary>
            <remarks>
            This property reads the DataTypes synchronously, if the data is not available yet. For performance reasons, the asynchronous
            counterpart <see cref="M:TwinCAT.TypeSystem.ISymbolServer.GetDataTypesAsync(System.Threading.CancellationToken)"/> should be preferred for the first call.
            </remarks>
            <value>The data types.</value>
            <seealso cref="M:TwinCAT.TypeSystem.ISymbolServer.GetDataTypesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolServer.Symbols">
            <summary>
            Gets the symbols.
            </summary>
            <value>The symbols.</value>
            <remarks>This property reads the Symbol information synchronously, if the data is not available yet. For performance reasons, the asynchronous
            counterpart <see cref="M:TwinCAT.TypeSystem.ISymbolServer.GetSymbolsAsync(System.Threading.CancellationToken)" /> should be preferred for the first call.</remarks>
            <seealso cref="M:TwinCAT.TypeSystem.ISymbolServer.GetSymbolsAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolServer.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbols asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultSymbols"/> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolServer.Symbols"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolServer.TryGetSymbols(TwinCAT.TypeSystem.ISymbolCollection{TwinCAT.TypeSystem.ISymbol}@)">
            <summary>
            Tries to geth the symbols from the device target.
            </summary>
            <param name="symbols">The symbols.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolServer.GetDataTypesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the data types asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'GetDataTypes' operation. The <see cref="T:TwinCAT.TypeSystem.ResultDataTypes"/> parameter contains the data types
            (<see cref="P:TwinCAT.TypeSystem.ResultDataTypes.DataTypes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolServer.DataTypes"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolServer.TryGetDataTypes(TwinCAT.TypeSystem.IDataTypeCollection{TwinCAT.TypeSystem.IDataType}@)">
            <summary>
            Tries to get the symbols from the device target.
            </summary>
            <param name="dataTypes">The data types.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolServer.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolServer.ResetCachedSymbolicData">
            <summary>
            Resets the cached symbolic data.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ArrayIndexIterator">
            <summary>
            Iterator for iterating Indices of an Array Type.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayIndexIterator._lowerBounds">
            <summary>
            Lower bounds
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayIndexIterator._upperBounds">
            <summary>
            Upper bounds
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ArrayIndexIterator._zeroShift">
            <summary>
            Aligns the returned indices to 0-basing arrays
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.Create(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Creates the <see cref="T:TwinCAT.TypeSystem.ArrayIndexIterator"/> from dimension lengths specifications.
            </summary>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="lengths">The lengths.</param>
            <param name="zeroShift">if set to <c>true</c> [zero shift].</param>
            <returns>ArrayIndexIterator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ArrayIndexIterator"/> class.
            </summary>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.#ctor(System.Array)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ArrayIndexIterator"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.#ctor(System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ArrayIndexIterator" /> class.
            </summary>
            <param name="lowerBounds">The lower bounds.</param>
            <param name="upperBounds">The upper bounds.</param>
            <param name="zeroShift">if set to <c>true</c> [zero shift].</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.#ctor(TwinCAT.TypeSystem.IArrayType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ArrayIndexIterator"/> class.
            </summary>
            <param name="arrayType">Type of the array.</param>
            <param name="zeroShift">if set to <c>true</c> [zero shift].</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.#ctor(TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ArrayIndexIterator"/> class.
            </summary>
            <param name="arrayType">Type of the array.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.getIndexFactors">
            <summary>
            Gets the index factors.
            </summary>
            <returns>System.Int32[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ArrayIndexIterator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.AnyTypeConverter">
            <summary>
            Class AnyTypeConverter.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.IsJaggedArray(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Determines whether the specified data type is jagged.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is jagged; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.IsJaggedArray(TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Determines whether the specified type is jagged.
            </summary>
            <param name="spec">The specifiyer</param>
            <returns><c>true</c> if [is jagged array] [the specified spec]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.TryGetArguments(TwinCAT.TypeSystem.IDataType,System.Int32[]@)">
            <summary>
            Tries to create the AnyType arguments from the <see cref="T:TwinCAT.TypeSystem.IDataType" />
            </summary>
            <param name="type">The type.</param>
            <param name="args">The arguments.</param>
            <returns><c>true</c> if the arguments could be created, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.TryGetArguments(TwinCAT.TypeSystem.AnyTypeSpecifier,System.Int32[]@)">
            <summary>
            Tries to get the AnyType arguments from the specifier.
            </summary>
            <param name="spec">The type specifier.</param>
            <param name="args">The arguments.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.IsJaggedArray(System.Type)">
            <summary>
            Determines whether the specified Type is an jagged array
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is jagged array] [the specified type]; otherwise, <c>false</c>.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.TryJaggedArray(System.Type,System.Int32@,System.Type@)">
            <summary>
            Determines whether the managed type is a jagged array
            </summary>
            <param name="arrayType">The array to test for (jagged)</param>
            <param name="jagDimensions">The jag level.</param>
            <param name="baseElementType">Type of the (jagged) base element.</param>
            <returns><c>true</c> if [is jagged array] [the specified managed type]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">managedType</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.TryJaggedArray(System.Array,System.Int32@,System.Type@,System.Int32@)">
            <summary>
            Determines whether the managed type is a jagged array
            </summary>
            <param name="arrayValue">The array.</param>
            <param name="jagLevel">The jag level.</param>
            <param name="baseElementType">Type of the (jagged) base element.</param>
            <param name="jaggedElementCount">The jagged element count. This is the amount of compatible base elements in a multi-dimensional array</param>
            <returns><c>true</c> if [is jagged array] [the specified managed type]; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">managedType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.TryParseArguments(System.Type,System.Int32[],System.Collections.Generic.IList{TwinCAT.TypeSystem.IDimensionCollection}@,System.Int32@)">
            <summary>
            Parses the AnyType Arguments array (args) to its components.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The arguments.</param>
            <param name="jaggedDimensions">The dim lengths.</param>
            <param name="strLen">Length of the string.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.TryGetStringLength(System.Type,System.Int32[],System.Int32@)">
            <summary>
            Tries to get the specified String Length from the Arguments (if string is part of type)
            </summary>
            <param name="type">The type.</param>
            <param name="args">The arguments.</param>
            <param name="strLen">Length of the string.</param>
            <returns><c>true</c> if the string length is determined, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Mismatching size of args. Length is {args.Length}, expected is {expectedArgsCount}! - args</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeConverter.ExpectedArgsCount(System.Type)">
            <summary>
            Determines the Length of the Arguments Array that should be used for the specified Type
            </summary>
            <param name="type">The type.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.AnyTypeValueCreator">
            <summary>
            Class AnyTypeValueCreator.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeValueCreator.CreateValue(TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Creates a value from the specified type.
            </summary>
            <param name="spec">The spec.</param>
            <returns>System.Nullable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeValueCreator.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value.
            </summary>
            <param name="t">The t.</param>
            <returns>System.Nullable&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeValueCreator.createArray(TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Creates the array.
            </summary>
            <param name="spec">The spec.</param>
            <returns>Array.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeValueCreator.initArray(TwinCAT.TypeSystem.AnyTypeSpecifier,TwinCAT.TypeSystem.DimensionCollection)">
            <summary>
            Initializes the array.
            </summary>
            <param name="elementSpec">The element spec.</param>
            <param name="dims">The dims.</param>
            <returns>IList.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.AnySymbolSpecifier">
            <summary>
            Class AnySymbolSpecifier.
            </summary>
            <remarks>Specifies an Symbol path together with an <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> to address a symbol for an Read/Write operation</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnySymbolSpecifier.#ctor(System.String,TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnySymbolSpecifier"/> class.
            </summary>
            <param name="instancePath">The instance path.</param>
            <param name="spec">The spec.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnySymbolSpecifier.InstancePath">
            <summary>
            Gets the instance path.
            </summary>
            <value>The instance path.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnySymbolSpecifier.TypeSpecifier">
            <summary>
            Gets the type specifier.
            </summary>
            <value>The type specifier.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.AnyTypeSpecifier">
            <summary>
            Class AnyTypeSpecifier.
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> is used to specify out/return parameters for ReadAny, InvokeRpc-Methods or typed
            AdsNotifications.
            
            The Args parameter:
            String: Index-0 Length of String
            String[] Index-0 Length of String
                    Index-1 Length of First Dimension
                    Index-2 Length of Second Dimension
            Arrays Index-0 Length of Second Dimension
                    Index-2 Length of Second Dimension
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.Create(System.Type,System.Int32[],System.Text.Encoding)">
            <summary>
            Creates the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/>.
            </summary>
            <param name="type">The data type.</param>
            <param name="args">The AnyType arguments.</param>
            <param name="encoding">The encoding used by the type.</param>
            <returns>AnyTypeSpecifier.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.CreateString(System.Int32,System.Text.Encoding)">
            <summary>
            Creates a string specifier
            </summary>
            <param name="strLen">The length of the string.</param>
            <param name="encoding">The encoding.</param>
            <returns>AnyTypeSpecifier.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnyTypeSpecifier.Category">
            <summary>
            Category of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnyTypeSpecifier.Type">
            <summary>
            Managed type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnyTypeSpecifier.StrLen">
            <summary>
            The String length (only for <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.String"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnyTypeSpecifier.Encoding">
            <summary>
            Gets the encoding of the Type (if string)
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnyTypeSpecifier.Dimensions">
            <summary>
            Gets the dimensions of an array.
            </summary>
            <value>The dimensions.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.AnyTypeSpecifier.Element">
            <summary>
            The element type (Arrays)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Type,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding for the specified type.</param>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Type,System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="strLen">Length of the string.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Type,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The dim lengths.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Type,System.Int32[],System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="args">The dim lengths.</param>
            <param name="encoding">The encoding used for this type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">type</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Type,System.Collections.Generic.IList{TwinCAT.TypeSystem.IDimensionCollection},System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier" /> class.
            </summary>
            <param name="type">The type.</param>
            <param name="jaggedDimLengths">The jagged dim Lengths.</param>
            <param name="strLen">The String length used (on strings).</param>
            <param name="encoding">The used encoding (for strings)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">type</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> class from the specified prototype
            </summary>
            <param name="prototype">The prototype.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.AnyTypeSpecifier.#ctor(System.Object,System.Int32,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier" /> class from the specified prototype
            </summary>
            <param name="prototype">The prototype.</param>
            <param name="strLen">Length of the string.</param>
            <param name="encoding">The encoding used for the type.</param>
            <exception cref="T:System.ArgumentNullException">prototype</exception>
            <exception cref="T:System.ArgumentException">Could not resolve prototype object! - prototype</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.ITypeMarshaler">
            <summary>
            Interface ITypeMarshaler
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.TypeSystem.ITypeMarshaler"/> is the common base interface for marshalling classes. It support marshalling / unmarshalling
            of primitive managed values.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeMarshaler.CanMarshal(System.Type)">
            <summary>
            Determines whether ADS can marshal the specified managed data type.
            </summary>
            <param name="type">The Managed data type.</param>
            <returns><c>true</c> if this instance can marshal the specified managed type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeMarshaler.CanMarshalValue(System.Object)">
            <summary>
            Determines whether ADS can marshal the specified value
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if this instance can marshal the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeMarshaler.Marshal(System.Object,System.Text.Encoding,System.Span{System.Byte})">
            <summary>
            Marshals the specified value to the specified destination memory / span.
            </summary>
            <param name="value">The value to marshal.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The destination span.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeMarshaler.MarshalValueSize(System.Object,System.Text.Encoding)">
            <summary>
            Gets the byte size of the value when marshalled.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
            <returns>The marshal size of the value.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeMarshaler.Unmarshal(System.Type,System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.Object@)">
            <summary>
            Unmarshals the specified managed type from memory / span
            </summary>
            <param name="type">The type.</param>
            <param name="source">The source memory/span</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The created value.</param>
            <returns>Number of unmarshaled bytes.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStringMarshaler">
            <summary>
            Common interface for marshalling ADS string values.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStringMarshaler.Encoding">
            <summary>
            The encoding used by this marshaler.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStringMarshaler.StringTerminatorSize">
            <summary>
            Gets the size of the string terminator '\0'
            </summary>
            <value>The size of the string terminator.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.MarshalSize(System.Text.Encoding,System.Int32)">
            <summary>
            Gets the marshal size of the string given by its length.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="strLen">Length of the string.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.MarshalSize(System.String)">
            <summary>
            Gets the marshal size of the string.
            </summary>
            <param name="value">The string value.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.MarshalSize(TwinCAT.TypeSystem.IStringType)">
            <summary>
            Gets the marshal size of the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <returns>Marshalling size of the string</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.Marshal(System.String,System.Span{System.Byte})">
            <summary>
            Marshals the specified string value.
            </summary>
            <param name="value">The value.</param>
            <param name="destination">The destination span/memory.</param>
            <returns>Number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.Marshal(TwinCAT.TypeSystem.IStringType,System.String,System.Span{System.Byte})">
            <summary>
            Marshals the specified string value.
            </summary>
            <param name="type">The string type.</param>
            <param name="value">The string value.</param>
            <param name="destination">The destination span/memory.</param>
            <returns>The Number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.String@)">
            <summary>
            Unmarshals a string from memory/span.
            </summary>
            <param name="source">The source memory/span.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The unmarshalled value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.String@)">
            <summary>
            Unmarshals a string from memory/span.
            </summary>
            <param name="source">The source memory/span.</param>
            <param name="value">The unmarshalled value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStringMarshaler.Unmarshal(TwinCAT.TypeSystem.IStringType,System.ReadOnlySpan{System.Byte},System.String@)">
            <summary>
            Unmarshals the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <param name="source">The source memory/span.</param>
            <param name="value">The unmarshaled string value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IGenericTypeMarshaler">
            <summary>
            Interface IGenericTypeMarshaller
            Implements the <see cref="T:TwinCAT.TypeSystem.ITypeMarshaler" />
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.TypeSystem.IGenericTypeMarshaler"/> extends the <see cref="T:TwinCAT.TypeSystem.ITypeMarshaler"/> by generic methods.
            </remarks>
            <seealso cref="T:TwinCAT.TypeSystem.ITypeMarshaler" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IGenericTypeMarshaler.Unmarshal``1(System.ReadOnlySpan{System.Byte},System.Text.Encoding,``0@)">
            <summary>
            Unmarshals the source data to an managed value of the specified type.
            </summary>
            <typeparam name="T">The values type.</typeparam>
            <param name="source">The source data.</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The value.</param>
            <returns>Number of unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IAnyTypeMarshaler">
            <summary>
            Interface IAnyTypeMarshaler
            Implements the <see cref="T:TwinCAT.TypeSystem.IGenericTypeMarshaler" />
            </summary>
            <remarks>The <see cref="T:TwinCAT.TypeSystem.IAnyTypeMarshaler"/> supports value marshalling / Unmarshalling with the
            ADS ANY_TYPE concept, what means that the specified managed type is supported by an arguments metadata 
            array (args parameter).
            </remarks>
            <seealso cref="T:TwinCAT.TypeSystem.IGenericTypeMarshaler" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IAnyTypeMarshaler.CanMarshal(System.Type,System.Int32[],System.Text.Encoding)">
            <summary>
            Determines whether ADS can marshal the specified managed data type.
            </summary>
            <param name="anyType">The Managed data type.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if this instance can marshal the specified managed type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IAnyTypeMarshaler.CanMarshalValue(System.Object,System.Int32[],System.Text.Encoding)">
            <summary>
            Determines whether ADS can marshal the specified managed data type.
            </summary>
            <param name="value">The managed value.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if this instance can marshal the specified managed type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IAnyTypeMarshaler.Marshal(System.Object,System.Int32[],System.Text.Encoding,System.Span{System.Byte})">
            <summary>
            Marshals the specified value to the specified destination.
            </summary>
            <param name="anyValue">The value to marshal.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The destination span.</param>
            <returns>TheNumber of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IAnyTypeMarshaler.MarshalValueSize(System.Object,System.Int32[],System.Text.Encoding)">
            <summary>
            Gets the byte size of the value when marshalled.
            </summary>
            <param name="anyValue">Any value.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <returns>The marshal size of the value.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IAnyTypeMarshaler.Unmarshal(System.Type,System.Int32[],System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.Object@)">
            <summary>
            Unmarshals the source data to an managed value of the specified type.
            </summary>
            <param name="anyType">The managed type.</param>
            <param name="args">The arguments.</param>
            <param name="encoding">The encoding.</param>
            <param name="source">The source data.</param>
            <param name="value">The value.</param>
            <returns>Number of unmarshaled bytes.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolMarshaler">
            <summary>
            Interface Marshaller / Converter for IDataType Values
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolMarshaler.CanMarshal(TwinCAT.TypeSystem.IAttributedInstance,System.Type)">
            <summary>
            Determines whether this instance can marshal the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">Managed value Type (optional, can be null for primitives, strings or arrays of primitives).</param>
            <returns><c>true</c> if this instance can marshal the specified symbol; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolMarshaler.Unmarshal(TwinCAT.TypeSystem.IAttributedInstance,System.ReadOnlySpan{System.Byte},System.Type,System.Object@)">
            <summary>
            Unmarshalled the specified memory data to the typed value 
            </summary>
            <param name="type">The type.</param>
            <param name="valueType">Managed value Type (optional, can be null for primitives, strings or arrays of primitives).</param>
            <param name="source">The source memory.</param>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentNullException">type
            or
            data</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolMarshaler.Marshal(TwinCAT.TypeSystem.IAttributedInstance,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the value to destination span/memory.
            </summary>
            <param name="symbol">The type.</param>
            <param name="value">The data.</param>
            <param name="destination">The bytes.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolMarshaler.MarshalSize(TwinCAT.TypeSystem.IInstance)">
            <summary>
            Gets the MarshalSize of the symbol/value.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolMarshaler.DefaultValueEncoding">
            <summary>
            Gets the default value encoding like specified by the used ValueAccessor.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDataTypeMarshaler">
            <summary>
            Interface Marshaller / Converter for IDataType Values
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeMarshaler.CanMarshal(TwinCAT.TypeSystem.IDataType,System.Type)">
            <summary>
            Determines whether this instance can marshal the specified ADS type (and create the managed value type).
            </summary>
            <param name="type">The type.</param>
            <param name="valueType">Managed value Type (optional, can be null for primitives, strings or arrays of primitives).</param>
            <returns><c>true</c> if this instance can marshal the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeMarshaler.Unmarshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.ReadOnlySpan{System.Byte},System.Type,System.Object@)">
            <summary>
            Unmarshals the specified source memory to a (primitive) data type value.
            </summary>
            <param name="type">The ADS type.</param>
            <param name="valueType">Managed value Type (optional, can be null for primitives, strings or arrays of primitives).</param>
            <param name="encoding">Forced encoding for strings or NULL (Default).</param>
            <param name="source">The data.</param>
            <param name="value">The created value object.</param>
            <returns>The number of unmarshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">type
            or
            data</exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <remarks>if the value type is not given, this method can only unmarshal values from primitives, strings
            or array of primitives.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeMarshaler.Marshal(TwinCAT.TypeSystem.IDataType,System.Text.Encoding,System.Object,System.Span{System.Byte})">
            <summary>
            Marshals the specified value to Memory.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">Forced encoding for strings or NULL.</param>
            <param name="value">The data.</param>
            <param name="destination">The bytes.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeMarshaler.MarshalSize(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Marshals the size.
            </summary>
            <param name="type">The type.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeMarshaler.TryGetManagedType(TwinCAT.TypeSystem.IDataType,System.Type@)">
            <summary>
            Tries to get the corresponding managed type.
            </summary>
            <param name="type">The type.</param>
            <param name="managed">The managed.</param>
            <returns><c>true</c> if the managed data type is determined, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.StringConvertMode">
            <summary>
            Enum StringConvertMode
            </summary>
            <remarks>The <see cref="T:TwinCAT.TypeSystem.StringConvertMode"/> is used to specify, how Strings will be marshalled / demarshalled.
            </remarks>
            <seealso cref="T:TwinCAT.TypeSystem.StringMarshaler"/>
        </member>
        <member name="F:TwinCAT.TypeSystem.StringConvertMode.FixedLength">
            <summary>
            Fixed Length String
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated">
            <summary>
            Fixed Length String that can be terminated with '\0'
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.StringConvertMode.ZeroTerminated">
            <summary>
            '\0' terminated dynamic length string
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.StringConvertMode.LengthPrefix">
            <summary>
            Length Prefix (number of following bytes as uint 4-Byte)
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.StringMarshaler">
            <summary>
            Converter class converting PLC strings to .NET strings and vice versa
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.#ctor(System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.StringMarshaler"/> class.
            </summary>
            <param name="encoding">The default encoding of the <see cref="T:TwinCAT.TypeSystem.StringMarshaler"/></param>
            <param name="mode">The convert mode.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.StringMarshaler._encoding">
            <summary>
            The encoding (actually Default and Unicode allowed)
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.Encoding">
            <summary>
            Gets the encoding of this <see cref="T:TwinCAT.TypeSystem.StringMarshaler"/>.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.StringMarshaler._mode">
            <summary>
            The convert mode (default <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>)
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.StringMode">
            <summary>
            Gets the string convert mode.
            </summary>
            <value>The string mode.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.StringMarshaler.s_default">
            <summary>
            The default marshaller <see cref="T:TwinCAT.TypeSystem.StringMarshaler"/> (<see cref="P:TwinCAT.TypeSystem.StringMarshaler.DefaultEncoding"/> and <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>)
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.Default">
            <summary>
            Gets the default converter (<see cref="P:TwinCAT.TypeSystem.StringMarshaler.DefaultEncoding"/> and <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>)
            </summary>
            <value>The default converter.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.DefaultVariableLength">
            <summary>
            Gets the default converter (with Variable Length, (<see cref="P:TwinCAT.TypeSystem.StringMarshaler.DefaultEncoding"/> and <see cref="F:TwinCAT.TypeSystem.StringConvertMode.ZeroTerminated"/>)
            </summary>
            <value>The default converter.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.Unicode">
            <summary>
            Gets the unicode converter (<see cref="P:System.Text.Encoding.Unicode"/> and <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated"/>)
            </summary>
            <value>The unicode converter.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.UnicodeVariableLength">
            <summary>
            Gets the unicode converter (with variable Length, <see cref="P:System.Text.Encoding.Unicode"/> and <see cref="F:TwinCAT.TypeSystem.StringConvertMode.ZeroTerminated"/>)
            </summary>
            <value>The unicode converter.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalSize(System.String,System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode)">
            <summary>
            Gets the marshal size of the string.
            </summary>
            <param name="str">The string value.</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode.</param>
            <returns>Marshal size of the string.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalSize(System.Text.Encoding,System.Int32)">
            <summary>
            Gets the marshal size of the string given by its length.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="strLen">Length of the string.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalSize(System.Int32)">
            <summary>
            Marshals the size.
            </summary>
            <param name="strLen">Length of the string.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalSize(System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode,System.Int32)">
            <summary>
            Gets the marshal size of a string with the specified length, encoding and <see cref="T:TwinCAT.TypeSystem.StringConvertMode"/>.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode.</param>
            <param name="strLen">Length of the string.</param>
            <returns>Th number of marshalled bytes.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalSize(System.String)">
            <summary>
            Gets the marshal size of the string.
            </summary>
            <param name="value">The string value.</param>
            <returns>Marshalling size of the string.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Marshal(System.String,System.Span{System.Byte})">
            <summary>
            Marshals the specified string.
            </summary>
            <param name="value">The string value.</param>
            <param name="destination">The destination span/memory.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Marshal(System.String,System.Text.Encoding,System.Span{System.Byte})">
            <summary>
            Marshals the specified string.
            </summary>
            <param name="value">The string value.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The destination span/memory.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Marshal(System.String,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshals the specified string with the maximum amount of bytes.
            </summary>
            <param name="value">The string value.</param>
            <param name="maxBytes">The maximum bytes that will be marshalled.</param>
            <param name="destination">The marshal destination.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalAnsi(System.String,TwinCAT.TypeSystem.StringConvertMode,System.Int32,System.Span{System.Byte})">
            <summary>
            Converts a string to Default ANSI Coded Bytes.
            </summary>
            <param name="str">The STR.</param>
            <param name="mode">The mode.</param>
            <param name="maxBytes">The maximum bytes marshalled.</param>
            <param name="data">The Marshal destination.</param>
            <returns>Byte array coded in Encoding.Default with terminating '\0' character</returns>
            <exception cref="T:System.ArgumentNullException">str</exception>
            <exception cref="T:System.ArgumentNullException">str</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalArray(System.String[],System.Int32,System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode,System.Span{System.Byte})">
            <summary>
            Marshals the specified array of strings.
            </summary>
            <param name="strings">The strings.</param>
            <param name="strLen">The maximum string length of each string.</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Marshal(System.String,System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode,System.Int32,System.Span{System.Byte})">
            <summary>
            Marshalls a string value with the specified encoding.
            </summary>
            <param name="str">The string value.</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode.</param>
            <param name="maxBytes">The maximum bytes, non specified is indicated by '-1'.</param>
            <param name="data">The marshalling destination.</param>
            <returns>Byte array coded in Encoding.Unicode with terminating '\0' character</returns>
            <exception cref="T:System.ArgumentNullException">str</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            str
            or
            str
            or
            str
            or
            str
            </exception>
            <exception cref="T:System.ArgumentException">
            maxBytes
            or
            maxBytes
            </exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentNullException">str</exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.DefaultEncoding">
            <summary>
            Gets the default encoding.
            </summary>
            <remarks>Historically, the Default encoding is ANSI with CodePage 1252 (West-European).
            </remarks>
            <value>The default encoding.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.UnicodeEncoding">
            <summary>
            Gets the unicode encoding.
            </summary>
            <value>The unicode encoding.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.StringMarshaler.StringTerminatorSize">
            <summary>
            Gets the size of the string terminator '\0'
            </summary>
            <value>The size of the string terminator.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.CanMarshal(TwinCAT.Ads.AdsDataTypeId)">
            <summary>
            Determines whether this instance can marshal the specified type identifier.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns><c>true</c> if this instance can marshal the specified type identifier; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.CanMarshal(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Determines whether this instance can marshal the specified category.
            </summary>
            <param name="category">The category.</param>
            <returns><c>true</c> if this instance can marshal the specified category; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.CanMarshalValue(System.Object)">
            <summary>
            Determines whether ADS can marshal the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if this instance can marshal the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.CanMarshal(System.Int32,System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode,System.String)">
            <summary>
            Determines whether ADS can marshal the specified value.
            </summary>
            <param name="byteSize">The byte size of the the symbol/dataType.</param>
            <param name="encoding">The encoding of the string.</param>
            <param name="mode">The mode.</param>
            <param name="value">The value.</param>
            <returns>
              <c>true</c> if this instance can marshal the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.UnmarshalAnsi(System.ReadOnlySpan{System.Byte},System.String@)">
            <summary>
            Converts the ANSI encoded (Encoding.Default) byte array to string
            </summary>
            <param name="sourceBuffer">The source buffer to unmarshal.</param>
            <param name="value">The unmarshalled string.</param>
            <returns>The contained string.</returns>
            <remarks>Reads the string only to the first occurrence of '\0'</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.String@)">
            <summary>
            Unmarshals the specified source data to a string value.
            </summary>
            <param name="source">The source buffer to unmarshal.</param>
            <param name="encoding">The encoding.</param>D
            <param name="value">The string value.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.String@)">
            <summary>
            Unmarshals the specified source data to a string value.
            </summary>
            <param name="source">The source buffer to unmarshal.</param>
            <param name="value">The string value.</param>
            <returns>The number of unmarshaled bytes.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},System.Text.Encoding,TwinCAT.TypeSystem.StringConvertMode,System.String@)">
            <summary>
            Unmarshals the specified source data to a string value.
            </summary>
            <param name="source">The source buffer to unmarshal</param>
            <param name="encoding">The encoding.</param>
            <param name="mode">The mode.</param>
            <param name="value">The unmarshaled value</param>
            <returns>The number of unmarshaled bytes..</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">byteCount</exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.CreateFrom(TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.StringConvertMode)">
            <summary>
            Creates the <see cref="T:TwinCAT.TypeSystem.StringMarshaler"/> from a string  <see cref="T:TwinCAT.TypeSystem.IDataType">Data Type</see> and Encoding.
            </summary>
            <param name="type">The type.</param>
            <param name="mode">The mode.</param>
            <returns>StringMarshaller.</returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.TryGetStringEncoding(TwinCAT.TypeSystem.IDataType,System.Text.Encoding@)">
            <summary>
            Tries to get the Encoding from the string type.
            </summary>
            <param name="type">The type.</param>
            <param name="encoding">The encoding.</param>
            <returns><c>true</c> if encoding found, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.UnmarshalUnicode(System.Span{System.Byte},System.String@)">
            <summary>
            Converts Unicode bytes (WSTRING) to its .net representation.
            </summary>
            <param name="source">The byte buffer to convert.</param>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.UnmarshalArray(System.Span{System.Byte},System.Int32[],System.Int32,System.Text.Encoding,System.String[]@)">
            <summary>
            Unmarshals a string Array from source buffer.
            </summary>
            <param name="source">The source buffer.</param>
            <param name="dimLengths">Dimension Lengths.</param>
            <param name="characters">The maximum characters in each string.</param>
            <param name="encoding">The encoding.</param>
            <param name="strValue">The Array.</param>
            <returns>The number of unmarshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">dimLengths</exception>
            <exception cref="T:System.ArgumentException">Bytes buffer is too small! - bytes</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.CanMarshal(System.Type)">
            <summary>
            Determines whether ADS can marshal the specified managed data type.
            </summary>
            <param name="type">The Managed data type.</param>
            <returns><c>true</c> if this instance can marshal the specified managed type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Marshal(System.Object,System.Text.Encoding,System.Span{System.Byte})">
            <summary>
            Marshals the specified value to a destination span/buffer.
            </summary>
            <param name="val">The value.</param>
            <param name="encoding">The encoding.</param>
            <param name="destination">The destination memory/span.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">val - Can only marshal string type!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalValueSize(System.Object,System.Text.Encoding)">
            <summary>
            Gets the marshalling size of the value (only strings allowed)
            </summary>
            <param name="val">The value.</param>
            <param name="encoding">The encoding.</param>
            <returns>The marshal size of the value.</returns>
            <exception cref="T:System.ArgumentNullException">val</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">val - Can only marshal string type!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Unmarshal(System.Type,System.ReadOnlySpan{System.Byte},System.Text.Encoding,System.Object@)">
            <summary>
            Unmarshals the specified managed type from memory / span (only strings allowed).
            </summary>
            <param name="type">The type.</param>
            <param name="source">The source memory/span</param>
            <param name="encoding">The encoding.</param>
            <param name="value">The created value.</param>
            <returns>Number of unmarshaled bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">val - Can only marshal string type!</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.MarshalSize(TwinCAT.TypeSystem.IStringType)">
            <summary>
            Gets the marshal size of the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <returns>Marshalling size of the string</returns>
            <exception cref="T:System.ArgumentNullException">stringType</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Marshal(TwinCAT.TypeSystem.IStringType,System.String,System.Span{System.Byte})">
            <summary>
            Marshals the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <param name="value">The value.</param>
            <param name="destination">The destination.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">
            stringType
            or
            value
            </exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.StringMarshaler.Unmarshal(TwinCAT.TypeSystem.IStringType,System.ReadOnlySpan{System.Byte},System.String@)">
            <summary>
            Unmarshals the specified string type.
            </summary>
            <param name="stringType">Type of the string.</param>
            <param name="source">The source memory/span.</param>
            <param name="value">The unmarshaled string value.</param>
            <returns>The number of unmarshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">stringType</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolIterationMask">
            <summary>
            Mask Flagset to specify filters for <see cref="T:TwinCAT.TypeSystem.SymbolIterator`1"/>.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.None">
            <summary>
            Uninitialized / None
            </summary>
            <remarks>Doesn't iterate over complex types
            </remarks>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.Structures">
            <summary>
            Iterates over Subelements of Structs
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.Arrays">
            <summary>
            Iterates over Elements of Arrays
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.Unions">
            <summary>
            Iterates over Subelements of Unions
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.Pointer">
            <summary>
            Iterates over Pointer SubElements
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.References">
            <summary>
            Iterates over References
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.All">
            <summary>
            Iterates over All Complex/Combined types
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterationMask.AllWithoutArrayElements">
            <summary>
            Iterates over All Complex/Combined types excluding Array elements
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolIterator`1">
            <summary>
            Iterator class for enumerations of <see cref="T:TwinCAT.TypeSystem.ISymbol">Symbols</see>.
            </summary>
            <typeparam name="T">Concrete <see cref="T:TwinCAT.TypeSystem.ISymbol"/> type.</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <remarks>This iterator class can be used to iterate over collections of symbol trees (root symbols + sub symbols).
            By constructor the user can choose if the iterator works recursively within the symbol
            tree and optionally a filter function to select only specific symbols (predicate).
            </remarks>
            <example>
            The following example shows how to determine, browse and filter symbols.
            <code language="C#" title="Browsing and filtering Symbols" source="..\..\Samples\TwinCAT.ADS.NET_Samples\01_ADS.NET_ReadWriteFlag\Form1.cs" region="CODE_SAMPLE_SYMBOLBROWSER_ASYNC" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,TwinCAT.TypeSystem.SymbolIterationMask,System.Func{`0,System.Boolean},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator`1"/> class.
            </summary>
            <param name="symbols">Input collection (root objects).</param>
            <param name="recurse">if set to <c>true</c>, the iterator works recursively over all subsymbols.</param>
            <param name="mask">Specifies a mask over the symbols, that filters out specific symbol categories. The default is <see cref="F:TwinCAT.TypeSystem.SymbolIterationMask.All"/> and all symbols are shown.</param>
            <param name="selector">Predicate function indicating that symbols are visible for the iteration. The default value null returns all symbols (of the specified mask).</param>
            <param name="areChildsIterated">Predicate function indicating that childs of the actual symbol should be iterated (in recurse mode). The default value iterates all child (of the specified mask).</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator`1"/> class.
            </summary>
            <param name="symbols">Input collection (root objects).</param>
            <param name="recurse">if set to <c>true</c>, the iterator works recursively over all subsymbols.</param>
            <param name="selector">Predicate function indicating that symbols are visible for the iteration. The default value null returns all symbols (of the specified mask).</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator`1" /> class.
            </summary>
            <param name="symbols">The root collection</param>
            <param name="recurse">if set to <c>true</c>, the iterator works recursively over all subsymbols.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.#ctor(TwinCAT.TypeSystem.IInstanceCollection{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator`1" /> class.
            </summary>
            <param name="symbols">The root symbols.</param>
            <param name="selector">Predicate function indicating that symbols are visible for the iteration. The default value null returns all symbols (of the specified mask).</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.#ctor(TwinCAT.TypeSystem.IInstanceCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator`1"/> class.
            </summary>
            <param name="symbols">The root symbols.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterator`1._symbols">
            <summary>
            Symbols enumeration
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterator`1._mask">
            <summary>Symbol Iterator mask</summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolIterator`1.Mask">
            <summary>
            Gets or sets the <see cref="T:TwinCAT.TypeSystem.SymbolIterationMask"/>
            </summary>
            <value>The mask.</value>
            <remarks>This property can be used for prefiltering the iterator 
            without using a predicate function.
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.SymbolIterator`1.SymbolRecursionDetection">
            <summary>
            Gets or sets a value indicating whether the iterator checks for Symbol recursions (true by default).
            </summary>
            <value><c>true</c> if recursion checking, <c>false</c> switched off check.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.GetEnumerator">
            <summary>
            Gets the enumerator that enumerates through a collection
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterator`1._selectorPredicate">
            <summary>
            The Filter handler Function
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolIterator`1._areChildsSelectedPredicate">
            <summary>
            Handler function indicating if children are browsed
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.iterateSubSymbols(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Indicates that the subsymbols of the parent should be iterated.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.iterateSubSymbols(`0)">
            <summary>
            Indicates that the subsymbols of the parent should be iterated.
            </summary>
            <param name="parent">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolIterator">
            <summary>
            Iterator class for enumerations of <see cref="T:TwinCAT.TypeSystem.ISymbol">Symbols</see>.
            </summary>
            <remarks>This iterator class can be used to iterate over collections of symbol trees (root symbols + sub symbols).
            By constructor the user can choose if the iterator works recursively within the symbol
            tree and optionally a filter function to select only specific symbols (predicate).
            </remarks>
            <example>
            The following example shows how to determine, browse and filter symbols.
            <code language="C#" title="Browsing and filtering Symbols" source="..\..\Samples\TwinCAT.ADS.NET_Samples\01_ADS.NET_ReadWriteFlag\Form1.cs" region="CODE_SAMPLE_SYMBOLBROWSER_ASYNC" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol},System.Boolean,TwinCAT.TypeSystem.SymbolIterationMask,System.Func{TwinCAT.TypeSystem.ISymbol,System.Boolean},System.Func{TwinCAT.TypeSystem.ISymbol,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator" /> class.
            </summary>
            <param name="symbols">The symbol collection.</param>
            <param name="recurse">if set to <c>true</c>, the iterator works recursively over all subsymbols.</param>
            <param name="mask">Specifies a mask over the symbols, that filters out specific symbol categories. The default is <see cref="F:TwinCAT.TypeSystem.SymbolIterationMask.All"/> and all symbols are shown.</param>
            <param name="selector">Predicate function indicating that symbols are visible for the iteration. The default value null returns all symbols (of the specified mask).</param>
            <param name="areChildsIterated">Predicate function indicating that childs of the actual symbol should be iterated (in recurse mode). The default value iterates all child (of the specified mask).</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator.#ctor(TwinCAT.TypeSystem.IInstanceCollection{TwinCAT.TypeSystem.ISymbol},System.Func{TwinCAT.TypeSystem.ISymbol,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator" /> class.
            </summary>
            <param name="symbols">The symbol collection.</param>
            <param name="selector">Predicate function indicating that symbols are visible for the iteration. The default value null returns all symbols (of the specified mask).</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol},System.Boolean,System.Func{TwinCAT.TypeSystem.ISymbol,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator" /> class.
            </summary>
            <param name="symbols">The symbol collection.</param>
            <param name="recurse">if set to <c>true</c>, the iterator works recursively over all subsymbols.</param>
            <param name="selector">Predicate function indicating that symbols are visible for the iteration. The default value null returns all symbols (of the specified mask).</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator.#ctor(TwinCAT.TypeSystem.IInstanceCollection{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator"/> class.
            </summary>
            <param name="symbols">The symbol collection</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.SymbolIterator.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.ISymbol},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.SymbolIterator"/> class.
            </summary>
            <param name="symbols">The symbol enumeration.</param>
            <param name="recurse">if set to <c>true</c>, the iterator works recursively over all subsymbols.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDimensionCollection">
            <summary>
            Interface IDimensionCollection
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IDimension" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimensionCollection.LowerBounds">
            <summary>
            Gets the lower bounds.
            </summary>
            <value>The lower bounds.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimensionCollection.UpperBounds">
            <summary>
            Gets the lower bounds.
            </summary>
            <value>The lower bounds.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimensionCollection.ElementCount">
            <summary>
            Gets the Number of elements in all Dimensions
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDimensionCollection.GetDimensionLengths">
            <summary>
            Gets an array the specifies the Lengths of each Array Dimension
            </summary>
            <returns>System.Int32[].</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimensionCollection.IsNonZeroBased">
            <summary>
            Gets a value indicating whether this instance is non zero index based.
            </summary>
            <value><c>true</c> if this instance is non zero indexed based; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ITypeAttributeCollection">
            <summary>
            Interface ITypeAttributeCollection
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeAttributeCollection.Contains(System.String)">
            <summary>
            Determines whether this <see cref="T:TwinCAT.TypeSystem.ITypeAttributeCollection"/> contains the specified attribute.
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeAttributeCollection.TryGetAttribute(System.String,TwinCAT.TypeSystem.ITypeAttribute[]@)">
            <summary>
            Tries to get the specified <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/>
            </summary>
            <param name="name">The name of the <see cref="T:TwinCAT.TypeSystem.ITypeAttribute"/>.</param>
            <param name="attributes">The attributes.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeAttributeCollection.TryGetValue(System.String,System.String[]@)">
            <summary>
            Tries to get the specified Attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="values">The value.</param>
            <returns><c>true</c> if the value is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ITypeAttributeCollection.TryGetSingleValue(System.String,System.String@)">
            <summary>
            Tries to get a single attribute value.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
            <remarks>If more than one Attribute with the same exists, then this method returns fals.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.ITypeAttributeCollection.Item(System.String)">
            <summary>
            Gets the Values of the attribute(s) with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcMethodCollection">
            <summary>
            Interface for RPC Method collections.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMethodCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns><c>true</c> if contained.; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMethodCollection.TryGetMethod(System.String,TwinCAT.TypeSystem.IRpcMethod@)">
            <summary>
            Tries to get the specified method.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="method">The method if fund, <c>NULL</c> otherwise.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMethodCollection.TryGetMethod(System.Int32,TwinCAT.TypeSystem.IRpcMethod@)">
            <summary>
            Tries to get the specified method.
            </summary>
            <param name="vTableIndex">vTableIndex.</param>
            <param name="method">The method if fund, <c>NULL</c> otherwise.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IRpcMethod" /> with the specified method name.
            </summary>
            <param name="methodName">Name of the method.</param>
            <returns>RpcMethod.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.ResultDataTypes">
            <summary>
            Class representing the asynchronous result of reading a <see cref="T:TwinCAT.TypeSystem.IDataTypeCollection"/> via ADS.
            Implements the <see cref="T:TwinCAT.Ads.ResultValue`1" />
            </summary>
            <remarks>The Result value of this operation can be accessed by the <see cref="P:TwinCAT.TypeSystem.ResultDataTypes.DataTypes"/> property.</remarks>
            <seealso cref="T:TwinCAT.Ads.ResultValue`1" />
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultDataTypes.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.TypeSystem.IDataTypeCollection{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ResultDataTypes"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="dataTypes">The datatype collection..</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.ResultDataTypes.DataTypes">
            <summary>
            Gets the data types.
            </summary>
            <value>The data types.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultDataTypes.CreateSuccess(TwinCAT.TypeSystem.IDataTypeCollection{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Creates a success result
            </summary>
            <param name="dataTypes">The data types.</param>
            <returns>ResultRpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultDataTypes.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error result.
            </summary>
            <param name="error">The error.</param>
            <returns>ResultRpcMethod.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ResultSymbols`1">
            <summary>
            Class representing the asynchronous result of reading a symbol enumeration of type <see cref="T:System.Collections.Generic.IEnumerable`1"/> via ADS.
            Implements the <see cref="T:TwinCAT.Ads.ResultValue`1" />
            </summary>
            <typeparam name="T">The type parameter is an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <remarks>This result class is used to return generic Symbol instances. in an enumerable class.
            The value/result of the completed operation can be returned by the <see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols"/> property.</remarks>
            <seealso cref="T:TwinCAT.Ads.ResultValue`1" />
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultSymbols`1.#ctor(TwinCAT.Ads.AdsErrorCode,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ResultSymbols`1"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="symbols">The symbols.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols">
            <summary>
            Get the Symbols enumerable (<typeparamref name="T"/>) as result of an asynchronous operation.
            </summary>
            <value>The symbols.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ResultSymbols">
            <summary>
            Class representing the asynchronous result of reading an symbol collection of type <see cref="T:TwinCAT.TypeSystem.ISymbolCollection`1"/> via ADS.
            Implements the <see cref="T:TwinCAT.Ads.ResultValue`1" />
            </summary>
            <remarks>This result class is used to return generic Symbol instances. in an enumerable class.
            The value/result of the completed operation can be returned by the <see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols"/> property.</remarks>
            <seealso cref="T:TwinCAT.Ads.ResultValue`1" />
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultSymbols.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.TypeSystem.ISymbolCollection{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ResultSymbols"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="symbols">The result symbols.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultSymbols.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultSymbols.CreateSuccess(TwinCAT.TypeSystem.ISymbolCollection{TwinCAT.TypeSystem.ISymbol})">
            <summary>
            Creates a success result.
            </summary>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ResultDynamicSymbols">
            <summary>
            Class representing the asynchronous result of reading a dynamic symbol collection via ADS.
            Implements the <see cref="T:TwinCAT.Ads.ResultValue`1" />
            </summary>
            <remarks>This result class is used to return Symbol instances of dynamic nature in an <see cref="T:TwinCAT.TypeSystem.IDynamicSymbolsCollection"/>.
            The value/result of the completed operation can be returned by the <see cref="P:TwinCAT.TypeSystem.ResultSymbols`1.Symbols"/> property.</remarks>
            <seealso cref="T:TwinCAT.Ads.ResultValue`1" />
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultDynamicSymbols.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.TypeSystem.IDynamicSymbolsCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ResultDynamicSymbols"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="symbols">The result symbols.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultDynamicSymbols.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ResultDynamicSymbols.CreateSuccess(TwinCAT.TypeSystem.IDynamicSymbolsCollection)">
            <summary>
            Creates a success result.
            </summary>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeCategory">
            <summary>
            Category of a DataType / Instance
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.None">
            <summary>
            Uninitialized / NotProcessed (0)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Primitive">
            <summary>
            Simple / Base Data Type (1)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Alias">
            <summary>
            Alias data type (2)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Enum">
            <summary>
            Enumeration data type (3)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Array">
            <summary>
            Array data type (4)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Struct">
            <summary>
            Structure data type (5)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock">
            <summary>
            Function block (POU) (6)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Program">
            <summary>
            Program (POU) (7)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Function">
            <summary>
            Function (POU) (8)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.SubRange">
            <summary>
            SubRange (9)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.String">
            <summary>
            Fixed length string (10)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Bitset">
            <summary>
            Bitset (12)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer">
            <summary>
            Pointer type (13)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Union">
            <summary>
            Union type (14)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Reference">
            <summary>
            Reference type (15)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeCategory.Interface">
            <summary>
            The interface
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.DimensionCollection">
            <summary>
            Collection class for Array Dimensions
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.Empty">
            <summary>
            Gets an empty <see cref="T:TwinCAT.TypeSystem.DimensionCollection"/>
            </summary>
            <value>The Empty collectio.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DimensionCollection"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DimensionCollection"/> class.
            </summary>
            <param name="dimLengths">The dim lengths.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDimension})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DimensionCollection"/> class.
            </summary>
            <param name="coll">The coll.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of an 1-Dimensional representing <see cref="T:TwinCAT.TypeSystem.DimensionCollection"/> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.DimensionCollection._list">
            <summary>
            Internal Dimension list.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.AsReadOnly">
            <summary>
            Returns a read only version of this <see cref="T:TwinCAT.TypeSystem.DimensionCollection" />.
            </summary>
            <returns>ReadOnlyDimensionCollection.</returns>
            <value>As read only.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.IndexOf(TwinCAT.TypeSystem.IDimension)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.Insert(System.Int32,TwinCAT.TypeSystem.IDimension)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>IDimension.</returns>
            <exception cref="T:System.NotImplementedException">
            </exception>
            <remarks>Index = 0 is the lowest dimesion.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.Add(TwinCAT.TypeSystem.IDimension)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.Contains(TwinCAT.TypeSystem.IDimension)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.CopyTo(TwinCAT.TypeSystem.IDimension[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.Remove(TwinCAT.TypeSystem.IDimension)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.ElementCount">
            <summary>
            Gets the Number of elements in all Dimensions
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.LowerBounds">
            <summary>
            Gets the lower bounds.
            </summary>
            <value>The lower bounds.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.UpperBounds">
            <summary>
            Gets the upper bounds.
            </summary>
            <value>The upper bounds.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.DimensionCollection.IsNonZeroBased">
            <summary>
            Gets a value indicating whether this instance is non zero index based.
            </summary>
            <value><c>true</c> if this instance is non zero indexed based; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DimensionCollection.GetDimensionLengths">
            <summary>
            Gets an array the specifies the Lengths of each Array Dimension
            </summary>
            <returns>System.Int32[].</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDimensionCollectionExtension">
            <summary>
            Class IDimensionCollectionExtension.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDimensionCollectionExtension.AddDimension(TwinCAT.TypeSystem.IDimensionCollection,TwinCAT.TypeSystem.IDimension)">
            <summary>
            Adds a Dimension (FluentInterface)
            </summary>
            <param name="coll">The coll.</param>
            <param name="dim">The dim.</param>
            <returns>DimensionCollection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.ReadOnlyDimensionCollection">
            <summary>
            ReadOnly version of the <see cref="T:TwinCAT.TypeSystem.DimensionCollection"/>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyDimensionCollection.#ctor(TwinCAT.TypeSystem.DimensionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ReadOnlyDimensionCollection"/> class (for internal use only)
            </summary>
            <param name="coll">The coll.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyDimensionCollection.Empty">
            <summary>
            Returns an empty <see cref="T:TwinCAT.TypeSystem.ReadOnlyDimensionCollection"/>
            </summary>
            <returns>ReadOnlyDimensionCollection.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyDimensionCollection.ElementCount">
            <summary>
            Gets the Number of elements in all Dimensions
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyDimensionCollection.LowerBounds">
            <summary>
            Gets the lower bounds.
            </summary>
            <value>The lower bounds.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyDimensionCollection.UpperBounds">
            <summary>
            Gets the upper bounds.
            </summary>
            <value>The upper bounds.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ReadOnlyDimensionCollection.IsNonZeroBased">
            <summary>
            Gets a value indicating whether this instance is non zero index based.
            </summary>
            <value><c>true</c> if this instance is non zero indexed based; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ReadOnlyDimensionCollection.GetDimensionLengths">
            <summary>
            Gets an array the specifies the Lengths of each Array Dimension
            </summary>
            <returns>System.Int32[].</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IValue">
            <summary>
            Symbol Value Interface
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValue.Symbol">
            <summary>
            Gets the symbol bound to this <see cref="T:TwinCAT.TypeSystem.IValue"/>.
            </summary>
            <value>
            The symbol.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValue.DataType">
            <summary>
            Gets the data type bound to this <see cref="T:TwinCAT.TypeSystem.IValue"/>
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValue.UpdateMode">
            <summary>
            Gets the update mode (not implemented yet)
            </summary>
            <value>
            The update mode.
            </value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValue.Write">
            <summary>
            Writes the value (via ADS)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValue.WriteAsync(System.Threading.CancellationToken)">
            <summary>
            Writes the value (via ADS)
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;WriteValueResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValue.Read">
            <summary>
            Reads the value (via ADS)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValue.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the value (via ADS)
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ReadValueResult&gt;.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValue.CachedRaw">
            <summary>
            Gets the cached Raw internal Data.
            </summary>
            <value>The raw cached data.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValue.TimeStamp">
            <summary>
            Gets the Time stamp of the last successful read of the Value (local user time, UTC)
            </summary>
            <value>The read time stamp.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValue.Age">
            <summary>
            Gets the age of the value (last successful read of the value)
            </summary>
            <value>The age.</value>
            <seealso cref="P:TwinCAT.TypeSystem.IValue.TimeStamp"/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValue.IsPrimitive">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IValue"/> is a primitive value.
            </summary>
            <value><c>true</c> if this instance is primitive; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValue.ResolveValue(System.Boolean)">
            <summary>
            Resolves the Value object to its primitive value.
            </summary>
            <param name="resolveEnumToPrimitive">if set to <c>true</c> <see cref="T:TwinCAT.TypeSystem.IEnumValue"/>s are resolved to their primitives also.</param>
            <returns>System.Object.</returns>
            <remarks>If the value is not primitive, this method returns the <see cref="T:TwinCAT.TypeSystem.IValue" /> itself.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValue.TryResolveValue(System.Boolean,System.Object@)">
            <summary>
            Tries to resolves the Value object to its primitive value.
            </summary>
            <param name="resolveEnumToPrimitive">if set to <c>true</c> <see cref="T:TwinCAT.TypeSystem.IEnumValue"/>s are resolved to their primitives also.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if value can be resolved, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStructValue">
            <summary>
            Interface IStructValue
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IValue" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IStructValue.TrySetMemberValue(System.String,System.Object)">
            <summary>
            Tries to Set a Member/Property Value
            </summary>
            <param name="name">The name of the member</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if succeeded, otherwise <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IStructValue.TryGetMemberValue(System.String,System.Object@)">
            <summary>
            Tries to get a property/Member value.
            </summary>
            <param name="name">The name of the member</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if succeeded, otherwise <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IArrayValue">
            <summary>
            Interface IArrayValue
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IValue" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IArrayValue.TrySetIndexValue(System.Object[],System.Object)">
            <summary>
            Tries to set the indexed value on Arrays
            </summary>
            <param name="indexes">The indexes.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IArrayValue.TryGetArrayElementValues(System.Collections.Generic.IEnumerable{System.Object}@)">
            <summary>
            Returns Array Element values.
            </summary>
            <param name="elementValues">The element values.</param>
            <returns><c>true</c> if the element values are returned, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IArrayValue.TryGetIndexValue(System.Int32[],System.Object@)">
            <summary>
            Tries to get the specified Array Element
            </summary>
            <param name="indices">The indices.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the indexed value is returned, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDynamicValue">
            <summary>
            Interface IDynamicValue
            Implements the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />
            Implements the <see cref="T:TwinCAT.TypeSystem.IValue" />
            Implements the <see cref="T:TwinCAT.TypeSystem.IStructValue" />
            Implements the <see cref="T:TwinCAT.TypeSystem.IArrayValue" />
            </summary>
            <seealso cref="T:System.Dynamic.IDynamicMetaObjectProvider" />
            <seealso cref="T:TwinCAT.TypeSystem.IValue" />
            <seealso cref="T:TwinCAT.TypeSystem.IStructValue" />
            <seealso cref="T:TwinCAT.TypeSystem.IArrayValue" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IDynamicValue.ValueFactory">
            <summary>
            Gets the value factory.
            </summary>
            <value>The value factory.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDynamicValue.ParentValue">
            <summary>
            Gets the parent value.
            </summary>
            <value>The parent value.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.ISymbolProvider`3">
            <summary>
            Symbol provider interface
            </summary>
            <typeparam name="TNamespace">Namespace type</typeparam>
            <typeparam name="TDataType">DataType type</typeparam>
            <typeparam name="TSymbol">Symbol type</typeparam>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.Namespaces">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly collection of the namespaces.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.RootNamespaceName">
            <summary>
            Gets the name of the root namespace
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.RootNamespace">
            <summary>
            Gets the root (main) namespace of the Symbol provider.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.Symbols">
            <summary>
            Gets the (root) symbols of the Symbol provider.
            </summary>
            <value>Read only collection of the Symbols</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.ISymbolProvider`3.DataTypes">
            <summary>
            Gets all data types from all Namespaces
            </summary>
            <value>The data types.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.IInternalSymbolProvider`2">
            <summary>
            Symbol provider interface
            </summary>
            <typeparam name="TType">DataType type</typeparam>
            <typeparam name="TSymbol">Symbol type</typeparam>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.IInternalSymbolProvider`2.NamespacesInternal">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly collection of the namespaces.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.IInternalSymbolProvider`2.SymbolsInternal">
            <summary>
            Gets the (root) symbols of the Symbol provider.
            </summary>
            <value>Read only collection of the Symbols</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.IInternalSymbolProvider`2.DataTypesInternal">
            <summary>
            Gets all data types from all Namespaces
            </summary>
            <value>The data types.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.INamespaceInternal`1">
            <summary>
            Interface INamespaceInternal
            </summary>
            <typeparam name="TType">DataType</typeparam>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.INamespaceInternal`1.RegisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers the the specified DataType 
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the type is registered, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.Generic.INamespaceInternal`1.RegisterTypes(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Registers the specified types.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.INamespaceInternal`1.DataTypesInternal">
            <summary>
            Access to the Internal DataTypes collection (read/write)
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.Generic.INamespace`1">
            <summary>
            Namespace interface
            </summary>
            <typeparam name="TType">DataType class used within this Namespace interface</typeparam>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.INamespace`1.Name">
            <summary>
            Gets the name/ identifier of the Namespace
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Generic.INamespace`1.DataTypes">
            <summary>
            Data types organized by the <see cref="T:TwinCAT.TypeSystem.Generic.INamespace`1"/>
            </summary>
            <value>The data types.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolFactoryServices">
            <summary>
            Interface ISymbolFactoryServices
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactoryServices.Binder">
            <summary>
            Gets the type binder.
            </summary>
            <value>The type binder.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactoryServices.SymbolFactory">
            <summary>
            Gets the symbol factory.
            </summary>
            <value>The symbol factory.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolFactoryValueServices">
            <summary>
            Interface ISymbolFactoryValueServices
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactoryValueServices.Session">
            <summary>
            Gets the session object.
            </summary>
            <value>The session or NULL if not available</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactoryValueServices.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolInfo">
            <summary>
            Interface ISymbolInfo
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolInfo.Name">
            <summary>
            Gets the Symbol Path
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolInfo.TypeName">
            <summary>
            Gets the data type Name
            </summary>
            <value>The type of the data.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolFactory">
            <summary>
            Symbol Factory Interface
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateInstance(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the Symbol with the specified resolver
            </summary>
            <param name="entry">Symbol Entry.</param>
            <param name="parent">The parent.</param>
            <returns>Symbol instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateInstanceAsync(TwinCAT.TypeSystem.ISymbolInfo,TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Creates the Symbol with the specified resolver
            </summary>
            <param name="entry">Symbol Entry.</param>
            <param name="parent">The parent.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultValue&lt;ISymbol&gt;&gt;.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateArrayElement(TwinCAT.TypeSystem.IArrayType,System.Int32[],TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates a single Array Element
            </summary>
            <param name="arrayType">Resolved Array type.</param>
            <param name="currentIndex">Array Index of the Element</param>
            <param name="parent">Array Instance</param>
            <returns>Array element</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateArrayElementInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IArrayType)">
            <summary>
            Creates all Element Instances of the specified array parent symbol.
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="arrayType">Resolved array type.</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateFieldInstance(TwinCAT.TypeSystem.IField,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates a singgle Instance member on a struct parent
            </summary>
            <param name="field">Field</param>
            <param name="parent">Parent Struct/Alias/Union</param>
            <returns>Instance member</returns>
            <remarks>Because the Alias type can act like a struct, the parent can be an IAliasInstance also.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateFieldInstances(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IDataType)">
            <summary>
            Creates the Member Instances collection for the specified parent instance
            </summary>
            <param name="parentInstance">The parent instance.</param>
            <param name="parentType">Parent Type (Struct/Alias/Union).</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateReferenceInstance(TwinCAT.TypeSystem.IPointerType,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the dereferenced Pointer instance
            </summary>
            <param name="type">Reference/Pointer type.</param>
            <param name="parent">Parent Instance of the reference</param>
            <returns>Reference/Pointer instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.CreateVirtualStruct(System.String,System.String,TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the virtual structure.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <param name="instancePath">The instance path.</param>
            <param name="parent">The parent.</param>
            <returns>Virtual struct instance</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactory.FactoryServices">
            <summary>
            Gets the factory services.
            </summary>
            <value>The factory services.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.Initialize(TwinCAT.TypeSystem.ISymbolFactoryServices)">
            <summary>
            Initializes the the <see cref="T:TwinCAT.TypeSystem.ISymbolFactory"/>.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactory.InvalidCharacters">
            <summary>
            Gets the invalid characters that are not allowed to appear within the Instance Name
            </summary>
            <value>The forbidden characters.</value>
            <seealso cref="M:TwinCAT.TypeSystem.ISymbolFactory.SetInvalidCharacters(System.Char[])"/>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolFactory.HasInvalidCharacters"/> 
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactory.SetInvalidCharacters(System.Char[])">
            <summary>
            Sets the invalid characters.
            </summary>
            <param name="invalidChars">The character.</param>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolFactory.InvalidCharacters"/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactory.HasInvalidCharacters">
            <summary>
            Gets a value indicating whether <see cref="T:TwinCAT.TypeSystem.ISymbol"/>s have invalid characters
            </summary>
            <value><c>true</c> if this instance has invalid characters; otherwise, <c>false</c>.</value>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolFactory.InvalidCharacters"/>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolFactoryOversampled">
            <summary>
            Extended Interface for <see cref="T:TwinCAT.TypeSystem.ISymbolFactory"/> (Support for Oversampling terminals)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolFactoryOversampled.CreateOversamplingElement(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the oversampling array Element.
            </summary>
            <param name="parent">Parent Array Instance.</param>
            <returns>ISymbol.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.UInt32Ptr">
            <summary>
            Represents an 32-Bit Pointer (Process independant)
            </summary>
            <seealso cref="T:System.UIntPtr"/>
        </member>
        <member name="F:TwinCAT.TypeSystem.UInt32Ptr._value">
            <summary>
            Internal Value (32-Bit)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> struct.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> struct.
            </summary>
            <param name="pVoid">The Pointer address in 32-Bit.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.UInt32Ptr.Zero">
            <summary>
            Zero/Null Pointer
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.UInt32Ptr.Size">
            <summary>
            Gets the size (4-Byte)
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.Add(TwinCAT.TypeSystem.UInt32Ptr,System.Int32)">
            <summary>
            Adds an offset to the pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>UInt32Ptr.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Addition(TwinCAT.TypeSystem.UInt32Ptr,System.Int32)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Equality(TwinCAT.TypeSystem.UInt32Ptr,TwinCAT.TypeSystem.UInt32Ptr)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(System.UInt64)~TwinCAT.TypeSystem.UInt32Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(System.UInt32)~TwinCAT.TypeSystem.UInt32Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(TwinCAT.TypeSystem.UInt64Ptr)~TwinCAT.TypeSystem.UInt32Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/> to <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(TwinCAT.TypeSystem.UInt32Ptr)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(TwinCAT.TypeSystem.UInt32Ptr)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(TwinCAT.TypeSystem.UInt32Ptr)~System.Void*">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> to <see cref="T:System.Void"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(System.Void*)~TwinCAT.TypeSystem.UInt32Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Void"/> to <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Explicit(TwinCAT.TypeSystem.UInt32Ptr)~System.UIntPtr">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> to <see cref="T:System.UIntPtr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Inequality(TwinCAT.TypeSystem.UInt32Ptr,TwinCAT.TypeSystem.UInt32Ptr)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.op_Subtraction(TwinCAT.TypeSystem.UInt32Ptr,System.Int32)">
            <summary>
            Implements the - operator.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.Subtract(TwinCAT.TypeSystem.UInt32Ptr,System.Int32)">
            <summary>
            Subtracts an offset from the specified pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>UInt32Ptr.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.ToPointer">
            <summary>
            Converts this 32-Pointer object to an unsafe void* pointer
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.ToUInt32">
            <summary>
            Converts the 32-Bit Pointer to uint
            </summary>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt32Ptr.ToUInt64">
            <summary>
            Converts the 32-Bit Pointer to ulong.
            </summary>
            <returns>System.UInt64.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.UInt64Ptr">
            <summary>
            Represents an 64-Bit Pointer (Process independant)
            </summary>
            <seealso cref="T:System.UIntPtr"/>
        </member>
        <member name="F:TwinCAT.TypeSystem.UInt64Ptr._value">
            <summary>
            The Internal Value (64-Bit)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.UInt64Ptr.Zero">
            <summary>
            The zero/null pointer
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.UInt64Ptr.Size">
            <summary>
            Gets the size (8-Byte)
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.Add(TwinCAT.TypeSystem.UInt64Ptr,System.Int32)">
            <summary>
            Adds an offset to the pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>UInt64Ptr.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Addition(TwinCAT.TypeSystem.UInt64Ptr,System.Int32)">
            <summary>
            Implements the + operator.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Equality(TwinCAT.TypeSystem.UInt64Ptr,TwinCAT.TypeSystem.UInt64Ptr)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(TwinCAT.TypeSystem.UInt64Ptr)~System.UIntPtr">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/> to <see cref="T:System.UIntPtr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(System.UInt64)~TwinCAT.TypeSystem.UInt64Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(System.UInt32)~TwinCAT.TypeSystem.UInt64Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(TwinCAT.TypeSystem.UInt32Ptr)~TwinCAT.TypeSystem.UInt64Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt32Ptr"/> to <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(TwinCAT.TypeSystem.UInt64Ptr)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(TwinCAT.TypeSystem.UInt64Ptr)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(TwinCAT.TypeSystem.UInt64Ptr)~System.Void*">
            <summary>
            Performs an explicit conversion from <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/> to <see cref="T:System.Void"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Explicit(System.Void*)~TwinCAT.TypeSystem.UInt64Ptr">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Void"/> to <see cref="T:TwinCAT.TypeSystem.UInt64Ptr"/>.
            </summary>
            <param name="pVoid">The void pointer value..</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Inequality(TwinCAT.TypeSystem.UInt64Ptr,TwinCAT.TypeSystem.UInt64Ptr)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.op_Subtraction(TwinCAT.TypeSystem.UInt64Ptr,System.Int32)">
            <summary>
            Subtracts an offset from the pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.Subtract(TwinCAT.TypeSystem.UInt64Ptr,System.Int32)">
            <summary>
            Substracts an offset from the pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="offset">The offset.</param>
            <returns>UInt64Ptr.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.ToPointer">
            <summary>
            Converts this 64-Pointer object to an unsafe void* pointer
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.ToUInt32">
            <summary>
            Converts this 64-Bit Pointer to an UInt32 value
            </summary>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.UInt64Ptr.ToUInt64">
            <summary>
            Converts this 64-Bit Pointer to an UInt64 value
            </summary>
            <returns>System.UInt64.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcInvokeParser">
            <summary>
            Class RpcInvokeParser.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeParser.TryGetRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,System.String,TwinCAT.TypeSystem.IRpcMethod@)">
            <summary>
            Tries to get the RPC Method
            </summary>
            <param name="rpcType">Type of the RPC.</param>
            <param name="methodName">Name of the method.</param>
            <param name="method">The method.</param>
            <returns><c>true</c> if the RpcMethod is found, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">methodName</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeParser.GetInstancePath(System.String,System.String@,System.String@)">
            <summary>
            Gets the instance path.
            </summary>
            <param name="fullPath">The full path.</param>
            <param name="instancePath">The instance path.</param>
            <param name="methodName">Name of the method.</param>
            <exception cref="T:System.ArgumentNullException">fullPath</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeParser.GetRpcMethodAccessPath(System.String,System.String,System.Boolean@)">
            <summary>
            Gets the RPC method access path (InstancePath + MethodName)
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">Name of the method.</param>
            <param name="isProp">if set to <c>true</c> [is property].</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException">symbolPath</exception>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcInvokeParser.GetRpcMethodAccessPath(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Boolean@)">
            <summary>
            Gets the RPC method access path (InstancePath + MethodName)
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The method.</param>
            <param name="isProp">if set to <c>true</c> [is property].</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">instance</exception>
            <exception cref="T:System.ArgumentNullException">method</exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolLoader">
            <summary>
            Symbol Loader interface
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolLoader.BuildInTypes">
            <summary>
            Gets the build in types.
            </summary>
            <value>The build in types.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolLoader.Settings">
            <summary>
            Gets or sets the access Method
            </summary>
            <value>The access method.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDynamicSymbolsCollection">
            <summary>
            Interface IDynamicSymbolsContainer
            Implements the <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />
            </summary>
            <seealso cref="T:System.Dynamic.IDynamicMetaObjectProvider" />
        </member>
        <member name="T:TwinCAT.TypeSystem.IDynamicSymbolLoader">
            <summary>
            Dynamic symbol loader interface
            </summary>
            <remarks>Dynamic symbols are late bound symbols who are created and will expand during runtime. These symbols can represent complex user defined type instances like
            PLC Structures and Arrays created during PLC access and assure type safe to their fields and elements.
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDynamicSymbolLoader.SymbolsDynamic">
            <summary>
            Gets the symbols (late bound as dynamic objects)
            </summary>
            <value>The dynamic symbols.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDynamicSymbolLoader.GetDynamicSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the dynamic symbols asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultDynamicSymbols&gt;.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDataType">
            <summary>
            Base interface for objects representing data types
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Id">
            <summary>
            Gets the ID of the DataType
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Category">
            <summary>
            Gets the Data Type category
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Name">
            <summary>
            Gets the name of the Data Type (without namespace)
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Namespace">
            <summary>
            Gets the namespace string within the <see cref="T:TwinCAT.TypeSystem.IDataType"/> exists.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.FullName">
            <summary>
            Gets the full name of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> (Namespace + Name)
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsPrimitive">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is primitive
            </summary>
            <value>
                <c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsContainer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a container type
            </summary>
            <remarks>Container Types are all types that contain SubElements like
            <list type="bullet">
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Array"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Union"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Struct"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Function"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Program"/></description></item>
            </list>
            and the <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Alias"/> and <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Reference"/> types, if they have a container type as base type.
            </remarks>
            <value>
                <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsPointer">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a pointer type
            </summary>
            <remarks>Pointer types can be dereferenced with the '^' operator.</remarks>
            <value>
                <c>true</c> if this instance is pointer type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.IsReference">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a reference type
            </summary>
            <remarks>Reference types can be dereferenced.</remarks>
            <value>
                <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Attributes">
            <summary>
            Gets the attributes of the <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataType.Comment">
            <summary>
            Gets the comment behind the variable declaration.
            </summary>
            <value>Comment behind the variable declaration.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeResolveStrategy">
            <summary>
            Enum DataTypeResolveStrategy
            </summary>
            <remarks>Used for resolving Reference and Alias datatypes to its base datatypes.</remarks>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeResolveStrategy.Alias">
            <summary>
            Resolve only chains of Alias(es)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeResolveStrategy.AliasReference">
            <summary>
            Resolve chains of Alias(es) and Reference(es)
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IResolvableType">
            <summary>
            Alias/Reference Resolve interface
            </summary>
            <remarks>
            This inteface enables to Resolve a <see cref="T:TwinCAT.TypeSystem.IDataType"/> to its underlying Alias / Reference Base Type.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IResolvableType.ResolveType(TwinCAT.TypeSystem.DataTypeResolveStrategy)">
            <summary>
            Resolves this this DataType to its Base Type (Alias/Reference)
            </summary>
            <returns>Resolved IDataType.</returns>
            <remarks>This interface is used for automatic Resolution of Alias/Reference within symbols.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.IResolvableInstanceType">
            <summary>
            Alias/Reference Resolve interface
            </summary>
            <remarks>
            This inteface enables to Resolve a <see cref="T:TwinCAT.TypeSystem.IDataType"/> to its underlying Alias / Reference Base Type.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IResolvableInstanceType.ResolveType(TwinCAT.TypeSystem.DataTypeResolveStrategy)">
            <summary>
            Resolves this this DataType to its Base Type (Alias/Reference)
            </summary>
            <returns>Resolved IDataType.</returns>
            <remarks>This interface is used for automatic Resolution of Alias/Reference within symbols.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.IBindable">
            <summary>
            Bindable interface for TypeBinder supported Types/Symbols
            </summary>
            <remarks>The Bindable interface is used in conjunction with the <see cref="T:TwinCAT.TypeSystem.IBinder"/> interface, to resolve
            type names to <see cref="T:TwinCAT.TypeSystem.IDataType"/> objects, referencing SubTypes and store them in cached collections.
            </remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBindable.IsBound">
            <summary>
            Gets a value indicating whether this instance is bound.
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBindable.Bind(TwinCAT.TypeSystem.IBinder)">
            <summary>
            Binds this bindable object via the specified <see cref="T:TwinCAT.TypeSystem.IBinder"/>
            </summary>
            <param name="binder">The binder.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.IBindable2">
            <summary>
            Bindable interface for TypeBinder supported Types/Symbols
            </summary>
            <remarks>This interface is used to enable OnDemand Binding recursivly for all subtypes of a symbol.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBindable2.IsBindingResolved(System.Boolean)">
            <summary>
            Gets a value indicating whether this instance is resolved.
            </summary>
            <param name="recurse">if set to <c>true</c> the check will search through the subtypes also.</param>
            <returns><c>true</c> if [is type resolved] [the specified recurse]; otherwise, <c>false</c>.</returns>
            <value><c>true</c> if this instance is resolved; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBindable2.ResolveWithBinderAsync(System.Boolean,TwinCAT.TypeSystem.IBinder,System.Threading.CancellationToken)">
            <summary>
            Tries to resolve the Bindable Symbol/DataType asynchronously.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The DataType/Symbol binder to be used.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBindable2.ResolveWithBinder(System.Boolean,TwinCAT.TypeSystem.IBinder)">
            <summary>
            Resolves the Bindable Symbol/DataType synchronously.
            </summary>
            <param name="recurse">if set to <c>true</c> [recurse].</param>
            <param name="binder">The binder.</param>
            <returns><c>true</c> if the bindable can be resolved, <c>false</c> otherwise.</returns>
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeEventArgs">
            <summary>
            Class DataTypeEventArgs.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:TwinCAT.TypeSystem.DataTypeEventArgs.DataTypes">
            <summary>
            The data types
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeEventArgs.#ctor(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeEventArgs"/> class.
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeNameEventArgs">
            <summary>
            Class DataTypeNameEventArgs.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:TwinCAT.TypeSystem.DataTypeNameEventArgs._typeName">
            <summary>
            The type name
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeNameEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.DataTypeNameEventArgs"/> class.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="P:TwinCAT.TypeSystem.DataTypeNameEventArgs.TypeName">
            <summary>
            The type name
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IManagedMappableType">
            <summary>
            Interface IManagedMappableType specifies types that are directly mappable to .NET Types (Managed Types)
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IManagedMappableType.ManagedType">
            <summary>
            Gets the corresponding .NET Type if attached.
            </summary>
            <value>Dot net type or null.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IUnionType">
            <summary>
            Interface for an union data type.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IDataType" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IUnionType.Fields">
            <summary>
            Gets a readonly collection of the <see cref="T:TwinCAT.TypeSystem.IField">Members</see> of the <see cref="T:TwinCAT.TypeSystem.IUnionType"/>.
            </summary>
            <value>The members as readonly collection.</value>
            <remarks>If the <see cref="T:TwinCAT.TypeSystem.IStructType"/> is derived, only the extended members are returned. To get
            all supported members down the inheritance chain, use the <see cref="P:TwinCAT.TypeSystem.IInterfaceType.AllMembers"/> property.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.IInterfaceType">
            <summary>
            Interface representing an Interface Data type.
            Implements the <see cref="T:TwinCAT.TypeSystem.IDataType" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IDataType" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceType.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC methods (Struct types only)
            </summary>
            <value><c>true</c> if this instance has RPC methods; otherwise, <c>false</c>.</value>
            <remarks>The DataType (Structure) must be marked with the PlcAttribute 'TcRpcEnable' to enable RpcMethods, otherwise
            RpcMethods are not passed through to the ADS symbolic information.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceType.InterfaceImplementationNames">
            <summary>
            Gets the names of the interfaces, this <see cref="T:TwinCAT.TypeSystem.IDataType"/> implements.
            </summary>
            <value>The interface implementations.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceType.InterfaceImplementations">
            <summary>
            Gets the resolved interface types, this <see cref="T:TwinCAT.TypeSystem.IDataType"/> implements.
            </summary>
            <value>The implements.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceType.Members">
            <summary>
            Gets a readonly collection of the <see cref="T:TwinCAT.TypeSystem.IMember">Members</see> of the <see cref="T:TwinCAT.TypeSystem.IInterfaceType"/>.
            </summary>
            <value>The members as readonly collection.</value>
            <remarks>If the <see cref="T:TwinCAT.TypeSystem.IStructType"/> is derived, only the extended members are returned. To get
            all supported members down the inheritance chain, use the <see cref="P:TwinCAT.TypeSystem.IInterfaceType.AllMembers"/> property.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceType.BaseTypeName">
            <summary>
            Gets the the Name of the Base class (if derived)
            </summary>
            <value>Empty if not derived.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceType.BaseType">
            <summary>
            Gets the structs Base Type (Null if not derived).
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceType.AllMembers">
            <summary>
            Gets all members (down the derivation hierarchy)
            </summary>
            <value>All members.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStructType">
            <summary>
            Interface representing Struct data types
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcCallableType">
            <summary>
            Interface representing an RPC callable <see cref="T:TwinCAT.TypeSystem.IStructType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcCallableType.RpcMethods">
            <summary>
            Gets the Method descriptions for the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType"/>
            </summary>
            <remarks>The DataType (Structure) must be marked with the PlcAttribute 'TcRpcEnable' to enable RpcMethods, otherwise
            RpcMethods are not passed through to the ADS symbolic information.
            </remarks>
            <value>The RPC methods.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcStructType">
            <summary>
            Interface IRpcStructType
            Implements the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            Implements the <see cref="T:TwinCAT.TypeSystem.IStructType" />
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            <seealso cref="T:TwinCAT.TypeSystem.IStructType" />
        </member>
        <member name="T:TwinCAT.TypeSystem.IReferenceType">
            <summary>
            Interface representing a reference type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceType.ReferencedType">
            <summary>
            Gets the the referenced type.
            </summary>
            <value>The data type of the referenced type or <b>null</b> if not resolved.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceType.ReferencedTypeName">
            <summary>
            Gets the name of the referenced type.
            </summary>
            <value>The name of the referenced type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceType.ResolvedCategory">
            <summary>
            Gets the Category of the (completely) resolved Symbol.
            </summary>
            <value>The resolved category.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceType.ResolvedByteSize">
            <summary>
            Get the ByteSize of the (completely) resolved Symbol
            </summary>
            <value>The size of the resolved byte.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceType.ResolvedType">
            <summary>
            Gets the (completely) resolved type 
            </summary>
            <value>The type of the resolved symbol</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IPointerType">
            <summary>
            Interface representing a pointer type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IPointerType.ReferencedType">
            <summary>
            Gets the the referenced type.
            </summary>
            <value>The datatype of the reference or <b>null</b> if not resolved.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IPointerType.ReferenceTypeName">
            <summary>
            Gets the name of the referenced datatype
            </summary>
            <value>The name of the reference dattype.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISubRangeType">
            <summary>
            Interface representing a SubRange type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISubRangeType.BaseType">
            <summary>
            Gets the the base type of the <see cref="T:TwinCAT.TypeSystem.ISubRangeType"/>
            </summary>
            <value>The base datat type  or <b>null</b> if not resolved.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISubRangeType.BaseTypeName">
            <summary>
            Gets the name of the base type.
            </summary>
            <value>The name of the base type.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISubRangeType`1">
            <summary>
            Interface representing a SubRange type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISubRangeType`1.LowerBound">
            <summary>
            Gets the lower bound.
            </summary>
            <value>The lower bound.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISubRangeType`1.UpperBound">
            <summary>
            Gets the upper bound.
            </summary>
            <value>The upper bound.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IEnumType">
            <summary>
            Common Enum type interface
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType.GetValues">
            <summary>
            Gets the values of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1"/>
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType.GetNames">
            <summary>
            Gets the filed names of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1"/>
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType.Parse(System.String)">
            <summary>
            Parses a value name of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1"/> and returns the value (as base type)
            </summary>
            <param name="name">The value name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType.TryParse(System.String,System.IConvertible@)">
            <summary>
            Parses the value from value  name.
            </summary>
            <param name="name">The value name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if value name was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType.TryParse(System.String,TwinCAT.TypeSystem.IEnumValue@)">
            <summary>
            Parses the value from value  name.
            </summary>
            <param name="name">The value name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if value name was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType.Contains(System.String)">
            <summary>
            Determines whether the enum values contains the specified name
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if contains the value, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType.ToString(System.IConvertible)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the specified value.
            </summary>
            <param name="val">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this value.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumType.EnumValues">
            <summary>
            Enumeration specification (if enum)
            </summary>
            <value>The enum specification.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IEnumType`1">
            <summary>
            Interface representing an enum type
            </summary>
            <typeparam name="T">Base type of the Enum</typeparam>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType`1.GetValues">
            <summary>
            Gets the values of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1"/>
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType`1.GetNames">
            <summary>
            Gets the filed names of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1"/>
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType`1.Parse(System.String)">
            <summary>
            Parses a name of the <see cref="T:TwinCAT.TypeSystem.IEnumType`1"/> and returns the value (as base type)
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType`1.TryParse(System.String,`0@)">
            <summary>
            Parses the value from value  name.
            </summary>
            <param name="name">The value name.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if value name was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType`1.Contains(System.String)">
            <summary>
            Determines whether the enum values contains the specified name
            </summary>
            <param name="name">The name.</param>
            <returns><c>true</c> if contains the value, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumType`1.ToString(`0)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the specified value.
            </summary>
            <param name="val">The value.</param>
            <returns>A <see cref="T:System.String" /> that represents this value.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumType`1.EnumValues">
            <summary>
            Enumeration specification (if enum)
            </summary>
            <value>The enum specification.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IAliasType">
            <summary>
            Interface representing an Alias Type
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IAliasType.BaseTypeName">
            <summary>
            Gets the BaseType name
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IAliasType.BaseType">
            <summary>
            Gets the Base Type
            </summary>
            <value>The alias base type or <b>null</b> if not resolved.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.PrimitiveTypeFlags">
            <summary>
            Enum PrimitiveTypeFlags
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.System">
            <summary>
            System Type like Byte / Word / DWORD
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.Unsigned">
            <summary>
            Primitive Type is Unsigned
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.Bool">
            <summary>
            Boolean Value (maps to true and false)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.Float">
            <summary>
            Floating Point
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.Date">
            <summary>
            Type represents a Date
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.Time">
            <summary>
            Type represents a Time
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.Numeric">
            <summary>
            Numeric value
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.Bitset">
            <summary>
            Bitset
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.MaskNumericUnsigned">
            <summary>
            Numeric / Unsigned Mask
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.MaskDateTime">
            <summary>
            Date / Time Mask
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.PrimitiveTypeFlags.MaskSpecialType">
            <summary>
            Special type Mask
            </summary>
            <remarks>UXINT, XINT, XWORD</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.IPrimitiveType">
            <summary>
            Interface IPrimitiveType
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IDataType" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IPrimitiveType.PrimitiveFlags">
            <summary>
            Indicates types of different PrimitiveTypes with flags.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDimension">
            <summary>
            Interface representing a single <see cref="T:TwinCAT.TypeSystem.IDimension">Dimension</see> of an <see cref="T:TwinCAT.TypeSystem.IArrayType">ArrayType</see>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimension.ElementCount">
            <summary>
            Gets the number of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension"/>.
            </summary>
            <value>The element count.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDimension.LowerBound">
            <summary>
            Gets the lower bound of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension"/>.
            </summary>
            <value>The lower bound.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IArrayType">
            <summary>
            Interface representing an array <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayType.Dimensions">
            <summary>
            Gets the dimensions as read only collection.
            </summary>
            <value>The dimensions.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayType.ElementType">
            <summary>
            Gets the type of the contained elements.
            </summary>
            <value>The type of the element or <b>null</b> if not resolved.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayType.ElementTypeName">
            <summary>
            Gets the name of the element datatype.
            </summary>
            <value>The name of the element datatype.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayType.IsJagged">
            <summary>
            Gets a value indicating whether this instance is jagged.
            </summary>
            <value><c>true</c> if this instance is jagged; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayType.JaggedLevel">
            <summary>
            Gets the jagged level (Non-Jagged Arrays have level 1)
            </summary>
            <value>The jagged level.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IOversamplingSupport">
            <summary>
            Interface IOversamplingSupport
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IOversamplingSupport.IsOversampled">
            <summary>
            Gets a value indicating whether this type is an oversampled Array type.
            </summary>
            <value><c>true</c> if this instance is oversampled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStringType">
            <summary>
            Interface representing a string <see cref="T:TwinCAT.TypeSystem.IDataType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStringType.Length">
            <summary>
            Gets the number of characters within the string (when fixed length).
            </summary>
            <value>The length if fixed length, otherwise -1</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStringType.Encoding">
            <summary>
            Gets the encoding of the String (Encoding.Default (STRING) or Encoding.UNICODE (WSTRING))
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IStringType.IsFixedLength">
            <summary>
            Gets a value indicating whether the string is of fixed length.
            </summary>
            <value><c>true</c> if this instance is fixed length; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IField">
            <summary>
            Specifies a single field/member of a <see cref="T:TwinCAT.TypeSystem.IStructType">Struct DataType</see>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IField.ParentType">
            <summary>
            Gets the Parent Struct/Union of this <see cref="T:TwinCAT.TypeSystem.IField"/>.
            </summary>
            <value>The type of the parent.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IMember">
            <summary>
            Specifies a single field/member of a <see cref="T:TwinCAT.TypeSystem.IStructType">Struct DataType</see>.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IMember.Offset">
            <summary>
            Gets the offset of the <see cref="T:TwinCAT.TypeSystem.IMember"/> within the parent <see cref="T:TwinCAT.TypeSystem.IStructType"/> in bits or bytes dependent on IsBitType.
            </summary>
            <value>The bit offset.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IMember.ByteOffset">
            <summary>
            Gets the byte offset.
            </summary>
            <value>The byte offset.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IMember.BitOffset">
            <summary>
            Gets the bit offset.
            </summary>
            <value>The bit offset.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IAlignmentSet">
            <summary>
            Interface used for setting the Members alignment
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IAlignmentSet.SetOffset(System.Int32)">
            <summary>
            Sets the offset of the Member
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.IInstance">
            <summary>
            Interface specifying instance objects.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.DataType">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.IDataType"/> of the <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The type of the data.</value>
            <remarks>The DataType can be unresolved in rare circumstances and therefore could have value <b>null</b>.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.TypeName">
            <summary>
            Gets the name of the <see cref="T:TwinCAT.TypeSystem.IDataType">DataType</see> that is used for this <see cref="T:TwinCAT.TypeSystem.IInstance"/>.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.InstanceName">
            <summary>
            Gets the name of the instance (without periods (.)
            </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.InstancePath">
            <summary>
            Gets the relative / absolute access path to the instance (with periods (.))
            </summary>
            <value>The instance path.</value>
            <remarks>If this path is relative or absolute depends on the context. <see cref="T:TwinCAT.TypeSystem.IMember"/> are using relative paths, <see cref="T:TwinCAT.TypeSystem.ISymbol"/>s are using absolute ones.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.IsStatic">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IInstance"/> is static.
            </summary>
            <value>
              <c>true</c> if this instance is static; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.IsReference">
            <summary>
            Indicates that the <see cref="T:TwinCAT.TypeSystem.IInstance"/> represents a Reference type (REFERENCE TO)
            </summary>
            <value><c>true</c> if is ReferenceTo, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.IsPointer">
            <summary>
            Indicates that the <see cref="T:TwinCAT.TypeSystem.IInstance"/> represents a Pointer type (Pointer TO)
            </summary>
            <value><c>true</c> if is ReferenceTo, otherwise <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.Comment">
            <summary>
            Gets the comment of the <see cref="T:TwinCAT.TypeSystem.IInstance"/>
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInstance.IsProperty">
            <summary>
            Gets a value indicating whether <see cref="T:TwinCAT.TypeSystem.IInstance"/> is a property.
            </summary>
            <value><c>true</c> if this instance is a property; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IAttributedInstance">
            <summary>
            Interface IAttributedInstance
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IInstance" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IAttributedInstance.Attributes">
            <summary>
            Gets the Type Attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IAttributedInstance.ValueEncoding">
            <summary>
            Gets the value encoding.
            </summary>
            <value>The value encoding.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IInstanceInternal">
            <summary>
            Interface IInstanceInternal
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IInstanceInternal.SetInstanceName(System.String)">
            <summary>
            Sets a new instance name.
            </summary>
            <param name="instanceName">Name of the instance.</param>
            <remarks>This can only used as long the Instance is not added to a collection using the type binder classes.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.IProcessImageAddress">
            <summary>
            Interface describing a Process Image Address
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IProcessImageAddress.IndexGroup">
            <summary>
            Gets the index group of the Symbol
            </summary>
            <value>The index group.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IProcessImageAddress.IndexOffset">
            <summary>
            Gets the index offset of the Symbol
            </summary>
            <value>The index offset.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IProcessImageAddress.IsVirtual">
            <summary>
            Gets a value indicating whether this instance is virtual.
            </summary>
            <value><c>true</c> if this instance is virtual; otherwise, <c>false</c>.</value>
            <remarks>Virtual symbols are are only organizational elements within the Symbols Hierarchy and cannot
            be accessed seperately by IndexGroup/IndexOffset, Value Read/Writes, notifications or handles.
            </remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.IBitSize">
            <summary>
            Interface IBitSize
            </summary>
            <remarks>Specifies the Bitness of the the object and the bit resp. byte sizes.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBitSize.Size">
            <summary>
            Gets the size of the object in bytes or Bits dependant on <see cref="P:TwinCAT.TypeSystem.IBitSize.IsBitType"/>
            </summary>
            <value>The size of the bit.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBitSize.IsBitType">
            <summary>
            Gets a value indicating whether this instance is not basing on a full DataType but instead of some sort of bit mapping
            </summary>
            <value>
            <c>true</c> if this instance is bit mapping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBitSize.BitSize">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bits.
            </summary>
            <value>The size of <see cref="T:TwinCAT.TypeSystem.IDataType"/> in bits.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBitSize.ByteSize">
            <summary>
            Gets the (aligned) size of of the Type/Instance in Bytes
            </summary>
            <value>The size of the byte.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBitSize.IsByteAligned">
            <summary>
            Indicates that the Size of the Object is Byte aligned (BitSize % 8 == 0)
            </summary>
            <value><c>true</c> if this instance is byte aligned; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbol">
            <summary>
            Interface specifying Symbols (
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.Category">
            <summary>
            Gets the Symbol/Datatype Category
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.Parent">
            <summary>
            Gets the parent Symbol
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.SubSymbols">
            <summary>
            Gets the SubSymbols of the <see cref="T:TwinCAT.TypeSystem.ISymbol"/>
            </summary>
            <remarks>Used for Array, Struct, Pointer and Reference instances. Otherwise empty
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.IsContainerType">
            <summary>
            Gets a value indicating whether this Symbol is acontainer type.
            </summary>
            <value>
                <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.IsPrimitiveType">
            <summary>
            Gets a value indicating whether this instance is a primitive type.
            </summary>
            <value>
                <c>true</c> if this instance is primitive type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.IsPersistent">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.ISymbol"/> is persistent.
            </summary>
            <value>
            <c>true</c> if this instance is persistent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.IsReadOnly">
            <summary>
            Indicates that this instance is read only.
            </summary>
            <remarks>
            Actually, this Flag is restricted to TcCOM-Objects readonly Parameters. Within the PLC this is used for the ApplicationName and
            ProjectName of PLC instances.
            Write-Access on these Modules will create an <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceAccessDenied"/> error.
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbol.IsRecursive">
            <summary>
            Gets a value indicating whether this instance is recursive.
            </summary>
            <value><c>true</c> if this instance is recursive; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IHierarchicalSymbol">
            <summary>
            Bindable Symbol interface (for internal use only)
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IHierarchicalSymbol.SetParent(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Sets the parent of the Symbol
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolFactoryServicesProvider">
            <summary>
            Symbol Value Access interface
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolFactoryServicesProvider.FactoryServices">
            <summary>
            Gets the factory services.
            </summary>
            <value>The factory services.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IValueAccessorProvider">
            <summary>
            Interface IValueAccessorProvider
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueAccessorProvider.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IValueRawSymbol">
            <summary>
            Interface IValueRawSymbol
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IHierarchicalSymbol" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueRawSymbol.HasValue">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> has a value.
            </summary>
            <value><c>true</c> if this instance has value; otherwise, <c>false</c>.</value>
            <remarks>A VirtualSymbol does not support values, but in terms of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> definition, is a <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/></remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueRawSymbol.ReadRawValue">
            <summary>
            Reads the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueRawSymbol.ReadRawValueAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write) asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueRawSymbol.ReadRawValue(System.Int32)">
            <summary>
            Reads the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <returns>System.Byte[].</returns>
            <value>The raw value.</value>
            <remarks>A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueRawSymbol.WriteRawValue(System.Byte[])">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueRawSymbol.WriteRawValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueRawSymbol.WriteRawValue(System.Byte[],System.Int32)">
            <summary>
            Writes the raw value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> (Ads Read / Write)
            </summary>
            <param name="rawValue">The value as byte array.</param>
            <param name="timeout">The timeout.</param>
            <value>The value.</value>
            <remarks>A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="E:TwinCAT.TypeSystem.IValueRawSymbol.RawValueChanged">
            <summary>
            Occurs when the RawValue of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> has changed.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueRawSymbol.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.SymbolAccessRights">
            <summary>
            Enum specifying Access Rights to symbols
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolAccessRights.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolAccessRights.Read">
            <summary>
            Read-Access
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolAccessRights.Write">
            <summary>
            Write-Access
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolAccessRights.MethodInvoke">
            <summary>
            Right to Invoke Methods / RPC Invoke
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolAccessRights.ReadWrite">
            <summary>
            Read / Write Access
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.SymbolAccessRights.All">
            <summary>
            Full Access
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IValueSymbol">
            <summary>
            Interface for a <see cref="T:TwinCAT.TypeSystem.ISymbol" /> that supports values.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IValueRawSymbol" />
        </member>
        <member name="E:TwinCAT.TypeSystem.IValueSymbol.ValueChanged">
            <summary>
            Occurs when the (Primitive) value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/> has changed.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueSymbol.NotificationSettings">
            <summary>
            Gets or sets the notification settings.
            </summary>
            <value>The notification settings.</value>
            <remarks>The <see cref="P:TwinCAT.TypeSystem.IValueSymbol.NotificationSettings"/> will be inherited from <see cref="P:TwinCAT.TypeSystem.ISymbol.Parent"/> if the setting is not overwritten.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.ReadValue">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <returns>System.Object.</returns>
            <value>The value.</value>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.ReadValue(System.Int32)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <returns>System.Object.</returns>
            <value>The value.</value>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.
            A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.ReadValueAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.ReadValueAsResult">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> as result object.
            </summary>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.TryReadValue(System.Int32,System.Object@)">
            <summary>
            Reads the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="timeout">The timeout in ms.</param>
            <param name="value">The symbol value.</param>
            <returns>The error code.</returns>
            <remarks>Calling on primitive types, a call of this method will return the primitive value.
            On complex types (structures and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: the raw byte Array will be returned,
            in dynamic mode: A Value will be created on the fly.
            A negative timeout indicates that the Default Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.WriteValue(System.Object)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>
            </summary>
            <param name="value">The value.</param>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader"/> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.
            </remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.WriteValueAsResult(System.Object)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" /> and returns an result object.
            </summary>
            <param name="value">The value.</param>
            <returns>A tasks that represents the asynchronous 'ReadValue' operation. The read result is stored in the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> return value and contains
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.WriteValue(System.Object,System.Int32)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout in ms.</param>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also. A negative timeout indicates that the Default
            Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueSymbol.TryWriteValue(System.Object,System.Int32)">
            <summary>
            Writes the Value of the <see cref="T:TwinCAT.TypeSystem.IValueSymbol" />
            </summary>
            <param name="value">The value.</param>
            <param name="timeout">The timeout in ms.</param>
            <returns>The error code.</returns>
            <remarks>Calling on primitive types, a call of this method will directly write this Value.
            On complex types (structs and arrays) it depends on the <see cref="T:TwinCAT.TypeSystem.ISymbolLoader" /> settings what will happen.
            In non dynamic modes: Only byte Arrays (of correct size) can be written)
            in dynamic mode: A Value that represents the value will be accepted also. A negative timeout indicates that the Default
            Timeout for the communication will be used.
            0 means timeout is switched off.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueSymbol.AccessRights">
            <summary>
            Gets the access rights.
            </summary>
            <value>The access rights.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IValueSymbol.Connection">
            <summary>
            Gets the connection that produces values for this <see cref="T:TwinCAT.TypeSystem.IValueSymbol"/>
            </summary>
            <value>The connection object.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IValueAnySymbol">
            <summary>
            Interface IValueAnySymbol
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbol" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueAnySymbol">Value</see> into a new created instance of the managed type
            </summary>
            <param name="managedType">The tp.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)"/>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue``1">
            <summary>
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueAnySymbol">Value</see> into a new created instance of the managed type
            </summary>
            </summary>
            <typeparam name="T">Type of the Value to be read.</typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValueAsync(System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the (AnyType) value asynchronously.
            </summary>
            <param name="managedType">Managed type of the value to read.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task object that is representing the asynchronous 'ReadAnyValue' operation. The result will be returned in a <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/>, which
            contains the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValueAsync``1(System.Threading.CancellationToken)">
            <summary>
            Reads the (AnyType) value asynchronously.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task object that is representing the asynchronous 'ReadAnyValue' operation. The result will be returned in a <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/>, which
            contains the <see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/> and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type,System.Int32)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into a new created instance of the managed type
            </summary>
            <param name="managedType">The tp.</param>
            <param name="timeout">The timeout in ms.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue``1(System.Int32)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into a new created instance of the managed type
            </summary>
            <typeparam name="T">The values type</typeparam>
            <param name="timeout">The timeout in ms.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into the specified managed value.
            </summary>
            <param name="managedObject">The managed object.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)"/>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@,System.Int32)">
            <summary>
            Reads the value of this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see> into the specified managed value.
            </summary>
            <param name="managedObject">The managed object.</param>
            <param name="timeout">The timeout.</param>
            <returns>Read value (System.Object).</returns>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)" />
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object)">
            <summary>
            Writes the value represented by the managed value to this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see>
            </summary>
            <param name="managedValue">The managed value.</param>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)"/>.
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)"/>.
        </member>
        <member name="M:TwinCAT.TypeSystem.IValueAnySymbol.WriteAnyValue(System.Object,System.Int32)">
            <summary>
            Writes the value represented by the managed value to this <see cref="T:TwinCAT.TypeSystem.IValueSymbol">Value</see>
            </summary>
            <param name="managedValue">The managed value.</param>
            <param name="timeout">The timeout in ms.</param>
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.ReadAnyValue(System.Type)" />.
            <seealso cref="M:TwinCAT.TypeSystem.IValueAnySymbol.UpdateAnyValue(System.Object@)" />.
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolValueChangeNotify">
            <summary>
            Interface ISymbolValueChangeNotify
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolValueChangeNotify.OnRawValueChanged(TwinCAT.TypeSystem.RawValueChangedEventArgs)">
            <summary>
            Called when the RawValue of the symbol has been changed.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolValueChangeNotify.OnValueChanged(TwinCAT.TypeSystem.ValueChangedEventArgs)">
            <summary>
            Called when the Value of the symbol has been changed.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.ValueChangedBaseEventArgs">
            <summary>
            Event args for the <see cref="E:TwinCAT.TypeSystem.IValueRawSymbol.RawValueChanged"/> event.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ValueChangedBaseEventArgs.#ctor(TwinCAT.TypeSystem.ISymbol,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RawValueChangedEventArgs" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="timeStamp">The TwinCAT Real time time stamp (UTC)</param>
        </member>
        <member name="F:TwinCAT.TypeSystem.ValueChangedBaseEventArgs._symbol">
            <summary>
            Symbol that caused the event.
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.ValueChangedBaseEventArgs._dateTime">
            <summary>
            Notification timestamp
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ValueChangedBaseEventArgs.Symbol">
            <summary>
            Gets the symbol.
            </summary>
            <value>The symbol.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ValueChangedBaseEventArgs.DateTime">
            <summary>
            Notification timestamp
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.RawValueChangedEventArgs">
            <summary>
            Event args for the <see cref="E:TwinCAT.TypeSystem.IValueRawSymbol.RawValueChanged"/> event.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RawValueChangedEventArgs.#ctor(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.RawValueChangedEventArgs" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="timeStamp">The timestamp of the ValueChange.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.RawValueChangedEventArgs._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.RawValueChangedEventArgs.Value">
            <summary>
            New Value (byte[])
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ValueChangedEventArgs">
            <summary>
            Event args for the <see cref="E:TwinCAT.TypeSystem.IValueSymbol.ValueChanged"/> event.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.ValueChangedEventArgs.#ctor(TwinCAT.TypeSystem.ISymbol,System.Object,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.ValueChangedEventArgs" /> class.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="timeStamp">The timestamp of the changed value.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.ValueChangedEventArgs._value">
            <summary>
            The new received Value
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ValueChangedEventArgs.Value">
            <summary>
            The new received Value
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IArrayInstance">
            <summary>
            Interface representing an array instance
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayInstance.Elements">
            <summary>
            Gets the contained Array Elements as read only collection.
            </summary>
            <value>The elements.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayInstance.Item(System.Int32[])">
            <summary>
            Gets the <see cref="T:TwinCAT.TypeSystem.ISymbol"/> with the specified indices.
            </summary>
            <value>
            The <see cref="T:TwinCAT.TypeSystem.ISymbol"/>.
            </value>
            <param name="indices">The indices.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayInstance.Dimensions">
            <summary>
            Gets the dimensions as read only collection.
            </summary>
            <value>The dimensions.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IArrayInstance.ElementType">
            <summary>
            Gets the type of the contained elements.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IOversamplingArrayInstance">
            <summary>
            Interface IOversamplingArrayInstance
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IArrayInstance" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IOversamplingArrayInstance.OversamplingElement">
            <summary>
            Gets the oversampling element.
            </summary>
            <value>The oversampling element.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IUnionInstance">
            <summary>
            Interface for an Instance of the <see cref="T:TwinCAT.TypeSystem.IUnionType"/>.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbol" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IUnionInstance.FieldInstances">
            <summary>
            Gets the field instances of the Union
            </summary>
            <value>The field instances.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IInterfaceInstance">
            <summary>
            Interface representing an instance of a <see cref="T:TwinCAT.TypeSystem.IInterfaceType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceInstance.MemberInstances">
            <summary>
            Gets the member instances of the <see cref="T:TwinCAT.TypeSystem.IInterfaceInstance">Struct Instance</see>.
            </summary>
            <value>The member instances.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInterfaceInstance.HasRpcMethods">
            <summary>
            Gets a value indicating whether this instance has RPC methods
            </summary>
            <value><c>true</c> if this instance has RPC methods; otherwise, <c>false</c>.</value>
            <remarks>If the struct instance supports RPC Methods, then the instance class is also
            supporting <see cref="T:TwinCAT.TypeSystem.IRpcStructInstance"/>:
            </remarks>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcStructInstance"/>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcMethod"/>
            <seealso cref="T:TwinCAT.TypeSystem.IRpcMethodParameter"/>
        </member>
        <member name="T:TwinCAT.TypeSystem.IStructInstance">
            <summary>
            Interface representing an instance of a <see cref="T:TwinCAT.TypeSystem.IStructType"/>
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcStructInstance">
            <summary>
            Interface IRpcStructInstance
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IStructInstance" />
            <seealso cref="T:TwinCAT.TypeSystem.IRpcCallableInstance" />
        </member>
        <member name="T:TwinCAT.TypeSystem.IStringInstance">
            <summary>
            Interface IStringInstance
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbol" />
            <seealso cref="T:TwinCAT.TypeSystem.IStringType" />
        </member>
        <member name="P:TwinCAT.TypeSystem.IStringInstance.IsFixedLength">
            <summary>
            Gets a value indicating whether this instance is a string of static length
            </summary>
            <value><c>true</c> if this instance is of static length; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IVirtualStructInstance">
            <summary>
            Virtual Struct instance interface.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IStructInstance" />
            <remarks>Virtual struct instance are used to create a TreeView from the flat list of symbols.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.IVirtualStructInstance.AddMember(TwinCAT.TypeSystem.ISymbol,TwinCAT.TypeSystem.IVirtualStructInstance)">
            <summary>
            Adds the member.
            </summary>
            <param name="memberInstance">The member instance.</param>
            <param name="parent">The parent struct instance. Usually the this pointer.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.IReferenceInstance">
            <summary>
            Interface representing an instance of an <see cref="T:TwinCAT.TypeSystem.IReferenceType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceInstance.ResolvedCategory">
            <summary>
            Gets the Category of the (completely) resolved Symbol.
            </summary>
            <value>The resolved category.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceInstance.ResolvedByteSize">
            <summary>
            Get the ByteSize of the (completely) resolved Symbol
            </summary>
            <value>The byte size of the resolved type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceInstance.ReferencedType">
            <summary>
            Gets the referenced type 
            </summary>
            <value>The type of the referenced type</value>
            <remarks>This is no complete resolvement, only the next level. The referenced type can be a reference again.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IReferenceInstance.ResolvedType">
            <summary>
            Gets the (completely) resolved type 
            </summary>
            <value>The type of the resolved symbol</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IIndexedAccess">
            <summary>
            Interface IIndexAccess
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IReferenceInstance" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IIndexedAccess.TryGetElement(System.Int32[],TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with specified indices (only first level on jagged arrays)
            </summary>
            <param name="indices">The indices.</param>
            <param name="symbol">The found Array element symbol (out-parameter).</param>
            <returns>true if found, false if the indices specifiers is out-of-range.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IIndexedAccess.TryGetElement(System.Collections.Generic.IList{System.Int32[]},TwinCAT.TypeSystem.ISymbol@)">
            <summary>
            Tries to get the array element with the specified indices (jagged array support).
            </summary>
            <param name="jaggedIndices">The jagged indices list.</param>
            <param name="symbol">The symbol.</param>
            <returns>true if found, false if the jagged indices specifiers is out-of-range.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IReferenceInstanceAccess">
            <summary>
            Interface IReferenceInstanceAccess
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.IReferenceInstance" />
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.IPointerInstance">
            <summary>
            Interface representing an instance of an <see cref="T:TwinCAT.TypeSystem.IPointerType"/>
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IPointerInstance.Reference">
            <summary>
            Gets the resolved reference of Pointer / Reference (or NULL if PVOID)
            </summary>
            <value>
            The reference symbol or NULL if PVOID Pointer.
            </value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IAliasInstance">
            <summary>
            Interface representing an instance of an <see cref="T:TwinCAT.TypeSystem.IAliasType"/>.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbol" />
        </member>
        <member name="T:TwinCAT.TypeSystem.IInternalSymbolProvider">
            <summary>
            Gets access to the Internal Symbol/DataType/Namespace collections.
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbolProvider" />
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInternalSymbolProvider.NamespacesInternal">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly collection of the namespaces.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInternalSymbolProvider.SymbolsInternal">
            <summary>
            Gets the (root) symbols of the Symbol provider.
            </summary>
            <value>Read only collection of the Symbols</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IInternalSymbolProvider.DataTypesInternal">
            <summary>
            Gets all data types from all Namespaces
            </summary>
            <value>The data types.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.INamespaceContainer`1">
            <summary>
            Namespace collection interface
            </summary>
            <typeparam name="T">Datatype</typeparam>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.INamespaceContainer`1.ContainsNamespace(System.String)">
            <summary>
            Determines whether the specified namespace name is contained by the collection.
            </summary>
            <param name="namespaceName">Name of the namespace.</param>
            <returns><c>true</c> if the specified namespace is contained; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.INamespaceContainer`1.TryGetNamespace(System.String,TwinCAT.TypeSystem.Generic.INamespace{`0}@)">
            <summary>
            Try to get the specified namespace.
            </summary>
            <param name="namespaceName">Name of the namespace.</param>
            <param name="nspace">The found namespace (out-parameter)</param>
            <returns><c>true</c> if the namespace is returned, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.INamespaceContainer`1.Item(System.String)">
            <summary>
            Gets the specified data type.
            </summary>
            <param name="namespaceName">Name of the namespace.</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.INamespaceContainer`1.TryGetType(System.String,`0@)">
            <summary>
            Tries to get the specified type
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="dataType">Data Type (out-parameter).</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.INamespaceContainer`1.TryGetTypeByFullName(System.String,`0@)">
            <summary>
            Tries to get the data type by full name.
            </summary>
            <param name="fullName">Data types full name (including namespace)</param>
            <param name="dataType">Data Type (out-parameter)</param>
            <returns>true if found, false if not contained.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.INamespaceContainer`1.AllTypes">
            <summary>
            Gets all types included in all namespaces.
            </summary>
            <value>All types.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.INamespaceCollection`1">
            <summary>
            Interface INamespaceCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TwinCAT.TypeSystem.INamespaceCollection">
            <summary>
            Interface INamespaceCollection
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolProvider">
            <summary>
            Symbol Provider interface.
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolProvider.Namespaces">
            <summary>
            Get the Namespaces of DataTypes for this Symbol provider
            </summary>
            <value>ReadOnly collection of the namespaces.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolProvider.RootNamespaceName">
            <summary>
            Gets the name of the root namespace
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolProvider.RootNamespace">
            <summary>
            Gets the root (main) namespace of the Symbol provider.
            </summary>
            <value>The root namespace.</value>
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.ITypeAttribute">
            <summary>
            Interface for ADS attributes
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.ITypeAttribute.Name">
            <summary>
            Name of the Attribute
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ITypeAttribute.Value">
            <summary>
            Gets the value of the attribute
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDataTypeResolver">
            <summary>
            Interface for resolving data type names --> <see cref="T:TwinCAT.TypeSystem.IDataType"/> objects.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeResolver.TryResolveType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Tries to resolve the type (parses it if not found and adds it to the resolver if necessary).
            </summary>
            <param name="typeName">The name.</param>
            <param name="type">The type.</param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDataTypeResolver.ResolveTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Resolves the type asynchronously
            </summary>
            <param name="name">The type name.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultValue&lt;IDataType&gt;&gt;.</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDataTypeResolver.PlatformPointerSize">
            <summary>
            Gets the size of the platform pointer (in Bytes)
            </summary>
            <value>The size of the platform pointer.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IBinder">
            <summary>
            The ITypeBinder interface binds DataTypes and Symbols to its namespace.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.RegisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Registers the specified type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.RegisterTypes(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Registers the specified types.
            </summary>
            <param name="types">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.UnregisterType(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Unregisters/Unbinds a type
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.UnregisterAll">
            <summary>
            Unregisters all types.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.Bind(TwinCAT.TypeSystem.IHierarchicalSymbol)">
            <summary>
            Binds the specified symbol to the Resolver (Registering and linking Parents).
            </summary>
            <param name="subSymbol">The child symbol.</param>
            <returns>the parent Symbol where the subSymbol was bound to (if bound)</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBinder.Provider">
            <summary>
            Gets the Symbol provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.OnTypeGenerated(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Handler function called when a type / types are generated
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.OnTypesGenerated(System.Collections.Generic.IEnumerable{TwinCAT.TypeSystem.IDataType})">
            <summary>
            Handler function called when a type / types are generated
            </summary>
            <param name="types">The types.</param>
        </member>
        <member name="M:TwinCAT.TypeSystem.IBinder.OnTypeResolveError(System.String)">
            <summary>
            Handler function when a type name cannot be resolved.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="T:TwinCAT.TypeSystem.ITypeBinderEvents">
            <summary>
            Interface ITypeBinderEvents
            </summary>
            <remarks>Used for providing events about TypeGeneration and TypeResolution Errors.</remarks>
            <exclude/>
        </member>
        <member name="E:TwinCAT.TypeSystem.ITypeBinderEvents.TypesGenerated">
            <summary>
            Occurs when new types are generated
            </summary>
        </member>
        <member name="E:TwinCAT.TypeSystem.ITypeBinderEvents.TypeResolveError">
            <summary>
            Occurs when a typename cannot be resolved.
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolBinderEvents">
            <summary>
            Interface ITypeBinderEvents
            </summary>
            <remarks>Used for providing events about TypeGeneration and TypeResolution Errors.</remarks>
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.TypeAttribute">
            <summary>
            ADS Attribute
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.TypeAttribute._name">
            <summary>
            Attribute Name
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.TypeAttribute._value">
            <summary>
            Attribute Value
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.TypeAttribute" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttribute.#ctor(TwinCAT.TypeSystem.ITypeAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.TypeAttribute"/> class.
            </summary>
            <param name="att">The att.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.TypeAttribute.Name">
            <summary>
            Name of the Attribute
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.TypeAttribute.Value">
            <summary>
            Gets the value of the attribute
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttribute.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttribute.op_Equality(TwinCAT.TypeSystem.TypeAttribute,TwinCAT.TypeSystem.TypeAttribute)">
            <summary>
            Operator==
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttribute.op_Inequality(TwinCAT.TypeSystem.TypeAttribute,TwinCAT.TypeSystem.TypeAttribute)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.TypeAttribute.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.MethodParamFlags">
            <summary>
            Flag set specifying the MethodParameter context
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.MethodParamFlags.In">
            <summary>
            Input Parameter (ADSMETHODPARAFLAG_IN)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.MethodParamFlags.Out">
            <summary>
            Output Parameter (ADSMETHODPARAFLAG_OUT)
            </summary>
        </member>
        <member name="F:TwinCAT.TypeSystem.MethodParamFlags.ByReference">
            <summary>
            By reference Parameter (ADSMETHODPARAFLAG_BYREFERENCE)
            </summary>
            <remarks>This flag indicates parameters that are transfered as REFERENCE or POINTER Types.</remarks>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcMethodParameter">
            <summary>
            Interface IRpcMethodParameter
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.Size">
            <summary>
            Gets the size of the <see cref="T:TwinCAT.TypeSystem.IRpcMethodParameter"/>
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.Name">
            <summary>
            Gets the Parameter Name
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.TypeName">
            <summary>
            Gets the Data type of the Parameter
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.ParameterFlags">
            <summary>
            Gets the parameter flags.
            </summary>
            <value>The parameter flags.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.LengthIsParameterIndex">
            <summary>
            Gets the index of the LengthIs parameter (within the MethodParameter List)
            </summary>
            <value>The index of the length is parameter.</value>
            <remarks>This field references to the Parameter that defines the length for this
            generic one. Equally to the marshalling attributes of COM (sizeof, length)
            this enables to transport parameter of type (PVOID)
            </remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.HasLengthIsParameter">
            <summary>
            Gets a value indicating whether this instance has a related LengthIs Parameter.
            </summary>
            <value><c>true</c> if this instance has a LengthIs parameter; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.IsInput">
            <summary>
            Gets a value indicating whether this instance is input.
            </summary>
            <value><c>true</c> if this instance is input; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethodParameter.IsOutput">
            <summary>
            Gets a value indicating whether this instance is output.
            </summary>
            <value><c>true</c> if this instance is output; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcMethodParameterExtension">
            <summary>
            Extension class for <see cref="T:TwinCAT.TypeSystem.IRpcMethodParameter"/>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterExtension.IsInput(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Determines whether the specified parameter is input.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the specified parameter is input; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterExtension.IsOutput(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Determines whether the specified parameter is output.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the specified parameter is output; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodParameterExtension.IsReference(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Determines whether the specified parameter is output.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the specified parameter is output; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcMethod">
            <summary>
            Interface describes an RPC Method
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.Name">
            <summary>
            Gets the name of the method
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.Parameters">
            <summary>
            Gets all parameters (In, Out and ref parameters) of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod">.</see>
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.InParameters">
            <summary>
            Gets the In-Parameters of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod"/>
            </summary>
            <value>The In- and Ref-Parameters</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.OutParameters">
            <summary>
            Gets the Out-Parameters of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod"/>
            </summary>
            <value>The out- and ref-parameters.</value>
            <remarks>The Out-Parameters doesn't include the Ref Parameters. These are included in the <see cref="P:TwinCAT.TypeSystem.IRpcMethod.InParameters"/> set.</remarks>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.ReturnType">
            <summary>
            Gets the return type.
            </summary>
            <value>Return type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.ReturnTypeSize">
            <summary>
            Gets the size of the return type in bytes.
            </summary>
            <value>The size of the return type.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.Comment">
            <summary>
            Gets the Method comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.IsVoid">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IRpcMethod"/> has no return parameter
            </summary>
            <value><c>true</c> if this instance is void; otherwise, <c>false</c>.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcMethod.Declaration">
            <summary>
            Gets the declaration string of the <see cref="T:TwinCAT.TypeSystem.IRpcMethod"/>
            </summary>
            <value>The declaration.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.RpcMethodExtension">
            <summary>
            Class RpcMethodExtension.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.RpcMethodExtension.IsVoid(TwinCAT.TypeSystem.IRpcMethod)">
            <summary>
            Determines whether the specified method has no Return Parameter.
            </summary>
            <param name="method">The method.</param>
            <returns><c>true</c> if the specified method is void; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcMethodParameterCollection">
            <summary>
            Interface IRpcMethodParameterCollection
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcMethodParameterCollection.GetLengthIsParameter(TwinCAT.TypeSystem.IRpcMethodParameter)">
            <summary>
            Gets the corresponding LengthIs parameter.
            </summary>
            <param name="parameter">The value parameter</param>
            <returns>The LengthIs Parameter</returns>
            <seealso cref="P:TwinCAT.TypeSystem.IRpcMethodParameter.LengthIsParameterIndex"/>
            <seealso cref="P:TwinCAT.TypeSystem.IRpcMethodParameter.HasLengthIsParameter"/>
        </member>
        <member name="T:TwinCAT.TypeSystem.IBinderProvider">
            <summary>
            Interface IBinderProvider
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.IBinderProvider.Binder">
            <summary>
            Gets the binder.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IDynamicSymbol">
            <summary>
            Interface IDynamicSymbol
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IDynamicSymbol.NormalizedName">
            <summary>
            Gets the normalized instance name (fixed name for dynamic property access)
            </summary>
            <value>The normalized instance name (can be the same like <see cref="P:TwinCAT.TypeSystem.IInstance.InstanceName"/>
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IInstance.InstanceName"/>
            <seealso cref="P:TwinCAT.TypeSystem.ISymbolFactory.InvalidCharacters"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.IDynamicSymbol.Unwrap">
            <summary>
            Unwraps the DynamicSymbol to its static version.
            </summary>
            <returns>IValueSymbol.</returns>
            <value>The unwrapped symbol.</value>
            <exclude/>
        </member>
        <member name="T:TwinCAT.TypeSystem.IRpcCallableInstance">
            <summary>
            Interface for an RPC callable PLC Method (Remote procedure call)
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IRpcCallableInstance.RpcMethods">
            <summary>
            Gets the Method descriptions for the <see cref="T:TwinCAT.TypeSystem.IRpcCallableType" />
            </summary>
            <value>The methods.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcCallableInstance.InvokeRpcMethod(System.String,System.Object[])">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>This method only supports primitive data types as <paramref name="inParameters"/>. Any available outparameters will be ignored.
            Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcCallableInstance.InvokeRpcMethod(System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <param name="outParameters">The output parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcCallableInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <returns>The result value of the call (ErrorCode). 0 means Succeeded.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcCallableInstance.TryInvokeRpcMethod(System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The result value of the call (ErrorCode). 0 means Succeeded.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.TypeSystem.IRpcCallableInstance.InvokeRpcMethodAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="cancel">The cancellation token</param>
            <returns>
            A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> results contains the return value (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue"/>)
            together with the output parameters. The succeeded communication is indicated by the ErrorCode property (<see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/>) after the communication.
            </returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="T:TwinCAT.TypeSystem.Dimension">
            <summary>
            Represents a single dimension of an <see cref="T:TwinCAT.TypeSystem.IArrayType"/>
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.Dimension.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.TypeSystem.Dimension"/> class.
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="elementCount">The element count.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.TypeSystem.Dimension._lowerBound">
            <summary>
            Lower Bound
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Dimension.LowerBound">
            <summary>
            Gets the lower bound of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension" />.
            </summary>
            <value>
            The lower bound.
            </value>
        </member>
        <member name="P:TwinCAT.TypeSystem.Dimension.UpperBound">
            <summary>
            Gets the upper bound of elements within this <see cref="T:TwinCAT.TypeSystem.Dimension"/>
            </summary>
            <value>The upper bound.</value>
        </member>
        <member name="F:TwinCAT.TypeSystem.Dimension._elementCount">
            <summary>
            Element count
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.Dimension.ElementCount">
            <summary>
            Gets the number of elements within that <see cref="T:TwinCAT.TypeSystem.IDimension" />.
            </summary>
            <value>
            The element count.
            </value>
        </member>
        <member name="T:TwinCAT.TypeSystem.ISymbolInternal">
            <summary>
            Interface ISymbolInternal
            </summary>
            <remarks>Internal interface for Symbols</remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolInternal.SubSymbolsInternal">
            <summary>
            Creates and Gets the Internal SubSymbol sCollection
            </summary>
            <value>The sub symbols internal.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.ISymbolInternal.SubSymbolsCreated">
            <summary>
            Gets a value indicating whether the internal SubSymbols collection is created.
            </summary>
            <value><c>true</c> if [sub symbols created]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.TypeSystem.ISymbolInternal.CreateSubSymbols(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Creates the SubSymbol collection.
            </summary>
            <param name="parent">The parent.</param>
            <returns>SymbolCollection.</returns>
        </member>
        <member name="T:TwinCAT.TypeSystem.IEnumValue">
            <summary>
            Generic interface for EnumValues
            </summary>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumValue.Name">
            <summary>
            Gets the name of the Enumeration Value (value as string)
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumValue.Primitive">
            <summary>
            Gets the (Primitive, BaseType) Value of the enumeration as object
            </summary>
            <value>The object value.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumValue.RawValue">
            <summary>
            Gets the raw value of the enumeration (as byte array)
            </summary>
            <value>The raw value.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumValue.ManagedBaseType">
            <summary>
            Gets the enumeration base type (sint,byte,short,ushort,int,uint,Int64,UInt64 supported)
            </summary>
            <value>The type of the base.</value>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumValue.Size">
            <summary>
            Gets the size of the Enum value (in bytes)
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:TwinCAT.TypeSystem.IEnumValueCollection`2">
            <summary>
            Interface for collections of <see cref="T:TwinCAT.TypeSystem.IEnumValue">IEnumValues</see>.
            Implements the <see cref="T:System.Collections.Generic.ICollection`1" />
            </summary>
            <typeparam name="TEnumValue"></typeparam>
            <typeparam name="TValue"></typeparam>
            <seealso cref="T:System.Collections.Generic.ICollection`1" />
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumValueCollection`2.Contains(System.String)">
            <summary>
            Determines whether [contains] [the specified name].
            </summary>
            <param name="value">Value</param>
            <returns><c>true</c> if [contains] [the specified name]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumValueCollection`2.TryParse(System.String,`1@)">
            <summary>
            Tries to parse the string value of the Enum.
            </summary>
            <param name="strValue">The Value in string representation.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the string was parsed successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumValueCollection`2.TryParse(System.String,`0@)">
            <summary>
            Tries to parse the string value of the Enum.
            </summary>
            <param name="strValue">The Value in string representation.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the string could be parsed successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumValueCollection`2.Parse(System.String)">
            <summary>
            Parses the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>T.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumValueCollection`2.GetNames">
            <summary>
            Gets the Value Names.
            </summary>
            <returns>System.String[].</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.IEnumValueCollection`2.GetValues">
            <summary>
            Gets the values.
            </summary>
            <returns>T[].</returns>
        </member>
        <member name="P:TwinCAT.TypeSystem.IEnumValueCollection`2.Item(System.String)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="name">The name of the value</param>
            <returns>EnumValue&lt;T&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TwinCAT.TypeSystem.IEnumValueCollection">
            <summary>
            Interface IEnumValueCollection
            </summary>
        </member>
        <member name="T:TwinCAT.TypeSystem.DataTypeExtension">
            <summary>
            Extends the <see cref="T:TwinCAT.TypeSystem.IDataType"/> interface with more sophisticated functions.
            </summary>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.Resolve(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Resolves the specified data type for <see cref="F:TwinCAT.TypeSystem.DataTypeResolveStrategy.AliasReference"/>
            </summary>
            <param name="dataType">Type of the data.</param>
            <returns>IDataType.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.Resolve(TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.DataTypeResolveStrategy)">
            <summary>
            Resolves the specified strategy.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="strategy">The strategy.</param>
            <returns>IDataType.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsPrimitive(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is primitive
            </summary>
            <param name="type">The dataType.</param>
            <returns><c>true</c> if the specified type is primitive; otherwise, <c>false</c>.</returns>
            <value>
              <c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsPrimitive(TwinCAT.TypeSystem.IDataType,System.Boolean)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is primitive
            </summary>
            <param name="type">The dataType.</param>
            <param name="resolve">if set to <c>true</c> the data type will be resolved.</param>
            <returns><c>true</c> if the specified type is primitive; otherwise, <c>false</c>.</returns>
            <value>
              <c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsPrimitive(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is primitive
            </summary>
            <param name="cat">The cat.</param>
            <returns><c>true</c> if the specified type is primitive; otherwise, <c>false</c>.</returns>
            <value>
              <c>true</c> if this instance is primitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsPrimitive(TwinCAT.Ads.AdsDataTypeId)">
            <summary>
            Determines whether the specified type identifier is primitive.
            </summary>
            <param name="typeId">The type identifier.</param>
            <returns><c>true</c> if the specified type identifier is primitive; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsArrayOfPrimitives(TwinCAT.TypeSystem.IDataType,System.Boolean)">
            <summary>
            Determines whether the dataType is an array of Primitives.
            </summary>
            <param name="type">The type.</param>
            <param name="resolve">if set to <c>true</c> the array datatype and element datatypes will be resolved.</param>
            <returns><c>true</c> if [is array of primitives] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsArrayOfPrimitives(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Determines whether the dataType is an array of Primitives.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is array of primitives] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.ResolvableAsPrimitive(TwinCAT.TypeSystem.IDataType,System.Boolean)">
            <summary>
            Indicates, that this data type can be resolved as primitive or primmitive Array.
            </summary>
            <param name="type">The type.</param>
            <param name="resolve">if set to <c>true</c> the datatype will be resolved.</param>
            <returns><c>true</c> if resolvable as primitive, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.ResolvableAsPrimitive(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Indicates, that this data type can be resolved as primitive or primmitive Array.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if resolvable as primitive, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsContainer(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a container type
            </summary>
            <remarks>Container Types are all types that contain SubElements like
            <list type="bullet">
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Array"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Union"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Struct"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Function"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Program"/></description></item>
            </list>
            and the <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Alias"/> and <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Reference"/> types, if they have a container type as base type.
            </remarks>
            <value>
                <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsContainer(TwinCAT.TypeSystem.IDataType,System.Boolean)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType" /> is a container type
            </summary>
            <param name="type">The type.</param>
            <param name="resolve">if set to <c>true</c> [resolve].</param>
            <returns><c>true</c> if the specified resolve is container; otherwise, <c>false</c>.</returns>
            <value>
              <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category" />
            <remarks>Container Types are all types that contain SubElements like
            <list type="bullet"><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Array" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Union" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Struct" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Function" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock" /></description></item><item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Program" /></description></item></list>
            and the <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Alias" /> and <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Reference" /> types, if they have a container type as base type.</remarks>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsContainer(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>   
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a container type
            </summary>
            <remarks>Container Types are all types that contain SubElements like
            <list type="bullet">
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Array"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Pointer"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Union"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Struct"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Function"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.FunctionBlock"/></description></item>
            <item><description><see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Program"/></description></item>
            </list>
            and the <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Alias"/> and <see cref="F:TwinCAT.TypeSystem.DataTypeCategory.Reference"/> types, if they have a container type as base type.
            </remarks>
            <value>
                <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsPointer(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a pointer type
            </summary>
            <remarks>Pointer types can be dereferenced with the '^' operator.</remarks>
            <value>
                <c>true</c> if this instance is pointer type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsPointer(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a pointer type
            </summary>
            <remarks>Pointer types can be dereferenced with the '^' operator.</remarks>
            <value>
                <c>true</c> if this instance is pointer type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsReference(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a reference type
            </summary>
            <remarks>Reference types can be dereferenced.</remarks>
            <value>
                <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.IsReference(TwinCAT.TypeSystem.DataTypeCategory)">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.TypeSystem.IDataType"/> is a reference type
            </summary>
            <remarks>Reference types can be dereferenced.</remarks>
            <value>
                <c>true</c> if this instance is container type; otherwise, <c>false</c>.
            </value>
            <seealso cref="P:TwinCAT.TypeSystem.IDataType.Category"/>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.ReferencesExternalData(TwinCAT.TypeSystem.IInstance)">
            <summary>
            Indicates, that the Instance value includes process memory data, that cannot be read in one memory block.
            </summary>
            <remarks>This is the case, if the DataType contains static fields, Pointers or References that contain these types of instances/datatypes.
            The Value of the instance cannot be read in one ADS roundtrip.
            </remarks>
            <param name="instance">The instance.</param>
            <returns><c>true</c> if the value of the instance is split into more than one memory block, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.ReferencesExternalData(TwinCAT.TypeSystem.IDataType)">
            <summary>
            Indicates, that the Instance value includes process memory data, that cannot be read in one memory block.
            </summary>
            <remarks>This is the case, if the DataType contains static fields, Pointers or References that contain these types of instances/datatypes.
            The Value of the instance cannot be read in one ADS roundtrip.
            </remarks>
            <param name="type">The dataType.</param>
            <returns><c>true</c> if the value of this datatype is split into more than one memory block, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.TypeSystem.DataTypeExtension.ReferencesExternalData(TwinCAT.TypeSystem.IDataType,System.Collections.Generic.IDictionary{TwinCAT.TypeSystem.IDataType,TwinCAT.TypeSystem.IDataType})">
            <summary>
            Indicates, that the Instance value includes process memory data, that cannot be read in one memory block.
            </summary>
            <param name="type">The dataType.</param>
            <param name="hash">The hash.</param>
            <returns><c>true</c> if external data is referenced, <c>false</c> otherwise.</returns>
            <remarks>This is the case, if the DataType contains static fields, Pointers or References that contain these types of instances/datatypes.
            The Value of the instance cannot be read in one ADS roundtrip.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.AdsModule">
            <summary>
            Main Module representing the TwinCAT.Utilities.dll Module
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsModule.TraceAds">
            <summary>
            Common Trace source for ADS
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsModule.TraceAms">
            <summary>
            Common Trace source for AMS
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsModule.Trace">
            <summary>
            Common Trace source for ADS
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsModule.TraceSession">
            <summary>
            Trace Source for Session objects.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsModule.#cctor">
            <summary>
            Initializes the <see cref="T:TwinCAT.Ads.AdsModule"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsModule.ApplicationPath">
            <summary>
            Gets the Application directory. Folder where the Workbench Exe resides plus the PlugIns
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsModule.DllDirectoryPath">
            <summary>
            Gets the DLL directory path.
            </summary>
            <value>The DLL directory path.</value>
        </member>
        <member name="T:TwinCAT.Ads.Tracing.MethodTrace">
            <summary>
            Method Tracing (Method entry and Method exit)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.MethodTrace.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.MethodTrace"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.MethodTrace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.MethodTrace"/> class.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Tracing.SessionMethodTrace">
            <summary>
            Method Tracing (Method entry and Method exit)
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.SessionMethodTrace.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.MethodTrace"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="args">Message arguments</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.SessionMethodTrace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.MethodTrace"/> class.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Tracing.TraceSourceIds">
             <summary>
             Trace Source IDs
             </summary>
            
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.ADS">
            <summary>
            TwinCAT ADS
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.AdsSymbols">
            <summary>
            ADS Symbol Loading
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.AdsSession">
            <summary>
            ADS Sesssion States
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.AMS">
            <summary>
            TwinCAT AMS
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.VSX">
            <summary>
            VSX Library
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.AutomationInterface">
            <summary>
            Common Automation Interface
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.Core">
            <summary>
            Core classes
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.Utilities">
            <summary>
            Common Utilities.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.PlugIns">
            <summary>
            PlugIn Trace within Utilities.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.Command">
            <summary>
            Command Trace within Utilities.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.Communication">
            <summary>
            Communication Trace within Utilities.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.SystemService">
            <summary>
            Common Trace within SystemService.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.SystemManager">
            <summary>
            Common Trace within SystemManager.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.SystemManagerRCW">
            <summary>
            RCW Trace for System Manager
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.SystemManagerAdapter">
            <summary>
            TRace for System Manager AdapterLayer
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.PlcControl">
            <summary>
            Common Trace for PlcControl.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.UIFramework">
            <summary>
            Common Trace for UIFramework.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.GraphicalEditor">
            <summary>
            Common Trace for the TwinCat.GraphicalEditor.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.EcDescriptions">
            <summary>
            Common Trace for EcDescriptions.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.PlugInFramework">
            <summary>
            Common Trace for PlugInFramework.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.ContextService">
            <summary>
            Context change Trace within PlugInFramework.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.DataCore">
            <summary>
            Common Trace within DataCore.dll
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.DistributedSystems">
            <summary>
            Common Trace Source for the TwinCat.DistributedSystems.dll package
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.OpcUa">
            <summary>
            Trace Source ID for OPC Unified Architecture Traces
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.Management">
            <summary>
            Trace Source ID for the Management Module
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TraceSourceIds.Application">
            <summary>
            Trace ID for Application
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Tracing.TcTraceSource">
            <summary>
            Extended base TraceSource Object for selective TwinCAT Supplement Application tracing.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.#ctor(System.String,TwinCAT.Ads.Tracing.TraceSourceIds,System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.TcTraceSource"/> class.
            </summary>
            <param name="name">Name of the TraceSource.</param>
            <param name="id">Trace Source ID</param>
            <param name="level">Source Level.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.#ctor(System.String,TwinCAT.Ads.Tracing.TraceSourceIds,System.Diagnostics.SourceLevels,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.TcTraceSource"/> class.
            </summary>
            <param name="name">Name of the TraceSource</param>
            <param name="id">ID of the TraceSource</param>
            <param name="level">The level.</param>
            <param name="dumpCaller">if set to <c>true</c> then the Trace Caller method will be dumped into the trace.</param>
            <param name="traceApplicationStart">if set to <c>true</c> then the <see cref="T:TwinCAT.Ads.Tracing.TcTraceSource"/> traces its startup time.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.#ctor(System.String,System.Int32,System.Diagnostics.SourceLevels,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.TcTraceSource"/> class.
            </summary>
            <param name="name">Name of the TraceSource</param>
            <param name="id">ID of the TraceSource</param>
            <param name="level">The level.</param>
            <param name="dumpCaller">if set to <c>true</c> then the Trace Caller method will be dumped into the trace.</param>
            <param name="traceApplicationStart">if set to <c>true</c> then the <see cref="T:TwinCAT.Ads.Tracing.TcTraceSource"/> traces its startup time.</param>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TcTraceSource._dumpCaller">
            <summary>
            Indicates that the trace caller will be dumped into the trace.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Tracing.TcTraceSource.DumpCaller">
            <summary>
            Gets or sets a value indicating whether the Trace caller will be dumped into the trace.
            </summary>
            <value><c>true</c> if [dump caller]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.TcTraceSource.sep">
            <summary>
            Seperator string
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceApplicationStart">
            <summary>
            Traces the application start.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceApplicationEnd">
            <summary>
            Traces the application end.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceVerbose(System.String)">
            <summary>
            Verbose Trace.
            </summary>
            <param name="message">Message to trace.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceMethodInfo(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a trace event with callers Method information into the dump (independant of <see cref="P:TwinCAT.Ads.Tracing.TcTraceSource.DumpCaller"/> setting.
            </summary>
            <param name="type">The type.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceImpl(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Internal implementation of the Trace call
            </summary>
            <param name="type">The type.</param>
            <param name="skipLevels">The skip levels.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceImpl(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Internal implementation of the Trace call
            </summary>
            <param name="type">The type.</param>
            <param name="skipLevels">The skip levels.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceVerbose(System.String,System.Object[])">
            <summary>
            Verbose Trace (With Method Info)
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceInformation(System.String)">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified message.
            </summary>
            <param name="message">The informative message to write.</param>
            <exception cref="T:System.ObjectDisposedException">
            An attempt was made to trace an event during finalization.
            </exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes an informational message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection using the specified object array and formatting information.
            </summary>
            <param name="format">A composite format string (see Remarks) that contains text intermixed with zero or more format items, which correspond to objects in the <paramref name="args"/> array.</param>
            <param name="args">An array containing zero or more objects to format.</param>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="format"/> is null. </exception>
            <exception cref="T:System.FormatException">
                <paramref name="format"/> is invalid.-or- The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format. </exception>
            <exception cref="T:System.ObjectDisposedException">An attempt was made to trace an event during finalization.</exception>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            </PermissionSet>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceWarning(System.String)">
            <summary>
            Warning Trace.
            </summary>
            <param name="message">Message to trace.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceWarning(System.String,System.Object[])">
            <summary>
            Warning Trace.
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceWarning(System.Exception)">
            <summary>
            Warning trace.
            </summary>
            <param name="ex">The exception to trace.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceWarning(System.String,System.Exception)">
            <summary>
            Warning trace.
            </summary>
            <param name="message">Additional message.</param>
            <param name="ex">The Exception to trace.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceWarning(System.Exception,System.String,System.Object[])">
            <summary>
            Warning trace.
            </summary>
            <param name="ex">The Exception to trace.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceError(System.Exception)">
            <summary>
            Error trace.
            </summary>
            <param name="ex">The Exception to trace.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceError(System.String)">
            <summary>
            Error trace.
            </summary>
            <param name="message">The message to trace.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceError(System.String,System.Exception)">
            <summary>
            Error trace.
            </summary>
            <param name="message">The additional message to trace.</param>
            <param name="ex">The exception to trace.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceError(System.String,System.Object[])">
            <summary>
            Error trace.
            </summary>
            <param name="format">Format string</param>
            <param name="args">Arguments for the format string.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceErrorMethod(System.String,System.Object[])">
            <summary>
            Error trace (With Type and Method Information)
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Format string arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceErrorMethod(System.Exception,System.String,System.Object[])">
            <summary>
            Error trace (With Type and Method Information)
            </summary>
            <param name="ex">The ex.</param>
            <param name="format">Format string.</param>
            <param name="args">Format string arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceStart(System.String,System.Object[])">
            <summary>
            Trace Method start
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Format string arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceStart">
            <summary>
            Trace Method start
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceStop(System.String,System.Object[])">
            <summary>
            Trace Method Stop
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Format string arguments.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.TcTraceSource.TraceStop">
            <summary>
            Trace Method Stop
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Tracing.MethodTraceBase">
            <summary>
            Automatically generating Trace Starts and Trace Stops with the IDisposable pattern.
            </summary>
            <remarks>Use the using statement with this class.</remarks>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.MethodTraceBase.traceSource">
            <summary>
            The trace source
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.MethodTraceBase.#ctor(TwinCAT.Ads.Tracing.TcTraceSource)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.MethodTraceBase"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.MethodTraceBase.#ctor(TwinCAT.Ads.Tracing.TcTraceSource,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Tracing.MethodTraceBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.MethodTraceBase.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:TwinCAT.Ads.Tracing.MethodTraceBase"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Tracing.MethodTraceBase._disposed">
            <summary>
            Indicates that the <see cref="T:TwinCAT.Ads.Tracing.MethodTraceBase"/> is disposed.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.MethodTraceBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Tracing.MethodTraceBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:TwinCAT.Ads.AdsStream">
            <summary>
            The class AdsStream is a stream class used for ADS communication.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor">
            <summary>
            Initializes a new instance of the AdsStream class. The instance has an expandable capacity initialized to zero.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the AdsStream class.
            </summary>
            <param name="length">Length of the stream in bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
               Initializes a new instance of the AdsStream class, based on the specified region of a byte array.
            </summary>
            <param name="buffer">The array of bytes from which to create this stream.</param>
            <param name="offset">The offset in buffer at which the stream begins.</param>
            <param name="length">The length of the stream in bytes.</param>
        </member>
        <member name="M:TwinCAT.Ads.AdsStream.#ctor(System.Byte[])">
            <summary>
               Initializes a new instance of the AdsStream class, based on a byte array.
            </summary>
            <param name="buffer">The array of bytes from which to create this stream.</param>
        </member>
        <member name="F:TwinCAT.Ads.AdsStream.origin">
            <summary>
            The origin of the stream.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsStream.Origin">
            <summary>
            Gets the origin of the stream.
            </summary>
            <value>
            The origin.
            </value>
        </member>
        <member name="T:TwinCAT.Ads.AmsNetId">
            <summary>
            AMS/ADS Net ID
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsNetId._data">
            <summary>
            The net identifier
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AmsNetId" /> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="netId">NetID as string</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="netId">Net ID in bytes</param>
            <exception cref="T:System.ArgumentException">Not a valid NetId;netId</exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AmsNetId"/> class from Memory.
            </summary>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentException">Not a valid NetId - data</exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.#ctor(TwinCAT.Ads.AmsNetId)">
            <summary>
            Copy Constructor
            </summary>
            <param name="netId">Net Id.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToString">
            <summary>
            Converts the netId to string
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
            <exception cref="T:System.FormatException"></exception>
            <remarks><list type="table">
              <listheader>
                <term>Formatting</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>g</term>
                <description>Standard formatting</description>
              </item>
              <item>
                <term>x</term>
                <description>Formatting as Hexadecimal (small letters)</description>
              </item>
              <item>
                <term>X</term>
                <description>Formatting as Hexadecimal (big letters)</description>
              </item>
            </list></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBytes">
            <summary>
            Converts the NetId object to byte array
            </summary>
            <returns>System.Byte[].</returns>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Byte"/> with the specified index.
            </summary>
            <param name="i">The index.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.IsSubAddress">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.AmsNetId"/> indicates a SubNet.
            </summary>
            <remarks>A Subnet is indicated, when the <see cref="T:TwinCAT.Ads.AmsNetId"/> doesn't end with <strong>X.X.X.X.1.1</strong>
            </remarks>
            <value><c>true</c> if this instance indicates a subnet; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.AsSpan">
            <summary>
            Returns the <see cref="T:TwinCAT.Ads.AmsNetId"/> as byte Span.
            </summary>
            <returns>ReadOnlySpan&lt;System.Byte&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryWriteBytes(System.Span{System.Byte})">
            <summary>
            Writes the <see cref="T:TwinCAT.Ads.AmsNetId"/> to memory.
            </summary>
            <param name="span">The memory</param>
            <returns><c>true</c> if writing succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.IsLocal">
            <summary>
            Determines, whether the <see cref="T:TwinCAT.Ads.AmsNetId"/> is the Address of the local system (or the <see cref="P:TwinCAT.Ads.AmsNetId.LocalHost"/> address).
            </summary>
            <value><c>true</c> if this instance is local; otherwise, <c>false</c>.</value>
            <remarks>True is also returned for the local host AmsNetId.
            Comparing the <see cref="T:TwinCAT.Ads.AmsNetId"/> doesn't include the SubNetIds (Byte-Indices 4 and 5), what means SubNetIds are ignored.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty / Uninitialized (AmsNetId: 0.0.0.0.0.0)
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Clone">
            <summary>
            Clones the NetId
            </summary>
            <returns>The cloned <see cref="T:TwinCAT.Ads.AmsNetId" /></returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetNetIdString(System.Byte[])">
            <summary>
            Gets the netId string from the byte array
            </summary>
            <param name="netId">The net identifier.</param>
            <returns>System.String.</returns>
            <exclude />
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Empty">
            <summary>
            Creates an empty NetId ("0.0.0.0.0.0")
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.LocalHost">
            <summary>
            Creates the local NetId ("127.0.0.1.1.1")
            </summary>
            <value>The local host.</value>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Broadcast">
            <summary>
            Gets the broadcast address (255.255.255.255.255.255)
            </summary>
            <value>The broadcast.</value>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.IsBroadcast">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.AmsNetId"/> is the broadcast address (255.255.255.255.255.255)
            </summary>
            <value><c>true</c> if this instance is broadcast; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.IsLoopback">
            <summary>
            Indicates, that this <see cref="T:TwinCAT.Ads.AmsNetId"/> indicates a Loopback (ID: 127.0.0.1.1.1)
            </summary>
            <value><c>true</c> if this instance is loop back; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.AmsNetId.s_localNetId">
            <summary>
            The _local net identifier
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.SetLocalNetId(TwinCAT.Ads.AmsNetId,System.Boolean)">
            <summary>
            Sets the Internal Local Net ID (only for internal use)
            </summary>
            <param name="id"></param>
            <param name="overwrite"></param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetId.Local">
            <summary>
            Gets the Local Net ID (System service must be running)
            </summary>
            <value>The local.</value>
            <remarks>The system service must be running</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryGetLocalNetId(TwinCAT.Ads.AmsNetId@)">
            <summary>
            Gets the Local NetID
            </summary>
            <param name="netId">The local AmsNetId</param>
            <returns><c>true</c> if the local NetId is determined, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:TwinCAT.Ads.AmsNetId.LocalValue">
            <summary>
            The local value
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsNetId.EmptyValue">
            <summary>
            The empty value
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsNetId.LocalHostValue">
            <summary>
            The local host value
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsNetId.RegularExpressionPattern">
            <summary>
            The regular expression pattern
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsNetId.regex">
            <summary>
            The regex
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryGetNetId(System.String,System.Byte[]@)">
            <summary>
            Gets the net Id as byte array
            </summary>
            <param name="str">The string.</param>
            <param name="bytes">The bytes.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryGetNetBytes(System.Text.RegularExpressions.Match,System.Byte[]@)">
            <summary>
            Gets the AmsNetIdBytes
            </summary>
            <param name="match">The match.</param>
            <param name="bytes">The bytes.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentNullException">match</exception>
            <exception cref="T:System.ArgumentException">Regular exception didn't match!;match</exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryGetNetId(System.Text.RegularExpressions.Match,TwinCAT.Ads.AmsNetId@)">
            <summary>
            Gets the net identifier.
            </summary>
            <param name="match">Match object.</param>
            <param name="netId">The <see cref="T:TwinCAT.Ads.AmsNetId" />.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.TryParse(System.String,TwinCAT.Ads.AmsNetId@)">
            <summary>
            Converts the string representation of the address to <see cref="T:TwinCAT.Ads.AmsNetId" />.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="netId">The parsed <see cref="T:TwinCAT.Ads.AmsNetId" />.</param>
            <returns><c>true</c> if parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Parse(System.String)">
            <summary>
            Converts the string representation of the address to <see cref="T:TwinCAT.Ads.AmsNetId" />.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>AmsNetId.</returns>
            <exception cref="T:System.FormatException">Format of AmsNetId is not valid!</exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.FromBinHexString(System.String)">
            <summary>
            Creates the <see cref="T:TwinCAT.Ads.AmsNetId" /> from bin hex string.
            </summary>
            <param name="str">The BinHex string.</param>
            <returns>AmsNetId.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBinHex(TwinCAT.Ads.AmsNetId)">
            <summary>
            Converts the specified <see cref="T:TwinCAT.Ads.AmsNetId" /> to a BinHex string.
            </summary>
            <param name="netId">NetId to convert</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.ToBinHex">
            <summary>
            Converts the <see cref="T:TwinCAT.Ads.AmsNetId" /> to a BinHex string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.NetIdsEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares the NetIds
            </summary>
            <param name="netId1">NetID1</param>
            <param name="netId2">NetId2</param>
            <returns><c>true</c> if the NetIds are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.NetIdsEqual(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Compares the NetIds for SubID equality.
            </summary>
            <param name="netId1">NetID1</param>
            <param name="netId2">NetId2</param>
            <param name="ignoreSubID">Ignores the SubId part of the NetId (last 2 numbers/bytes).</param>
            <returns><c>true</c> if the SubIds are equal, <c>false</c> otherwise.</returns>
            <remarks>The first 4 numbers indicate the global ID of the AmsNetId. The last 2
            numbers indicate the (local) submodule.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.NetIdsEqual(System.Byte[])">
            <summary>
            Compares the netIds
            </summary>
            <param name="netId">NetId in bytes.</param>
            <returns><c>true</c> if the NetIds are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.IsSameTarget(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Determines whether the <see cref="T:TwinCAT.Ads.AmsNetId" />s refer to the same target.
            </summary>
            <param name="netIDA">NetID of target system A</param>
            <param name="netIDB">NetID of target system B</param>
            <returns><c>true</c> if the target systems are the same, otherwise <c>false</c>.</returns>
            <seealso cref="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)"/>
            <seealso cref="M:TwinCAT.Ads.AmsNetId.Equals(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)"/>
            <remarks>In comparison to the <see cref="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)" /> or <see cref="M:TwinCAT.Ads.AmsNetId.Equals(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)" /> methods, this Method alse
            checks against the LocalHost ID, which means that <see cref="P:TwinCAT.Ads.AmsNetId.LocalHost" /> is the same target as <see cref="P:TwinCAT.Ads.AmsNetId.Local" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.IsSameTarget(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId,System.Boolean)">
            <summary>
            Determines whether the <see cref="T:TwinCAT.Ads.AmsNetId" />s refer to the same target.
            </summary>
            <param name="netIDA">NetID of target system A</param>
            <param name="netIDB">NetID of target system B</param>
            <param name="ignoreSubId">Indicates only to check the 4 parts of the address (for SubId check).</param>
            <returns><c>true</c> if the target systems are the same, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">netIDA</exception>
            <exception cref="T:System.ArgumentNullException">netIDB</exception>
            <seealso cref="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)" />
            <seealso cref="M:TwinCAT.Ads.AmsNetId.Equals(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)" />
            <remarks>In comparison to the <see cref="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)" /> or <see cref="M:TwinCAT.Ads.AmsNetId.Equals(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)" /> methods, this Method alse
            checks against the LocalHost ID, which means that <see cref="P:TwinCAT.Ads.AmsNetId.LocalHost" /> is the same target as <see cref="P:TwinCAT.Ads.AmsNetId.Local" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Equals(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Determines whether the specified <see cref="T:TwinCAT.Ads.AmsNetId" />s are equal.
            </summary>
            <param name="netIDA">The net IDA.</param>
            <param name="netIDB">The net IDB.</param>
            <returns><c>true</c> if the specified net IDA is equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.op_Equality(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Operator==
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.op_Inequality(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsNetId)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.CompareTo(TwinCAT.Ads.AmsNetId)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetId.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes <paramref name="obj" /> in the sort order. Zero This instance occurs in the same position in the sort order as <paramref name="obj" />. Greater than zero This instance follows <paramref name="obj" /> in the sort order.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AmsNetIdConverter">
            <summary>
            Type Converter class for the <see cref="T:TwinCAT.Ads.AmsNetId" />.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AmsNetIdConverter"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
            <returns>
            true if the specified value is valid for this object; otherwise, false.
            </returns>
        </member>
        <member name="T:TwinCAT.Ads.AmsAddress">
            <summary>
            Ams/Ads Address
            </summary>
            <remarks>The <see cref="T:TwinCAT.Ads.AmsAddress"/> consists of <see cref="P:TwinCAT.Ads.AmsAddress.NetId"/> and <see cref="P:TwinCAT.Ads.AmsAddress.Port"/> information and once it is constructed is immutable.</remarks>
        </member>
        <member name="F:TwinCAT.Ads.AmsAddress._netId">
            <summary>
            The net id
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AmsAddress._port">
            <summary>
            The port
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor">
            <summary>
            Protected constructor
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsAddress)">
            <summary>
            Copy constructor
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsNetId,TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId">Net Id</param>
            <param name="port">Port</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.String,TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Byte[],TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(TwinCAT.Ads.AmsPort)">
            <summary>
            Constructor
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AmsAddress" /> class.
            </summary>
            <param name="str">The address coded as string (Format NetId:Port, 1.2.3.4.5.6:Port)</param>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddress.Empty">
            <summary>
            Gets an Empty Address.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddress.NetId">
            <summary>
            Gets the NetId
            </summary>
            <value>The net identifier.</value>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.SetNetId(TwinCAT.Ads.AmsNetId)">
            <summary>
            Sets the net identifier.
            </summary>
            <param name="netId">The net identifier.</param>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.SetPort(System.Int32)">
            <summary>
            Sets the port.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddress.Port">
            <summary>
            Gets the Port number
            </summary>
            <value>The port.</value>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.op_Equality(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AmsAddress)">
            <summary>
            Operator==
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.op_Inequality(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AmsAddress)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="o1">The o1.</param>
            <param name="o2">The o2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.ToString">
            <summary>
            Converts the Address to String 'NetId:Port'
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.Parse(System.String)">
            <summary>
            Parses a string to an <see cref="T:TwinCAT.Ads.AmsAddress" /> object.
            </summary>
            <param name="str">The string.</param>
            <returns>AmsAddress.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="F:TwinCAT.Ads.AmsAddress.RegularExpressionPattern">
            <summary>
            The regular expression pattern for <see cref="T:TwinCAT.Ads.AmsAddress" />
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsAddress.regex">
            <summary>
            The regex
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.TryParse(System.String,TwinCAT.Ads.AmsNetId@,System.Int32@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="str">The string.</param>
            <param name="netId">The net identifier.</param>
            <param name="port">The port.</param>
            <returns><c>true</c> if the address is successfully parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.TryParse(System.String,TwinCAT.Ads.AmsAddress@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.Ads.AmsAddress" /> from string.
            </summary>
            <param name="str">The STR.</param>
            <param name="address">The address.</param>
            <returns><c>true</c> if the address is sucessfully parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.TryGetPort(System.Text.RegularExpressions.Match,System.Int32@)">
            <summary>
            Gets the port.
            </summary>
            <param name="match">The match.</param>
            <param name="port">The port.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddress.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>AmsAddress.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AmsNetIdMarshaller">
            <summary>
            Marshaller class for <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AmsNetIdMarshaller.MarshalSize">
            <summary>
            Gets the Marshalling size of <see cref="T:TwinCAT.Ads.AmsNetId"/>.
            </summary>
            <value>The size of.</value>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdMarshaller.Marshal(TwinCAT.Ads.AmsNetId)">
            <summary>
            Marshals the <see cref="T:TwinCAT.Ads.AmsNetId"/> to a byte[]
            </summary>
            <param name="netId">The net identifier.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdMarshaller.Marshal(TwinCAT.Ads.AmsNetId,System.IO.BinaryWriter)">
            <summary>
            Marshals/Write the the <see cref="T:TwinCAT.Ads.AmsNetId"/> into a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="netId">The AmsNetId.</param>
            <param name="writer">The writer.</param>
            <returns>Number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdMarshaller.Marshal(TwinCAT.Ads.AmsNetId,System.Span{System.Byte})">
            <summary>
            Marshals the <see cref="T:TwinCAT.Ads.AmsNetId"/> to memory/span.
            </summary>
            <param name="netId">The AmsNetId.</param>
            <param name="span">The Memory.</param>
            <returns>Number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.AmsNetId@)">
            <summary>
            Unmarshals a <see cref="T:TwinCAT.Ads.AmsNetId"/> from memory/span.
            </summary>
            <param name="buffer">The memory/span representation.</param>
            <param name="netId">'The returned <see cref="T:TwinCAT.Ads.AmsNetId"/>.</param>
            <returns>Number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsNetIdMarshaller.Unmarshal(System.IO.BinaryReader,TwinCAT.Ads.AmsNetId@)">
            <summary>
            Unmarshals an <see cref="T:TwinCAT.Ads.AmsNetId"/> from <see cref="T:System.IO.BinaryReader"/>
            </summary>
            <param name="reader">The reader.</param>
            <param name="netId">The net identifier.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AmsAddressMarshaller">
            <summary>
            Marshalling class for <see cref="T:TwinCAT.Ads.AmsAddress"/>
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AmsAddressMarshaller.MarshalSize">
            <summary>
            Gets Marshalling size of the <see cref="T:TwinCAT.Ads.AmsAddress"/>.
            </summary>
            <value>The size of.</value>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddressMarshaller.Marshal(TwinCAT.Ads.AmsAddress)">
            <summary>
            Marshals the specified <see cref="T:TwinCAT.Ads.AmsAddress"/> to a byte[].
            </summary>
            <param name="address">The address.</param>
            <returns>The byte[] representation.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddressMarshaller.Marshal(TwinCAT.Ads.AmsAddress,System.IO.BinaryWriter)">
            <summary>
            Marshals the specified <see cref="T:TwinCAT.Ads.AmsAddress"/> to a <see cref="T:System.IO.BinaryWriter"/>.
            </summary>
            <param name="address">The address.</param>
            <param name="writer">The writer.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddressMarshaller.Marshal(TwinCAT.Ads.AmsAddress,System.Span{System.Byte})">
            <summary>
            Marshals the specified address to the memory/span location.
            </summary>
            <param name="address">The address.</param>
            <param name="data">The data.</param>
            <returns>The number of marshalled bytes.</returns>
            <exception cref="T:System.ArgumentNullException">address</exception>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddressMarshaller.Unmarshal(System.IO.BinaryReader,TwinCAT.Ads.AmsAddress@)">
            <summary>
            Unmarshals the <see cref="T:TwinCAT.Ads.AmsAddress"/> from <see cref="T:System.IO.BinaryReader"/>.
            </summary>
            <param name="reader">The reader.</param>
            <param name="address">The address.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AmsAddressMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.AmsAddress@)">
            <summary>
            Unmarshals the <see cref="T:TwinCAT.Ads.AmsAddress"/> from memory location.
            </summary>
            <param name="data">The data.</param>
            <param name="address">The address.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AsyncHelper">
            <summary>
            Async Helper class.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AsyncHelper._myTaskFactory">
            <summary>
            Task Factory
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the the specified function synchronously.
            </summary>
            <typeparam name="TResult">The Result type of the task.</typeparam>
            <param name="func">The function to run synchronously.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the specified function  synchronously
            </summary>
            <param name="func">The function to run synchronously.</param>
        </member>
        <member name="T:TwinCAT.Ads.AsyncPump">
            <summary>
            Provides a pump that supports running asynchronous methods on the current thread.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.Run(System.Action)">
            <summary>Runs the specified asynchronous method.</summary>
            <param name="asyncMethod">The asynchronous method to execute.</param>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the specified asynchronous method.
            </summary>
            <param name="asyncMethod">The asynchronous method to execute.</param>
            <exception cref="T:System.ArgumentNullException">asyncMethod</exception>
            <exception cref="T:System.InvalidOperationException">No task provided.</exception>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the specified asynchronous method.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="asyncMethod">The asynchronous method to execute.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">asyncMethod</exception>
            <exception cref="T:System.InvalidOperationException">No task provided.</exception>
        </member>
        <member name="T:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext">
            <summary>Provides a SynchronizationContext that's single-threaded.</summary>
        </member>
        <member name="F:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.m_queue">
            <summary>The queue of work items.</summary>
        </member>
        <member name="F:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.m_operationCount">
            <summary>The number of outstanding operations.</summary>
        </member>
        <member name="F:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.m_trackOperations">
            <summary>Whether to track operations m_operationCount.</summary>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.#ctor(System.Boolean)">
            <summary>Initializes the context.</summary>
            <param name="trackOperations">Whether to track operation count.</param>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Dispatches an asynchronous message to the synchronization context.</summary>
            <param name="d">The System.Threading.SendOrPostCallback delegate to call.</param>
            <param name="state">The object passed to the delegate.</param>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>Not supported.</summary>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.RunOnCurrentThread">
            <summary>Runs an loop to process all queued work items.</summary>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.Complete">
            <summary>Notifies the context that no more work will arrive.</summary>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.OperationStarted">
            <summary>Invoked when an async operation is started.</summary>
        </member>
        <member name="M:TwinCAT.Ads.AsyncPump.SingleThreadSynchronizationContext.OperationCompleted">
            <summary>Invoked when an async operation is completed.</summary>
        </member>
        <member name="T:TwinCAT.Ads.ResultReadBytes">
            <summary>
            ADS Task Result returning Read data for async Read operations.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadBytes.#ctor(TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadBytes"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="data">The read data.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadBytes.#ctor(TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte},System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadBytes" /> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="data">The read data.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.ResultReadBytes.s_empty">
            <summary>
            Empty result
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadBytes.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultReadBytes"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadBytes.CreateSuccess(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a success result.
            </summary>
            <param name="data">The data.</param>
            <returns>ResultReadBytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadBytes.CreateSuccess(System.ReadOnlyMemory{System.Byte},System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <param name="data">The data.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultReadBytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadBytes.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error result.
            </summary>
            <param name="error">The error.</param>
            <returns>ResultReadBytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadBytes.CreateError(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Creates an error result.
            </summary>
            <param name="error">The error.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultReadBytes.</returns>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadBytes.Data">
            <summary>
            The read bytes as continuous region of memory.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.ResultDeviceInfo">
            <summary>
            Ads Task Result for <see cref="P:TwinCAT.Ads.ResultDeviceInfo.DeviceInfo"/> requests (async operations).
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultDeviceInfo._name">
            <summary>
            The name of the Device
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultDeviceInfo.Name">
            <summary>
            The name of the Device
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultDeviceInfo._version">
            <summary>
            The ADS Version of the the Device.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultDeviceInfo.Version">
            <summary>
            The ADS Version of the the Device.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultDeviceInfo.#ctor(TwinCAT.Ads.AdsErrorCode,System.String,TwinCAT.Ads.AdsVersion,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultDeviceInfo"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.ResultDeviceInfo.DeviceInfo">
            <summary>
            Gets the device information (Task result)
            </summary>
            <value>The device information.</value>
        </member>
        <member name="T:TwinCAT.Ads.ResultRead">
            <summary>
            Asynchronous ADS Read result.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultRead.#ctor(TwinCAT.Ads.AdsErrorCode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultRead" /> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="readBytes">The number of read bytes.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultRead.#ctor(TwinCAT.Ads.AdsErrorCode,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultRead" /> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="readBytes">The number of read bytes.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.ResultRead._readBytes">
            <summary>
            Gets the number of Read bytes.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultRead.ReadBytes">
            <summary>
            Gets the number of Read bytes.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultRead.s_empty">
            <summary>
            Empty result
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultRead.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultRead"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="T:TwinCAT.Ads.ResultWrite">
            <summary>
            Result for asynchronous ADS write tasks.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultWrite.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultWrite"/> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultWrite.#ctor(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultWrite"/> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultWrite.#ctor(TwinCAT.Ads.ResultAds,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultWrite"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.ResultWrite.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultWrite"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultWrite.CreateSuccess">
            <summary>
            Creates a sucess result.
            </summary>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultWrite.CreateSuccess(System.UInt32)">
            <summary>
            Creates a sucess result.
            </summary>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultWrite.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error result;
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultWrite.CreateError(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Creates an error result;
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultReadWrite">
            <summary>
            Result object for asynchronous ADS ReadWrite tasks.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWrite.#ctor(TwinCAT.Ads.AdsErrorCode,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadWrite"/> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="readBytes">The read bytes.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWrite.#ctor(TwinCAT.Ads.AdsErrorCode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadWrite"/> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="readBytes">The read bytes.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.ResultReadWrite.s_empty">
            <summary>
            Empty Result
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadWrite.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultReadWrite"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWrite.CreateSuccess(System.Int32)">
            <summary>
            Creates a success result.
            </summary>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWrite.CreateSuccess(System.Int32,System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <param name="readBytes">The number of read bytes.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWrite.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error result;
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWrite.CreateError(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Creates an error result;
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultReadWriteBytes">
            <summary>
            Result object for asynchronous ADS ReadWrite tasks.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWriteBytes.#ctor(TwinCAT.Ads.AdsErrorCode,System.ReadOnlyMemory{System.Byte},System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadWriteBytes"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <param name="data">The read data.</param>
            <exclude />
        </member>
        <member name="F:TwinCAT.Ads.ResultReadWriteBytes.s_empty">
            <summary>
            The Empty Result.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadWriteBytes.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultReadWriteBytes"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWriteBytes.CreateSuccess(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Creates a success result.
            </summary>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWriteBytes.CreateSuccess(System.ReadOnlyMemory{System.Byte},System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <param name="data">The data.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWriteBytes.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error result;
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadWriteBytes.CreateError(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Creates an error result;
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultWrite.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultReadDeviceState">
            <summary>
            Result object for asynchronous ADS ReadDeviceState tasks.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadDeviceState.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.StateInfo,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="state">The device state.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadDeviceState.State">
            <summary>
            The Device state.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadDeviceState.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultReadDeviceState"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadDeviceState.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadDeviceState.CreateError(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadDeviceState.CreateSuccess(TwinCAT.Ads.StateInfo)">
            <summary>
            Creates a success result.
            </summary>
            <param name="state">The state.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadDeviceState.CreateSuccess(TwinCAT.Ads.StateInfo,System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <param name="state">The state.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultReadAdsState">
            <summary>
            Result object for asynchronous reading AdsStates via tasks.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadAdsState.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsState)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="state">The result state.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadAdsState.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsState,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="state">The result state.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadAdsState.State">
            <summary>
            Gets the ADS state.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultReadAdsState.s_empty">
            <summary>
            The Empty result.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultReadAdsState.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultReadAdsState"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadAdsState.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultReadAdsState.CreateSuccess(TwinCAT.Ads.AdsState)">
            <summary>
            Creates a success result.
            </summary>
            <param name="state">The state.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultHandle">
            <summary>
            Result object for asynchronous registering an ADS Handle via tasks.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultHandle.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultHandle"/> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="handle">The handle.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultHandle.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultHandle"/> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="handle">The handle.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.ResultHandle.Handle">
            <summary>
            Gets the registered handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultHandle.s_empty">
            <summary>
            The Empty result
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultHandle.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultHandle"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultHandle.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultHandle.CreateError(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultHandle.CreateSuccess(System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <param name="handle">The handle.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultHandle.CreateSuccess(System.UInt32,System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <param name="handle">The handle.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultHandle.op_Implicit(TwinCAT.Ads.ResultHandle)~TwinCAT.ValueAccess.ResultHandleAccess">
            <summary>
            Performs an implicit conversion from <see cref="T:TwinCAT.Ads.ResultHandle"/> to <see cref="T:TwinCAT.ValueAccess.ResultHandleAccess"/>.
            </summary>
            <param name="r">The r.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultAnyValue">
            <summary>
            Result object for asynchronous reading an 'AnyValue'/Primitive Value via tasks.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ResultAnyValue.#ctor(TwinCAT.Ads.AdsErrorCode,System.Object,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultAnyValue"/> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="value">The value.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.ResultAnyValue.s_empty">
            <summary>
            The Empty Result.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultAnyValue.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultAnyValue"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="T:TwinCAT.Ads.CommunicationRetry">
            <summary>
            Class CommunicationRetry.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationRetry.RetryOnFaultAsync(System.Func{System.Threading.Tasks.Task{TwinCAT.Ads.ResultAds}},System.Int32,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Retries on fault.
            </summary>
            <param name="adsFunction">The ADS Read/Write function to call.</param>
            <param name="maxTries">The maximum tries.</param>
            <param name="retryWhen">The retry when function can be used to inject a condition/timeout when the retry should occur.</param>
            <returns>Task&lt;ResultRead&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationRetry.RetryOnInvalidBlockSizeAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{TwinCAT.Ads.ResultRead}},System.Int32,System.Action,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads again after calling an invalidSizeHandler to update buffer sizes
            </summary>
            <param name="readFunction">The read function.</param>
            <param name="maxTries">The number of retries fro the ads read function.</param>
            <param name="invalidSizeHandler">Handler function that is called when DeviceInvalidSize occurs.</param>
            <param name="retryOnAllErrors">if set to <c>true</c> all Errors will cause retries (up to max retries).</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultRead&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationRetry.RetryOnInvalidBlockSize(System.Func{TwinCAT.Ads.ResultRead},System.Int32,System.Action,System.Boolean)">
            <summary>
            Reads again after calling an invalidSizeHandler to update buffer sizes
            </summary>
            <param name="readFunction">The read function.</param>
            <param name="maxTries">The number of retries fro the ads read function.</param>
            <param name="invalidSizeHandler">Handler function that is called when DeviceInvalidSize occurs.</param>
            <param name="retryOnAllErrors">if set to <c>true</c> all Errors will cause retries (up to max retries).</param>
            <returns>Task&lt;ResultRead&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationRetry.BlockwiseReadAsync(System.Func{System.Memory{System.Byte},System.Threading.CancellationToken,System.Threading.Tasks.Task{TwinCAT.Ads.ResultRead}},System.Func{System.Boolean},System.Int32,System.Func{System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.AdsErrorCode},System.Threading.CancellationToken)">
            <summary>
            Read Ads data in Blocks as an async operation
            </summary>
            <param name="readHandlerAsync">The read handler.</param>
            <param name="endConditionPredicate">Predicate defining the block end condition.</param>
            <param name="blockSize">The block size.</param>
            <param name="processDataHandler">Handler for processing the data.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>The read result.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationRetry.BlockwiseRead(System.Func{System.Memory{System.Byte},TwinCAT.Ads.ResultRead},System.Func{System.Boolean},System.Int32,System.Func{System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Read Ads data in Blocks as an async operation
            </summary>
            <param name="readHandler">The read handler.</param>
            <param name="endConditionPredicate">Predicate defining the block end condition.</param>
            <param name="blockSize">The block size.</param>
            <param name="processDataHandler">Handler for processing the data.</param>
            <returns>The read result.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationRetry.BlockwiseReadResizeAsync(System.Func{System.Memory{System.Byte},System.Threading.CancellationToken,System.Threading.Tasks.Task{TwinCAT.Ads.ResultRead}},System.Func{System.Boolean},System.Int32,System.Func{System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.AdsErrorCode},System.Threading.CancellationToken)">
            <summary>
            Read ADS data in blocks. The used block data buffer will be resized dynamically.
            </summary>
            <remarks>The internal buffer will be doubled each time the <paramref name="readHandlerAsync"/> returns <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidSize"/>.</remarks>
            <param name="readHandlerAsync">The read handler.</param>
            <param name="endConditionPredicate">Predicate defining the block end condition (true, if endcondition appeared)</param>
            <param name="initialBlockSize">The initial block size.</param>
            <param name="processDataHandler">Handler for processing the data.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>The read result.</returns>
        </member>
        <member name="M:TwinCAT.Ads.CommunicationRetry.BlockwiseReadResize(System.Func{System.Memory{System.Byte},TwinCAT.Ads.ResultRead},System.Func{System.Boolean},System.Int32,System.Func{System.ReadOnlyMemory{System.Byte},TwinCAT.Ads.AdsErrorCode})">
            <summary>
            Read ADS data in blocks. The used block data buffer will be resized dynamically.
            </summary>
            <remarks>The internal buffer will be doubled each time the <paramref name="readHandler"/> returns <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidSize"/>.</remarks>
            <param name="readHandler">The read handler.</param>
            <param name="endConditionPredicate">Predicate defining the block end condition.</param>
            <param name="initialBlockSize">The initial block size.</param>
            <param name="processDataHandler">Handler for processing the data.</param>
            <returns>The read result.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsClientExtensions">
            <summary>
            Class AdsClientExtensions.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedExtendingBufferReadWriteAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Repeated ReadWRite Request with extending Read buffer.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ResultReadWriteBytes&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedExtendingBufferReadWriteAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32,System.Func{System.Int32,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repeated extending buffer read write as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="maxRepeats">The maximum repeats.</param>
            <param name="initalReadBufferSize">The initial read buffer size.</param>
            <param name="getNextBufferSize">Gets the buffer size for the next call (input parameter is the last buffer size)</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>A Task&lt;ResultReadWriteBytes&gt; representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedExtendingBufferReadWrite(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Repeateds the extending buffer read write.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Task&lt;ResultReadWriteBytes&gt;.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedExtendingBufferReadWrite(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32,System.Func{System.Int32,System.Int32})">
            <summary>
            Repeated extending buffer read write
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="maxRepeats">The maximum repeats.</param>
            <param name="initialReadBufferSize">The initial read buffer size.</param>
            <param name="getNextBufferSize">Gets the buffer size for the next call (input parameter is the last buffer size)</param>
            <returns>A Task&lt;ResultReadWriteBytes&gt; representing the asynchronous operation.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.ReadWithFallbackAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.UInt32,System.Memory{System.Byte},System.Func{TwinCAT.Ads.ResultRead,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Ads Read with fallback as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="fallbackOffset">The fallback offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="shouldProcessFallback">The should process fallback.</param>
            <param name="cancel">The cancel.</param>
            <returns>ResultRead.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.ReadWithFallbackAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Ads Read with fallback as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="fallbackOffset">The fallback offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="cancel">The cancel.</param>
            <returns>Task&lt;ResultRead&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.ReadWithFallback(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.UInt32,System.Memory{System.Byte},System.Func{TwinCAT.Ads.ResultRead,System.Boolean},System.Boolean@)">
            <summary>
            Ads Read with Fallback.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="fallbackOffset">The fallback offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="shouldProcessFallback">The should process fallback.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>ResultRead.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.ReadWithFallback(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.Memory{System.Byte},System.UInt32,System.Boolean@)">
            <summary>
            Ads Read with fallback.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="fallbackOffset">The fallback offset.</param>
            <param name="fallback">if set to <c>true</c> [fallback].</param>
            <returns>ResultRead.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedReadAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32,System.TimeSpan,System.Func{TwinCAT.Ads.ResultRead,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Repeated AdsRead as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="repeat">The repeat.</param>
            <param name="waitTime">The wait time.</param>
            <param name="shouldRepeat">The should repeat.</param>
            <param name="cancel">The cancel.</param>
            <returns>ResultRead.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedReadAsync(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Repeated AdsRead as an asynchronous operation.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="repeat">The repeat.</param>
            <param name="waitTime">The wait time.</param>
            <param name="cancel">The cancel.</param>
            <returns>Task&lt;ResultRead&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedRead(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32,System.TimeSpan,System.Func{TwinCAT.Ads.ResultRead,System.Boolean})">
            <summary>
            Repeated AdsRead.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="repeat">The repeat.</param>
            <param name="waitTime">The wait time.</param>
            <param name="shouldRepeat">The should repeat.</param>
            <returns>ResultRead.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsClientExtensions.RepeatedRead(TwinCAT.Ads.IAdsConnection,System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32,System.TimeSpan)">
            <summary>
            Repeated AdsRead.
            </summary>
            <param name="connection">The connection.</param>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="buffer">The buffer.</param>
            <param name="repeat">The repeat.</param>
            <param name="waitTime">The wait time.</param>
            <returns>ResultRead.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsStateObserver">
            <summary>
            Interface for an AdsState observer
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.IAdsStateObserver.StateInfo">
            <summary>
            Gets the current state of the connected ADS Server.
            </summary>
            <value>ADS state</value>
        </member>
        <member name="E:TwinCAT.Ads.IAdsStateObserver.AdsStateChanged">
            <summary>
            Occurs when the ads state has been changed.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.IAdsSession">
            <summary>
            Interface IAdsSession
            </summary>
            <seealso cref="T:TwinCAT.ISession" />
        </member>
        <member name="P:TwinCAT.Ads.IAdsSession.NetId">
            <summary>
            Gets the NetId of the Session
            </summary>
            <value>The net identifier.</value>
        </member>
        <member name="P:TwinCAT.Ads.IAdsSession.Port">
            <summary>
            Gets the Ams Port of the Session
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:TwinCAT.Ads.IAdsSession.Owner">
            <summary>
            Gets the Session owner.
            </summary>
            <value>The owner or NULL</value>
        </member>
        <member name="P:TwinCAT.Ads.IAdsSession.Address">
            <summary>
            Gets the Address specifier of the Session / connection
            </summary>
            <value>The address.</value>
        </member>
        <member name="T:TwinCAT.Ads.IAdsSymbolicAccess">
            <summary>
            Interface for symbolic ads access.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol as an object.</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue(TwinCAT.TypeSystem.ISymbol,System.Object@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue``1(TwinCAT.TypeSystem.ISymbol)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <returns>The value of the symbol.</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue``1(TwinCAT.TypeSystem.ISymbol,``0@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync``1(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue(TwinCAT.TypeSystem.ISymbol,System.Object@)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <param name="value">The value.</param>
            <returns>The ADS Error Code</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue(TwinCAT.TypeSystem.ISymbol)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue``1(TwinCAT.TypeSystem.ISymbol,``0@)">
            <summary>
            Reads the value of a symbol and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <param name="value">The value.</param>
            <returns>The ADS Error Code</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue``1(TwinCAT.TypeSystem.ISymbol)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously and returns it as an object.
            </summary>
            <param name="symbol">The symbol that should be read.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue(TwinCAT.TypeSystem.ISymbol)" />
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'..</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue(TwinCAT.TypeSystem.ISymbol)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue(TwinCAT.TypeSystem.ISymbol,System.Object@)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync``1(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously and returns it as an object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol that should be read.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>Supported types are limited to 'AnyTypes', what includes all primitive types (UInt32, Int32, Bool etc.), strings, and Arrays that are
            compositions of 'AnyTypes'.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue``1(TwinCAT.TypeSystem.ISymbol)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue``1(TwinCAT.TypeSystem.ISymbol,``0@)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue(System.String,System.Type)">
            <summary>
            Reads the value of a symbol and returns the value as object. The parameter type must have the same
            binary layout as the ADS symbol.
            </summary>
            <param name="symbolPath">Symbol Path of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <returns>Value of the symbol</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue(System.String,System.Type,System.Object@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue``1(System.String)">
            <summary>
            Reads the value of a symbol and returns the value. The parameter type must have the same
            binary layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type</typeparam>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <returns>Value of the symbol</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue``1(System.String,``0@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync``1(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue(System.String,System.Type,System.Object@)">
            <summary>
            Reads the value of a symbol and returns the value as object.
            </summary>
            <remarks>The parameter type must have the same binary layout as the ADS symbol.</remarks>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol.</param>
            <param name="value">The read value of the Symbol.</param>
            <returns>The <see cref="T:TwinCAT.Ads.AdsErrorCode"/>.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue(System.String,System.Type)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync``1(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue``1(System.String,``0@)">
            <summary>
            Reads the value of a symbol and returns the value as object.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="value">The read value of the Symbol.</param>
            <returns>The <see cref="T:TwinCAT.Ads.AdsErrorCode" />.</returns>
            <remarks>The parameter type must have the same binary layout as the ADS symbol.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue``1(System.String)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync``1(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously.
            </summary>
            <remarks> The parameter type must have the same binary layout as the ADS symbol.</remarks>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="type">Managed type of the ADS symbol</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue(System.String,System.Type)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue(System.String,System.Type,System.Object@)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValueAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Reads the value of a symbol asynchronously.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>The parameter type must have the same binary layout as the ADS symbol.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadValue``1(System.String)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadValue``1(System.String,``0@)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadSymbol(System.String)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="symbolPath">Name of the symbol.</param>
            <returns>An <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbol"/> containing the requested symbol information or null if symbol could not
            be found.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadSymbol(System.String,TwinCAT.Ads.TypeSystem.IAdsSymbol@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadSymbolAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadSymbol(System.String,TwinCAT.Ads.TypeSystem.IAdsSymbol@)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="symbolPath">Name of the symbol.</param>
            <param name="symbol">The symbol.</param>
            <returns>An <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbol"/> containing the requested symbol information or null if symbol could not
            be found.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadSymbol(System.String)"/>
            <see cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadSymbolAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadSymbolAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Call this method to obtain information about the individual symbols (variables) in ADS devices.
            </summary>
            <param name="symbolPath">Name of the symbol.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'ReadSymbolInfo' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadSymbol(System.String)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadSymbol(System.String,TwinCAT.Ads.TypeSystem.IAdsSymbol@)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataType(System.String)">
            <summary>
            Call this method to obtain information about the specified data type.
            </summary>
            <param name="typeName">Name of the data type (without namespace)</param>
            <returns>An <IDataType></IDataType> containing the requested type.
            </returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Call this method to obtain information about the specified data type.
            </summary>
            <param name="typeName">Name of the symbol.</param>
            <param name="dataType">The symbol.</param>
            <returns>A <see cref="T:TwinCAT.TypeSystem.IDataType"/> containing the requested symbol information or null if symbol could not
            be found.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataType(System.String)"/>
            <see cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Call this method to obtain information about the specified data type.
            </summary>
            <param name="typeName">Name of the data type.</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'ReadDataType' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.ReadDataType(System.String)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryReadDataType(System.String,TwinCAT.TypeSystem.IDataType@)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync``1(TwinCAT.TypeSystem.ISymbol,``0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync``1(TwinCAT.TypeSystem.ISymbol,``0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.  
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite"/> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue(TwinCAT.TypeSystem.ISymbol,System.Object)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync``1(TwinCAT.TypeSystem.ISymbol,``0,System.Threading.CancellationToken)">
            <summary>
            Writes a value to the symbol. Strings and all primitive data types(UInt32, Int32, Bool etc.) are supported.
            If a string is passed as parameter, the method attempts to parse the string according to the ADS data type of the symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbol">The symbol the value is written to.</param>
            <param name="val">The value to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue(System.String,System.Object)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same binary
            layout as the ADS symbol.
            </summary>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue(System.String,System.Object)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync``1(System.String,``0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue``1(System.String,``0)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            binary layout as the ADS symbol.
            </summary>
            <typeparam name="T">the value type.</typeparam>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue``1(System.String,``0)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync``1(System.String,``0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue(System.String,System.Object)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            layout as the ADS symbol.
            </summary>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue(System.String,System.Object)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync``1(System.String,``0,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue``1(System.String,``0)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            binary layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue``1(System.String,``0)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue``1(System.String,``0)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValueAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Writes the passed object value to the specified ADS symbol.The parameter type must have the same
            binary layout as the ADS symbol.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="symbolPath">Name of the ADS symbol.</param>
            <param name="value">Object holding the value to be written to the ADS symbol</param>
            <param name="cancel">The cancel token.</param>
            <returns>A task that represents the asynchronous 'WriteSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.WriteValue``1(System.String,``0)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsSymbolicAccess.TryWriteValue``1(TwinCAT.TypeSystem.ISymbol,``0)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolicAccess.CleanupSymbolTable">
            <summary>
            Clears the internal symbol / DataTypes cache.
            </summary>
            <remarks>Previously stored symbol information is cleared. As a consequence the symbol information must be obtained from the ADS server again if accessed, which
            which needs an extra ADS round trip.</remarks>
        </member>
        <member name="T:TwinCAT.Ads.IAdsSymbolLoaderFactory">
            <summary>
            Symbol Loader interface
            </summary>
            <remarks>For internal use only.</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolLoaderFactory.CreateSymbolLoader(TwinCAT.ISession,TwinCAT.ISymbolLoaderSettings)">
            <summary>
            Creates a new instance of the <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader">Symbol loader</see> with the specified mode.
            </summary>
            <param name="session">The session (for session orientated loads / symbols). Can be NULL if not present.</param>
            <param name="settings">The settings.</param>
            <returns>The <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader" /> interface of the Symbol loader.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsAnyAccess">
            <summary>
            Interface for accessing ADS 'Any' objects.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyString(System.UInt32,System.UInt32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads as string from a specified address.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="len">The string length to be read.</param>
            <param name="encoding">The encoding.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyStringAsync(System.UInt32,System.UInt32,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Reads a string from a specified address asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="len">The string length to be read.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyString(System.UInt32,System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string from the specified symbol/variable.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="len">The length.</param>
            <param name="encoding">The encoding.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyStringAsync(System.UInt32,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Reads a string asynchronously from the specified symbol/variable
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="len">The length.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read string
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyString(System.UInt32,System.UInt32,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyStringAsync(System.UInt32,System.UInt32,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="length">The length.</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyString(System.UInt32,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with ASCII Encoding</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyStringAsync(System.UInt32,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with ASCII Encoding</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyString(System.String,System.String,System.Int32,System.Text.Encoding)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with ASCII Encoding</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyStringAsync(System.String,System.String,System.Int32,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Writes the string (Potentially unsafe!)
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="value">The value.</param>
            <param name="length">The length of the string to write</param>
            <param name="encoding">The encoding.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <remarks>ATTENTION: Potentially this method is unsafe because following data can be overwritten
            after the string symbol. Please be sure to specify the string length lower than the string size
            reserved within the process image!
            The String is written with ASCII Encoding</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny(System.UInt32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny``1(System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <returns>The value of the read symbol.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsResult``1(System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an result object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <returns>The result.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny``1(System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The value of the read symbol.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsResult``1(System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an result object.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The result value object.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync(System.UInt32,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <remarks>
            As object types only primitive types are supported.
            </remarks>
            <param name="variableHandle">The variable/symbol handle.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync``1(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device.
            </summary>
            <remarks>
            As object types only primitive types are supported.
            </remarks>
            <typeparam name="T">The Type of the value to be read.</typeparam>
            <param name="variableHandle">The variable/symbol handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny(System.UInt32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync(System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync``1(System.UInt32,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">Type of the object to be read</typeparam>
            <param name="variableHandle">The variable handle.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny(System.UInt32,System.UInt32,System.Type)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync(System.UInt32,System.UInt32,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync``1(System.UInt32,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>The asynchronous result.</returns>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny(System.UInt32,System.UInt32,System.Type,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny``1(System.UInt32,System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <returns>The read value.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsResult``1(System.UInt32,System.UInt32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an result object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <returns>The result object.</returns>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAny``1(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsResult``1(System.UInt32,System.UInt32,System.Int32[])">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the object to be read.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <returns>The read value.</returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync(System.UInt32,System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.ReadAnyAsync``1(System.UInt32,System.UInt32,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads data asynchronously from an ADS device and writes it to an object.
            </summary>
            <typeparam name="T">The type of the result value.</typeparam>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultValue`1"/> parameter contains the read value
            (<see cref="P:TwinCAT.Ads.ResultValue`1.Value"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAny(System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsResult(System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAny(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsResult(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAny(System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsResult(System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsync(System.UInt32,System.Object,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Writes an object asynchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite"/> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsync(System.UInt32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes an object synchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="variableHandle">Handle of the ADS variable.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite"/> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAny(System.UInt32,System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <remarks>
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </remarks>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsResult(System.UInt32,System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <remarks>
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </remarks>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsync(System.UInt32,System.UInt32,System.Object,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Writes an object asynchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="args">Additional arguments.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite"/> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.
            </returns>
            <remarks>
            As object types only primitive types are supported.
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args.
            <list type="table">
              <listheader>
                <term>Type of value Parameter</term>
                <description>Necessary Arguments (args)</description>
              </listheader>
              <item>
                <term>string</term>
                <description>args[0]: Number of characters in the string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</description>
              </item>
              <item>
                <term>string[]</term>args[0]: Number of characters in each string typed as <see cref="F:TwinCAT.TypeSystem.StringConvertMode.FixedLengthZeroTerminated" />.</item>
              <item>
                <term>Array</term>args: Dimensions of Array as int[]</item>
            string :
            string[] :
            Array : args Dimensions of Array
            </list>
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsAnyAccess.WriteAnyAsync(System.UInt32,System.UInt32,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes an object asynchronously to an ADS device.
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous task operation. The result parameter <see cref="T:TwinCAT.Ads.ResultWrite"/> of the write operation contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/>.
            </returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsHandle">
            <summary>
            Interface for ADS access via variable handle
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.TryRead(System.UInt32,System.Memory{System.Byte},System.Int32@)">
            <summary>
            Reads the value synchronously data of the symbol, that is represented by the variable handle into the <paramref name="readBuffer"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer/data</param>
            <param name="readBytes">Number of read bytes.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.ReadAsync(System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the value data of the symbol asynchronously into the <paramref name="readBuffer"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer/data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.TryWrite(System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the value data synchronously that is represented in the <paramref name="writeBuffer"/> to the symbol with the specified <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="writeBuffer">The write buffer / value.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.WriteAsync(System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the value data asynchronously that is represented by the <paramref name="writeBuffer"/> to the symbol specified by the
            <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="writeBuffer">The write buffer/value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous write operation. The <see cref="T:TwinCAT.Ads.ResultWrite"/> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.TryReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)">
            <summary>
            ReadWrites value data synchronously to/from the symbol represented by the <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="readBuffer">The read buffer / read data.</param>
            <param name="writeBuffer">The write buffer / write data.</param>
            <param name="readBytes">Number of read bytes.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.ReadWriteAsync(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            ReadWrites value data asynchronously to/from the symbol represented by the <paramref name="variableHandle"/>.
            </summary>
            <param name="variableHandle">Variable handle.</param>
            <param name="readBuffer">The read data / value</param>
            <param name="writeBuffer">The write data / value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultReadWrite"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.TryCreateVariableHandle(System.String,System.UInt32@)">
            <summary>
            Determines the Symbol handle by its instance path synchronously.
            </summary>
            <param name="symbolPath">SymbolName / InstancePath.</param>
            <param name="variableHandle">The symbols handle.</param>
            <returns>The ADS error code.</returns>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.IAdsHandle.TryCreateVariableHandle(System.String,System.UInt32@)"/> is the <see cref="M:TwinCAT.Ads.IAdsHandle.TryDeleteVariableHandle(System.UInt32)"/></remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryDeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandle(System.String)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.TryDeleteVariableHandle(System.UInt32)">
            <summary>
            Releases the specified symbol/variable handle synchronously.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <returns>The ADS error code.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryCreateVariableHandle(System.String,System.UInt32@)" />
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandle(System.UInt32)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.IAdsHandle.TryDeleteVariableHandle(System.UInt32)" /> is the <see cref="M:TwinCAT.Ads.IAdsHandle.TryCreateVariableHandle(System.String,System.UInt32@)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Determines the Symbol handle by its instance path asynchronously.
            </summary>
            <param name="symbolPath">SymbolName / InstancePath.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'CreateVariableHandle' operation. The <see cref="T:TwinCAT.Ads.ResultHandle"/> parameter contains the variable handle 
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryCreateVariableHandle(System.String,System.UInt32@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandle(System.String)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" /> is the <see cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Releases the specified symbol/variable handle asynchronously.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'DeleteVariableHandle' operation. The <see cref="T:TwinCAT.Ads.ResultAds"/> parameter contains the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" />
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryDeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandle(System.UInt32)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)" /> is the <see cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)" /></remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.Read(System.UInt32,System.Memory{System.Byte})">
            <summary>
            Reads data synchronously from an ADS device and writes to the specified <paramref name="readBuffer"/>.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="readBuffer">The read buffer / data</param>
            <returns>Number of successfully returned data bytes.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryRead(System.UInt32,System.Memory{System.Byte},System.Int32@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.ReadAsync(System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.ReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from that target.
            </summary>
            <param name="variableHandle">Variable handle.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Number of successfully returned data bytes.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryReadWrite(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.ReadWriteAsync(System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.Write(System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="writeBuffer">The write buffer / value to be written</param>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryWrite(System.UInt32,System.ReadOnlyMemory{System.Byte})"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.WriteAsync(System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandle(System.String)">
            <summary>
            Determines the Symbol handle by its instance path synchronously.
            </summary>
            <param name="symbolPath">SymbolName / InstancePath.</param>
            <returns>The symbols/variable handle</returns>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandle(System.String)"/> is the <see cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandle(System.UInt32)"/></remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryCreateVariableHandle(System.String,System.UInt32@)"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandle(System.UInt32)">
            <summary>
            Releases the specified symbol/variable handle synchronously.
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <returns>The ADS error code.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.CreateVariableHandle(System.String)" />
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.TryDeleteVariableHandle(System.UInt32)"/>
            <seealso cref="M:TwinCAT.Ads.IAdsHandle.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <remarks>It is a good practice to release all variable handles after use to regain internal resources in the TwinCAT subsystem. The composite method to this
            <see cref="M:TwinCAT.Ads.IAdsHandle.TryDeleteVariableHandle(System.UInt32)" /> is the <see cref="M:TwinCAT.Ads.IAdsHandle.TryCreateVariableHandle(System.String,System.UInt32@)" /></remarks>
        </member>
        <member name="T:TwinCAT.Ads.IAdsResurrectHandles">
            <summary>
            Interface IAdsResurrectHandles
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsResurrectHandles.Resurrect">
            <summary>
            Resurrects / reannounces already registered handles
            </summary>
            <returns>The ADS error code</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsResurrectHandles.ResurrectAsync(System.Threading.CancellationToken)">
            <summary>
            Resurrects / reannounces already registered handles (asynchronously)
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultAds&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsResurrectHandles.Resurrect(System.UInt32)">
            <summary>
            Resurrects / reanounces already registered handles
            </summary>
            <param name="clientHandle">The client handle.</param>
            <returns>The ADS error code</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsResurrectHandles.ResurrectAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Resurrects / reannounces already registered handles (asynchronously)
            </summary>
            <param name="clientHandle">The client handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultAds&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsNotifications">
            <summary>
            Interface for Notification management.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.IAdsNotifications.AdsSumNotification">
            <summary>
            Occurs when Notifications are send (bundled notifications)
            </summary>
            <remarks>As an optimization, this event receives all ADS Notifications that occurred at one
            point in time together. As consequence, the overhead of handler code is reduced, what can be important
            if notifications are triggered in a high frequency and the event has to be synchronized to the UI thread
            context. Because multiple notifications are bound together, less thread synchronization is necessary.
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> and <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/> events shouldn't be used when SumNotifications are registered, because they
            have an performance side effect to this <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsSumNotification"/> event. The full performance is reached only, when all notifications are handled 
            on this event.
            </remarks>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsSumNotification"/> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\03_ADS.NET_EventReading\Form1.cs" region="CODE_SAMPLE_SUMNOTIFICATIONS_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications"/>
            </example>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
        </member>
        <member name="E:TwinCAT.Ads.IAdsNotifications.AdsNotification">
            <summary>
            Occurs when the ADS device sends a notification to the client.
            </summary>
            <remarks>The Event Argument contains the raw data value of the notification, not marshalled to .NET types.</remarks>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\03_ADS.NET_EventReading\Form1.cs" region="CODE_SAMPLE_NOTIFICATIONS_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications"/>
            </example>
        </member>
        <member name="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError">
            <summary>
            Occurs when a exception has occurred during notification management.
            </summary>
            <remarks>
            The occurrence of this event can have two different reasons:
            <list type="number">
            <item>Indicates an internal error occurred during Notification management.</item>
            <item>The registered notification becomes invalid on the server, eg. after a PLC Download / Online Change. If the ADS Server detects that the (still registered) Notification Sender is getting invalid, it sends 
            an error notification so that the client will be informed about detached notifications. The event arguments contains the 'AdsInvalidNotificationException' which describes the invalid notification handle
            by its 'AdsInvalidNotificationException.Handle' property.</item>
            </list>
            </remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/>
        </member>
        <member name="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx">
            <summary>
            Occurs when the ADS devices sends a notification to the client.
            </summary>
            <remarks>The Notification event arguments marshals the data value automatically to the specified .NET Type with ANY_TYPE marshallers.
            </remarks>
            <example>
            Example of receiving <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/> events.
            <code source="..\..\Samples\TwinCAT.ADS.NET_Samples\14_ADS.NET_ReadWriteAnyType\Form1.cs" region="CODE_READWRITEANYNOT_ASYNC" removeRegionMarkers="true" language="csharp" title="Trigger on changed values by ADS Notifications"/>
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <returns>The notification handle.</returns>
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)">
            <summary>
            Deletes a registered notification.
            </summary>
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>/// 
            <param name="notificationHandle">Notification handle.</param>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)">
            <summary>
            Deletes a registered notification.
            </summary>
            <param name="notificationHandle">Notification handle.</param>
            <returns>The ADS error code.</returns>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" /> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes a registered notification asynchronously.
            </summary>
            <param name="notificationHandle">Notification handle.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'DeleteDeviceNotification' operation. The <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> property contains the
            ADS error code after execution.
            </returns>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <remarks>This is the complementary method to <see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" /> overloads and should be called when the
            notification is not needed anymore the free TwinCAT realtime resources.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the AdsNotification event.
            If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive ('AnyType') types are allowed for the parameter <paramref name="type"/>.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument.</param>
            <param name="args">Additional arguments for 'AnyType' types.</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event.
            </summary>
            <param name="symbolPath">Symbol / Instance path of the ADS variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <returns>The notification handle.</returns>
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.
            </remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS ErrorCode.</returns>
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)"/> should always
            be called when the notification is not used anymore.
            </remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/> should always
            be called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" /> event.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS error code.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object,System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" /> event.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="dataSize">Maximum amount of data in bytes to receive with this ADS Notification</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification" />
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotification" />
            <remarks>
            The <para>dataSize</para> Parameter defines the amount of bytes, that will be attached to the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> as value.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" /> should always
            be called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[])">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" /> event.
            </summary>
            <param name="symbolPath">Symbol/Instance path of the ADS variable.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="handle">The notification handle</param>
            <returns>The ADS error code.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.TryDeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" />
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync(System.String,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/> event.
            </summary>
            <param name="symbolPath">The symbol/instance path of the ADS variable.</param>
            <param name="settings">The notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/> should always
            be called when the notification is not used anymore.</remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <returns>The notification handle.</returns>
            <remarks>xxxxxBecause notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/> should always
            called when the notification is not used anymore. <see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            </remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync"/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.UInt32@)">
            <summary>
            Connects a variable to the ADS client. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" /> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">This object can be used to store user specific data (tag data)</param>
            <param name="type">Type of the object stored in the event argument ('AnyType')</param>
            <param name="args">The 'AnyType' arguments.</param>
            <param name="handle">The notification handle.</param>
            <returns>The ADS Error code.</returns>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />
            <remarks>If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive types (AnyType) are supported by this method.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification(System.UInt32)" /> should always
            called when the notification is not used anymore.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync(System.UInt32,System.UInt32,TwinCAT.Ads.NotificationSettings,System.Object,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Connects a variable to the ADS client asynchronously. The ADS client will be notified by the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/> event.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="settings">The settings.</param>
            <param name="userData">This object can be used to store user specific data.</param>
            <param name="type">Type of the object stored in the event argument, only Primitive 'AnyTypes' allowed.</param>
            <param name="args">Additional arguments (for 'AnyType')</param>
            <param name="cancel">The Cancellation token.</param>
            <returns>A task that represents the asynchronous 'AddDeviceNotification' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> type parameter contains the created handle
            (<see cref="P:TwinCAT.Ads.ResultHandle.Handle" />) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> after execution.</returns>
            <remarks>If type is a string type, the first element of the parameter args specifies the number of characters of the string.
            If type is an array type, the number of elements for each dimension has to be specified in the parameter args.
            Only primitive types (AnyType) are supported by this method.
            Because notifications allocate TwinCAT system resources, a complementary call to <see cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" /> should always
            called when the notification is not used anymore.</remarks>
            <seealso cref="M:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync(System.UInt32,System.Threading.CancellationToken)" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx" />
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.TryAddDeviceNotificationEx" />
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationExAsync" />
        </member>
        <member name="T:TwinCAT.Ads.IAdsReadWrite">
            <summary>
            Interface for ADS Read/Write access via IndexGroup / IndexOffset
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite.TryRead(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32@)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="buffer">The read buffer / memory area where the read data is written.</param>
            <param name="readBytes">The number of read bytes.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite.ReadAsync(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the data asynchronously from specified IndexGroup/IndexOffset
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="buffer">The read buffer, memory area where the data is written.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous read operation. The <see cref="T:TwinCAT.Ads.ResultRead"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution..
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite.TryReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32@)">
            <summary>
            Writes data synchronously to an ADS device and reads data from that device.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="readBytes">The read bytes.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite.ReadWriteAsync(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read/Writes data asynchronously to/from the specified <paramref name="writeBuffer"/>, <paramref name="readBuffer"/>
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadWrite' operation. The <see cref="T:TwinCAT.Ads.ResultReadWrite"/> parameter contains the total number of bytes read into the buffer
            (<see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/>) and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite.WriteAsync(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the data / Value asynchronously into the specified <paramref name="writeBuffer"/>.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'Write' operation. The <see cref="T:TwinCAT.Ads.ResultWrite"/> parameter contains 
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite.TryWrite(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The data buffer to be written.</param>
            <returns>The ADS error code.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsReadWrite2">
            <summary>
            Interface for ADS Read/Write access via IndexGroup / IndexOffset
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite2.Read(System.UInt32,System.UInt32,System.Memory{System.Byte})">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given <paramref name="readBuffer"/>
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">Memory location, where to read the data.</param>
            <returns>Number of successfully returned (read) data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite2.ReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device into the <paramref name="readBuffer"/>
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>Number of successfully returned (read) data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite2.Write(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The data to write.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWrite2.Write(System.UInt32,System.UInt32)">
            <summary>
            Triggers a 'Write' call to the ADS device at the specified address.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
        </member>
        <member name="T:TwinCAT.Ads.IAdsReadWriteTimeoutAccess">
            <summary>
            Interface IAdsReadWriteTimeoutAccess
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.Read(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>Number of successfully returned data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.ReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Thhe index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>Number of successfully returned data bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.Write(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">The index group number of the requested ADS service.</param>
            <param name="indexOffset">The index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.TryRead(System.UInt32,System.UInt32,System.Memory{System.Byte},System.Int32,System.Int32@)">
            <summary>
            Reads data synchronously from an ADS device and writes it to the given stream.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="timeout">The timeout.</param>
            <param name="readBytes">The read bytes.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.TryReadWrite(System.UInt32,System.UInt32,System.Memory{System.Byte},System.ReadOnlyMemory{System.Byte},System.Int32,System.Int32@)">
            <summary>
            Writes data synchronously to an ADS device and then Reads data from this device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="readBuffer">The read stream.</param>
            <param name="writeBuffer">The write stream.</param>
            <param name="timeout">The timeout.</param>
            <param name="readBytes">The read bytes.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.TryWrite(System.UInt32,System.UInt32,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Writes data synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>The ADS Error code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.ReadAny(System.UInt32,System.UInt32,System.Type,System.Int32[],System.Int32)">
            <summary>
            Reads data synchronously from an ADS device and writes it to an object.
            </summary>
            <param name="indexGroup">Index group of the ADS variable.</param>
            <param name="indexOffset">Index offset of the ADS variable.</param>
            <param name="type">Type of the object to be read.</param>
            <param name="args">Additional arguments.</param>
            <param name="timeout">The timeout.</param>
            <returns>The Value of the data marshalled to the specified <paramref name="type"/>.</returns>
            <remarks>
            If the Type of the object to be read is a string type, the first element of
            the parameter args specifies the number of characters of the string.
            If the Type of the object to be read is an array type, the number of elements
            for each dimension has to be specified in the parameter args. 
            The <paramref name="type"/> is limited to Primitive types ('AnyType').
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsReadWriteTimeoutAccess.WriteAny(System.UInt32,System.UInt32,System.Object,System.Int32[],System.Int32)">
            <summary>
            Writes an object synchronously to an ADS device.
            </summary>
            <param name="indexGroup">Contains the index group number of the requested ADS service.</param>
            <param name="indexOffset">Contains the index offset number of the requested ADS service.</param>
            <param name="value">Object to write to the ADS device (Primitive type, 'AnyType')</param>
            <param name="args">Additional arguments.</param>
            <param name="timeout">The timeout.</param>
            <returns>System.Int32.</returns>
            <remarks>
            If the Type of the object to be written is a string type, the first element of parameter args
            specifies the number of characters of the string.
            If the Type of the object to be written is an array type, the number of elements
            for each dimension has to be specified in the parameter args. 
            The <paramref name="value"/> is limited to Primitive types ('AnyType').
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.IAdsStateProvider">
            <summary>
            Interface IAdsStateProvider
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateProvider.ReadState">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <returns>The ADS statue and device status or an Exception with ErrorCode: <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceServiceNotSupported"/>.</returns>
            <remarks>Not all ADS Servers support the State ADS Request.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateProvider.TryReadState(TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS status and the device status from an ADS server. Unlike the ReadState method this method does not call an exception on failure. Instead an AdsErrorCode is returned.
            If the return value is equal to AdsErrorCode.NoError the call was successful.
            </summary>
            <param name="stateInfo">The ADS statue and device status.</param>
            <returns><see cref="T:TwinCAT.Ads.AdsErrorCode"/> of the ADS read state call. Check for <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/> to see if call was successful.</returns>
            <remarks>Not all ADS Servers support the State ADS Request</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateProvider.ReadStateAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> parameter contains the state
            (<see cref="P:TwinCAT.Ads.ResultReadDeviceState.State" />) as long as the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <remarks>Not all ADS Servers support the State ADS Request</remarks>
        </member>
        <member name="E:TwinCAT.Ads.IAdsStateProvider.AdsStateChanged">
            <summary>
            Occurs when the AdsState of the target system has been changed.
            </summary>
            <remarks>Not all ADS Servers support he State ADS Request.
            This event occurs asynchronously in an Background Thread. Be aware about Synchronization contexts for possible synchronizations into the UI Synchronization context.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateProvider.RegisterAdsStateChangedAsync(System.EventHandler{TwinCAT.Ads.AdsStateChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers for <see cref="E:TwinCAT.Ads.IAdsStateProvider.AdsStateChanged"/> events as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to be registered for AdsStateChanged calls.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'RegisterAdsStateChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <remarks>Not all ADS Servers support the State ADS Request.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateProvider.UnregisterAdsStateChangedAsync(System.EventHandler{TwinCAT.Ads.AdsStateChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers for <see cref="E:TwinCAT.Ads.IAdsStateProvider.AdsStateChanged"/> events as an asynchronous operation.
            </summary>
            <param name="handler">The handler function to be unregistered.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UnregisterAdsStateChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsStateControl">
            <summary>
            Interface for reading and controlling the ADS state.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControl.WriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControl.WriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControl.TryWriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControl.TryWriteControl(TwinCAT.Ads.StateInfo)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControl.WriteControlAsync(TwinCAT.Ads.AdsState,System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Changes the ADS status and device status of the ADS server asynchronously.
            </summary>
            <param name="state">The ADS state.</param>
            <param name="deviceState">The device state.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteControl' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControl.WriteControlAsync(TwinCAT.Ads.AdsState,System.UInt16,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Changes the ADS status and device status of the ADS server asynchronously.
            </summary>
            <param name="state">The ADS state.</param>
            <param name="deviceState">The device state.</param>
            <param name="data">Additional data.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteControl' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the state
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsStateControlTimeout">
            <summary>
            Interface IAdsStateControlTimeout
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControlTimeout.WriteControl(TwinCAT.Ads.StateInfo,System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControlTimeout.WriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControlTimeout.ReadState(System.Int32)">
            <summary>
            Reads the ADS status and the device status from an ADS server.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>The ADS statue and device status.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControlTimeout.TryReadState(System.Int32,TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS status and the device status from an ADS server. Unlike the ReadState method this method does not call an exception on failure. Instead an AdsErrorCode is returned.
            If the return value is equal to AdsErrorCode.NoError the call was successful.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="stateInfo">The ADS statue and device status.</param>
            <returns>AdsErrorCode of the ADS read state call. Check for AdsErrorCode.NoError to see if call was successful.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControlTimeout.TryWriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte},System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsStateControlTimeout.TryWriteControl(TwinCAT.Ads.StateInfo,System.Int32)">
            <summary>
            Changes the ADS status and the device status of an ADS server.
            </summary>
            <param name="stateInfo">New ADS status and device status.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ISymbolCache">
            <summary>
            Interface for a Symbol Info Table
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.CleanupCache">
            <summary>
            Cleans all internal caches (DataType + Symbol information)
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.ISymbolCache.CachedTypesCount">
            <summary>
            Gets the number of actualy cached data types.
            </summary>
            <value>The cached types count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.ISymbolCache.CachedSymbolsCount">
            <summary>
            Gets the number of actually cached Symbols.
            </summary>
            <value>The cached symbols count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.ISymbolCache.CachedHandlesCount">
            <summary>
            Gets the number of actually cached symbol handles.
            </summary>
            <value>The cached handles count.</value>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.TryWriteValue(System.String,System.Object)">
            <summary>
            Writes the symbol synchronously.
            </summary>
            <param name="symbolPath">The name.</param>
            <param name="value">The value.</param>
            <returns>AdsErrorCode.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported
            or
            Type of symbol not supported</exception>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.WriteValueAsync(System.String,System.Object,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.WriteValueAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the symbol.
            </summary>
            <param name="symbolPath">The name.</param>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultWrite&gt;.</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported
            or
            Type of symbol not supported</exception>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.TryWriteValue(System.String,System.Object)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.TryReadValue(System.String,System.Type,System.Object@)">
            <summary>
            Reads the symbol value.
            </summary>
            <param name="symbolPath">The Symbol path.</param>
            <param name="managedType">Managed type</param>
            <param name="value">The value.</param>
            <returns>The symbol value</returns>
            <exception cref="T:System.NotSupportedException">Type of symbol not supported
            or
            Type of symbol not supported</exception>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.ReadValueAsync(System.String,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads the symbol value asynchrously.
            </summary>
            <param name="symbolPath">The Symbol path.</param>
            <param name="managedType">Managed type</param>
            <param name="cancel">the cancellation token</param>
            <returns>A task that represents the asynchronous 'ReadSymbol' operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.TryReadValue(System.String,System.Type,System.Object@)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.ReadSymbolAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the symbol asynchronously.
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="bLookup">if set to <c>true</c> then this method looks first in its internal cache, otherwise it directly does an ADS roundtrip.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadSymbolInfo' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.TryReadSymbol(System.String,System.Boolean,TwinCAT.Ads.TypeSystem.IAdsSymbol@)">
            <summary>
            Get the symbol synchronously
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="bLookup">if set to <c>true</c> then this method looks first in its internal cache, otherwise it directly does an ADS roundtrip.</param>
            <param name="symbol">The symbol.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.ReadSymbolAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.ReadTypeAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Reads a <see cref="T:TwinCAT.TypeSystem.IDataType"/> asynchronously.
            </summary>
            <param name="name">The type name.</param>
            <param name="lookup">if set to true, the operation first looks in the cached DataTypes table, otherwise an ADS GetDataTypeByName is forced./>.</param>
            <param name="cancel">Cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadType' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.TryReadType(System.String,System.Boolean,TwinCAT.TypeSystem.IDataType@)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.TryReadType(System.String,System.Boolean,TwinCAT.TypeSystem.IDataType@)">
            <summary>
            Determines a <see cref="T:TwinCAT.TypeSystem.IDataType"/> from its name (synchronously)
            </summary>
            <param name="name">The type name.</param>
            <param name="lookup">if set to true, the operation first looks in the cached DataTypes table, otherwise an ADS GetDataTypeByName is forced./>.</param>
            <param name="type">The type.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.ReadTypeAsync(System.String,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the rpc method.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="rpcMethod">The RPC method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolCache.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbol">The symbol</param>
            <param name="rpcMethod">The RPC method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
            <seealso cref="M:TwinCAT.Ads.Internal.ISymbolCache.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)"/>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ITcAdsRaw">
            <summary>
            Internal Raw ADS interface
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRaw.TryReadState(TwinCAT.Ads.StateInfo@)">
            <summary>
            Reads the ADS state.
            </summary>
            <param name="stateInfo">The state information.</param>
            <returns>The ADS Error Code</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRaw.TryWriteControl(TwinCAT.Ads.StateInfo,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Writes the state
            </summary>
            <param name="stateInfo">The state information.</param>
            <param name="writeBuffer">The write buffer.</param>
            <returns>The ADs Error Code</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRaw.ReadStateAsync(System.Threading.CancellationToken)">
            <summary>
            Read the ADS State asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultReadDeviceState" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultReadDeviceState.State"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRaw.ReadAsync(System.UInt32,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the value of the specified symbol asynchronously.
            </summary>
            <param name="variableHandle">The variable/symbol handle.</param>
            <param name="readBuffer">The read buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultRead" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultRead.ReadBytes"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRaw.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Generates a unique handle for an ADS variable (asynchronously)
            </summary>
            <param name="variableName">Name of the ADS variable</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultHandle" /> parameter contains the handle
            <see cref="P:TwinCAT.Ads.ResultHandle.Handle"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRaw.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Releases the handle of a ADS variable again (asynchronously)
            </summary>
            <param name="variableHandle">Handle of the ADS variable</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the 
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRaw.WriteControlAsync(TwinCAT.Ads.AdsState,System.UInt16,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the <see cref="T:TwinCAT.Ads.AdsState"/> and device state to the ADS device.
            </summary>
            <param name="adsState">State of the ads.</param>
            <param name="deviceState">State of the device.</param>
            <param name="writeBuffer">The write buffer.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the 
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ITcAdsRawAny">
            <summary>
            Internal Raw ADS interface
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryReadAny(System.UInt32,System.UInt32,System.Type,System.Object@)">
            <summary>
            Read the value of an AnyType (Primitive type)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type to be read.</param>
            <param name="value">The value marshalled as specified in <paramref name="type"/>.</param>
            <returns>The ADS Error Code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.ReadAnyAsync(System.UInt32,System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="type">The type as AnyType (primitive types).</param>
            <param name="args">The type arguments (AnyType)</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryReadAny(System.UInt32,System.Type,System.Int32[],System.Object@)">
            <summary>
            Read the value of an AnyType (Primitive type)
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="type">The type to be read.</param>
            <param name="args">The type arguments (AnyType)</param>
            <param name="value">The value marshalled as specified in <paramref name="type" />.</param>
            <returns>The ADS Error Code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.ReadAnyAsync(System.UInt32,System.Type,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Reads the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="type">The type as AnyType (primitive types).</param>
            <param name="args">The type arguments (AnyType)</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultAnyValue" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryReadAny(System.UInt32,System.Type,System.Object@)">
            <summary>
            Reads a value.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <returns>The ADS Error Code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryWriteAny(System.UInt32,System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an AnyType value.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="args">The type arguments (AnyType)</param>
            <returns>The ADS Error Code</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.WriteAnyAsync(System.UInt32,System.UInt32,System.Object,System.Int32[],System.Threading.CancellationToken)">
            <summary>
            Write the value of an Anytype (Primitive type) asynchronously.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <param name="args">The type arguments (AnyType)</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadState' operation. The <see cref="T:TwinCAT.Ads.ResultWrite" /> parameter contains the value
            the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryWriteAny(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes an AnyType value.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="value">The value.</param>
            <returns>The ADS Error code</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryWriteAny(System.UInt32,System.Object,System.Int32[])">
            <summary>
            Writes an AnyType value.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="value">The value.</param>
            <param name="args">The type arguments (AnyType)</param>
            <returns>The ADS Error code</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryWriteAny(System.UInt32,System.Object)">
            <summary>
            Writes an AnyType value.
            </summary>
            <param name="variableHandle">The variable handle.</param>
            <param name="val">The value.</param>
            <returns>The ADS Error code</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryWrite``1(System.UInt32,System.UInt32,``0)">
            <summary>
            Writes an AnyType value.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="val">The value.</param>
            <returns>The ADS Error Code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ITcAdsRawAny.TryWrite(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Writes an AnyType value (struct)
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="val">The value.</param>
            <returns>The ADS Error Code.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IDisposableHandleBag">
            <summary>
            Interface IDisposableHandleBag
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <exclude/>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag.Contains(System.UInt32)">
            <summary>
            Determines whether the handle was acquired by this <see cref="T:TwinCAT.Ads.Internal.IDisposableHandleBag`1"/>
            </summary>
            <param name="handle">The handle.</param>
            <returns><c>true</c> if [contains] [the specified handle]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag.CreateHandles">
            <summary>
            Creates the handles.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag.ReleaseHandles">
            <summary>
            Releases the handles.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag.CreateHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the handles.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag.ReleaseHandlesAsync(System.Threading.CancellationToken)">
            <summary>
            Releases the handles.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IDisposableHandleBag.ValidHandles">
            <summary>
            Gets the valid handles.
            </summary>
            <value>The valid handles.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IDisposableHandleBag.SourceCount">
            <summary>
            Gets the number of registered sources
            </summary>
            <value>The source count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IDisposableHandleBag.ResultHandles">
            <summary>
            Gets results of Handle registrations.
            </summary>
            <value>The handle count.</value>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IDisposableHandleBag`1">
            <summary>
            Interface IDisposableHandleBag
            </summary>
            <seealso cref="T:TwinCAT.Ads.Internal.IDisposableHandleBag" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.TryGetHandle(`0,System.UInt32@)">
            <summary>
            Tries to get the specified handle
            </summary>
            <param name="sourceObject">The source object that corresponds to the handle</param>
            <param name="handle">The handle.</param>
            <returns><c>true</c> if the handle exists for the source object, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">DisposableHandleBag</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.GetHandle(`0)">
            <summary>
            Gets the handle.
            </summary>
            <param name="sourceObject">The source object.</param>
            <returns>System.UInt32 or 0</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.GetHandleResult(`0)">
            <summary>
            Gets the handle result.
            </summary>
            <param name="sourceObject">The source object.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.TryGetSourceObject(System.UInt32,`0@)">
            <summary>
            Tries to get the corresponding Source object
            </summary>
            <param name="handle">The handle.</param>
            <param name="sourceObject">The source object.</param>
            <returns><c>true</c> if the source object could be determined, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.GetSourceObject(System.UInt32)">
            <summary>
            Gets the source object.
            </summary>
            <param name="handle">The handle.</param>
            <returns>TSource.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.AddHandleSource(`0)">
            <summary>
            Creates the handle for the specified source object.
            </summary>
            <param name="sourceObject">The source object.</param>
            <returns>ResultHandle.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.RemoveHandleSource(`0)">
            <summary>
            Releases the handle for the specified source object.
            </summary>
            <param name="sourceObject">The source object.</param>
            <returns>ResultAds.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.AddHandleSourceAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Creates the handle for the specified source object.
            </summary>
            <param name="sourceObject">The source object.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.RemoveHandleSourceAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Releases the handle for the specified source object
            </summary>
            <param name="sourceObject">The source object.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>Task&lt;ResultAds&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.RemoveAll">
            <summary>
            Unregisteres and Removes all handles from bag.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IDisposableHandleBag`1.RemoveAllAsync(System.Threading.CancellationToken)">
            <summary>
            Unregisters and Removes all handles from bag.
            </summary>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IDisposableHandleBag`1.Sources">
            <summary>
            Gets the number of registered sources
            </summary>
            <value>The source count.</value>
        </member>
        <member name="P:TwinCAT.Ads.Internal.IDisposableHandleBag`1.SourceResultHandles">
            <summary>
            Gets the number of registered Handles
            </summary>
            <value>The handle count.</value>
        </member>
        <member name="T:TwinCAT.Ads.Internal.HandleBagNotInitializedException">
            <summary>
            Class HandleBagNotInitializedException.
            Implements the <see cref="T:TwinCAT.AdsException" />
            </summary>
            <seealso cref="T:TwinCAT.AdsException" />
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleBagNotInitializedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.HandleBagNotInitializedException"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Internal.HandleBagNotInitializedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Internal.HandleBagNotInitializedException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:TwinCAT.Ads.Internal.NetworkStreamExtension">
            <summary>
            Class NetworkStreamExtension.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NetworkStreamExtension.ReadExactBytesAsync(System.Net.Sockets.NetworkStream,System.Byte[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a number of bytes asynchronously from the <see cref="T:System.Net.Sockets.NetworkStream" />.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="debugHint">The debug hint.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;System.Int32&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NetworkStreamExtension.ReadExactBytes(System.Net.Sockets.NetworkStream,System.Byte[],System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a number of bytes synchronously from the <see cref="T:System.Net.Sockets.NetworkStream" />.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="debugHint">The debug hint.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
        </member>
        <member name="M:TwinCAT.Ads.Internal.NetworkStreamExtension.ReadExactBytes(System.Net.Sockets.NetworkStream,System.Span{System.Byte},System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a number of bytes synchronously from the <see cref="T:System.Net.Sockets.NetworkStream" />.
            </summary>
            <param name="stream">The stream.</param>
            <param name="buffer">The buffer.</param>
            <param name="debugHint">The debug hint.</param>
            <param name="cancel">The cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="T:TwinCAT.Ads.Internal.ISymbolVersionChangedReceiver">
            <summary>
            Interface ISymbolVersionChangedReceiver
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.ISymbolVersionChangedReceiver.OnSymbolVersionChanged(TwinCAT.Ads.AdsSymbolVersionChangedEventArgs)">
            <summary>
            Handles the <see cref="E:SymbolVersionChanged" /> event.
            </summary>
            <param name="eventArgs">The <see cref="T:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.IStateChangedReceiver">
            <summary>
            Interface IStateChangedReceiver
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.IStateChangedReceiver.OnAdsStateChanged(TwinCAT.Ads.AdsStateChangedEventArgs)">
            <summary>
            Handles the <see cref="E:AdsStateChanged" /> event.
            </summary>
            <param name="eventArgs">The <see cref="T:TwinCAT.Ads.AdsStateChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.INotificationReceiver">
            <summary>
            Interface INotificationReceiver
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationReceiver.OnNotification(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Handler function for standard notifications.
            </summary>
            <param name="timeStamp">The time stamp of the notifications.</param>
            <param name="notifications">Notifications received with the timestamp.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationReceiver.OnNotificationError(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Handler function for Notification errors.
            </summary>
            <param name="timeStamp">The time stamp.</param>
            <param name="errorNotifications">Notifications received at the specified point of time with errors.</param>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationReceiver.OnInvalidateHandles(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Handler function for notifications that contain handle invalidate messages.
            </summary>
            <param name="timeStamp">The timestamp of the notification.</param>
            <param name="invalidateNotifications">List of Notification invalidations.</param>
            <remarks>Some ADS servers are sending 0-size notifications, when the Notification handle is not valid anymore.
            These notifications will be received by this message.</remarks>
        </member>
        <member name="M:TwinCAT.Ads.Internal.INotificationReceiver.OnNotificationError(System.Exception)">
            <summary>
            Handler function for Notification errors.
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsSymbolFlags">
            <summary>
            Symbol Flags, for internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.Persistent">
            <summary>
            ADSSYMBOLFLAG_PERSISTENT
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.BitValue">
            <summary>
            ADSSYMBOLFLAG_BITVALUE
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.ReferenceTo">
            <summary>
            ADSSYMBOLFLAG_REFERENCETO
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.TypeGuid">
            <summary>
            ADSSYMBOLFLAG_TYPEGUID
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.TComInterfacePtr">
            <summary>
            ADSSYMBOLFLAG_TCCOMIFACEPTR
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.ReadOnly">
            <summary>
            ADSSYMBOLFLAG_READONLY
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.ItfMethodAccess">
            <summary>
            ADSSYMBOLFLAG_ITFMETHODACCESS
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.MethodDeref">
            <summary>
            ADSSYMBOLFLAG_METHODDEREF
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.ContextMask">
            <summary>
            ADSSYMBOLFLAG_CONTEXTMASK (4 Bit)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.Attributes">
            <summary>
            ADSSYMBOLFLAG_ATTRIBUTES
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.Static">
            <summary>
            Symbol is static (ADSSYMBOLFLAG_STATIC,0x2000)        
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.InitOnReset">
            <summary>
            Persistent data will not restored after reset (cold, ADSSYMBOLFLAG_INITONRESET 0x4000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolFlags.ExtendedFlags">
            <summary>
            Extended Flags in symbol (ADSSYMBOLFLAG_EXTENDEDFLAGS,0x8000)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsSymbol2Flags">
            <summary>
            Extended Symbol Flags, for internal use only.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbol2Flags.None">
            <summary>
            None/Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbol2Flags.PlcPointerType">
            <summary>
            PLC pointer type (ADSSYMBOLFLAG2_PLCPOINTERTYPE, 0x00000001)
            PLC pointer -> derelocate and relocate while equalizing redundancy projects
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbol2Flags.RedundancyIgnore">
            <summary>
            Ignore symbol while equalizing redundancy projects (ADSSYMBOLFLAG2_RDIGNORE, 0x00000002)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbol2Flags.RefactorInfo">
            <summary>
            Contains refactoring information (ADSSYMBOLFLAG2_REFACTORINFO, 0x00000004)
            One or more refactoring info AdsRefactorInfo added
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbol2Flags.OnlineChangePtrRefType">
            <summary>
            Online change PTR reference type (ADSSYMBOLFLAG2_OCPTRREFTYPE, 0x00000008)
            PLC pointer or reference -> try to resolve pointer after online change
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbol2Flags.VariantType">
            <summary>
            Symbol is a Variant Type (ADSSYMBOLFLAG2_VARIANT, 0x00000010)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsDataTypeFlags">
            <summary>
            DataType Flags (for internal use only).
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.DataType">
            <summary>
            ADSDATATYPEFLAG_DATATYPE, 0x00000001
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.DataItem">
            <summary>
            ADSDATATYPEFLAG_DATAITEM, 0x00000002
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.ReferenceTo">
            <summary>
            ADSDATATYPEFLAG_REFERENCETO, 0x00000004
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.MethodDeref">
            <summary>
            ADSDATATYPEFLAG_METHODDEREF, 0x00000008
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.Oversample">
            <summary>
            ADSDATATYPEFLAG_OVERSAMPLE, 0x00000010
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.BitValues">
            <summary>
            Indicates BitSized Types / Fields (ADSDATATYPEFLAG_BITVALUES, 0x00000020)
            </summary>
            <remarks>
            Size and Offset are in bits instead of bytes AND iGroup of main symbol incremented by 1!
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.PropItem">
            <summary>
            ADSDATATYPEFLAG_PROPITEM, 0x00000040
            </summary>
            <remarks>
            Data type contains a reference (field) to a FB property
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.TypeGuid">
            <summary>
            ADSDATATYPEFLAG_TYPEGUID, 0x00000080
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.Persistent">
            <summary>
            Indicates Persistent Fields or DataTypes that contain Persistent Fields (ADSDATATYPEFLAG_PERSISTENT, 0x00000100)
            </summary>
            <remarks>
            Means "ContainPersistent" for DataTypes and "IsPersistent" for DataItems (e.g. Struct Fields)
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.CopyMask">
            <summary>
            ADSDATATYPEFLAG_COPYMASK, 0x00000200 (Legacy)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.TComInterfacePtr">
            <summary>
            ADSDATATYPEFLAG_TCCOMIFACEPTR, 0x00000400
            </summary>
            <remarks>
            means "ContainTcComInterfacePtr" for DATATYPES and "IsTcComInterfacePtr" for DATAITEMS
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.MethodInfos">
            <summary>
            ADSDATATYPEFLAG_METHODINFOS, 0x00000800
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.Attributes">
            <summary>
            ADSDATATYPEFLAG_ATTRIBUTES, 0x000001000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.EnumInfos">
            <summary>
            ADSDATATYPEFLAG_ENUMINFOS, 0x00002000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.Aligned">
            <summary>
            this flag is set if the datatype is aligned (ADSDATATYPEFLAG_ALIGNED, 0x00010000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.Static">
            <summary>
            Data item is static - do not use offsets (ADSDATATYPEFLAG_STATIC, 0x00020000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.SoftwareProtectionLevels">
            <summary>
            Has Software Protection Levels for DataTypes.
            Means "ContainSpLevels" for DATATYPES and "HasSpLevels" for DATAITEMS (ADSDATATYPEFLAG_SPLEVELS, 0x00040000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.IgnorePersist">
            <summary>
            do not restore persistent data (ADSDATATYPEFLAG_IGNOREPERSIST, 0x00080000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.AnySizeArray">
            <summary>
            Any size array (ADSDATATYPEFLAG_ANYSIZEARRAY, 0x00100000)
            </summary>
            <remarks>
            If the index is exceeded, a value access to this array will return <see cref="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidArrayIndex"/>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.PersistantDatatype">
             <summary>
             data type used for persistent variables -> should be saved with persistent data (ADSDATATYPEFLAG_PERSIST_DT,0x00200000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.InitOnReset">
            <summary>
            Persistent data will not restored after reset (cold) (ADSDATATYPEFLAG_INITONRESET,0x00400000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.PlcPointerType">
            <summary>
            Indicates PLC Pointer types (ADSDATATYPEFLAG_PLCPOINTERTYPE, 0x00800000).
            </summary>
            <remarks>
            Means "ContainPlcPointerType" for DATATYPES and "IsPlcPointerType" for DATAITEMS
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.RefactorInfo">
            <summary>
            Refactoring information is added (ADSDATATYPEFLAG_REFACTORINFO, 0x01000000).
            </summary>
            <remarks>
            One or more refactoring info AdsRefactorInfo added
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.HideSubItems">
            <summary>
            SubItems are hidden / will not be evaluated (ADSDATATYPEFLAG_HIDESUBITEMS, 0x02000000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.Incomplete">
            <summary>
            The Type description is incomplete (ADSDATATYPEFLAG_INCOMPLETE, 0x04000000).
            </summary>
            <remarks>
            Incomplete description - only allowed for CAdsAddIncompleteDatatype
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.ContainsOnlineChangePtrRef">
            <summary>
            Type contains online change PTR reference (ADSDATATYPEFLAG_OCPTRREFTYPE, 0x08000000)
            </summary>
            <remarks>
            means "ContainsOnlineChangePtrRef" for DATATYPES and "IsOnlineChangePtrRef" for DATAITEMS
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.Variant">
            <summary>
            Indicates variant types (ADSDATATYPEFLAG_VARIANT, 0x10000000)
            </summary>
            <remarks>
            Means "ContainVariant" for DATATYPES and "IsVariant" for DATAITEMS
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.ExtendedFlags">
            <summary>
            Extended Flags used/added (ADSDATATYPEFLAG_EXTENDEDFLAGS, 0x80000000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsDataTypeFlags.None">
            <summary>
            None / No Flag set
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Internal.AdsSymbolProtectionEntry">
            <summary>
            Symbol Protection (EAdsSymProtection)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolProtectionEntry.Read">
            <summary>
            Read (ADS_SPL_READ, 0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolProtectionEntry.Write">
            <summary>
            Write (ADS_SPL_WRITE,1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Internal.AdsSymbolProtectionEntry.Execute">
            <summary>
            Execute (ADS_SPL_EXECUTE, 2)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.IAdsConnectAddress">
            <summary>
            Interface for method to connect the ADS client via AMS Address.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsConnectAddress.Connect(TwinCAT.Ads.AmsAddress)">
            <summary>
            Connects the target ADS Device.
            </summary>
            <param name="address">The address of the target device.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsConnectAddress.Connect(TwinCAT.Ads.AmsNetId,System.Int32)">
            <summary>
            Connects to the target ADS Device.
            </summary>
            <param name="netId">The AmsNetId of the target device.</param>
            <param name="port">The Ams Port number on the target device to connect to.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsConnectAddress.Connect(System.Int32)">
            <summary>
            Connects to the local target ADS Device.
            </summary>
            <param name="port">The port number of the local ADS target device to connect to.</param>
        </member>
        <member name="M:TwinCAT.Ads.IAdsConnectAddress.Connect(System.String,System.Int32)">
            <summary>
            Connects to the target ADS Device.
            </summary>
            <param name="netId">The <see cref="T:TwinCAT.Ads.AmsNetId"/> of the ADS target device specified as string.</param>
            <param name="port">The port number of the ADS target device.</param>
        </member>
        <member name="T:TwinCAT.Ads.IAdsSymbolChangedProvider">
            <summary>
            Interface IAdsSymbolChangedProvider
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.IAdsSymbolChangedProvider.AdsSymbolVersionChanged">
            <summary>
            Occurs when the ADS Symbol Version changed.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolChangedProvider.RegisterSymbolVersionChanged(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs})">
            <summary>
            Registers the symbol version changed.
            </summary>
            <param name="handler">The handler function to register.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolChangedProvider.UnregisterSymbolVersionChanged(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs})">
            <summary>
            Unregisters the symbol version changed.
            </summary>
            <param name="handler">The handler function to unregister.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolChangedProvider.RegisterSymbolVersionChangedAsync(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Registers the symbol version changed asynchronously.
            </summary>
            <param name="handler">The handler function to register.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'RegisterSymbolVersionChanged' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolChangedProvider.UnregisterSymbolVersionChangedAsync(System.EventHandler{TwinCAT.Ads.AdsSymbolVersionChangedEventArgs},System.Threading.CancellationToken)">
            <summary>
            Unregisters the symbol version changed asynchronous.
            </summary>
            <param name="handler">The handler function to unregister.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UnregisterSymbolVersionChangedAsync' operation. The <see cref="T:TwinCAT.Ads.ResultAds" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IRouterNotificationProvider">
            <summary>
            Interface for AMS Router Notifications.
            </summary>
        </member>
        <member name="E:TwinCAT.Ads.IRouterNotificationProvider.RouterStateChanged">
            <summary>
            (Local) Router state changed event.
            </summary>
            <remarks>This event indicates, that a changed event is received from the Local AmsRouter independant of the connected target address.
            A remote system RouterStateChanged event cannot be received at another system - it cannot traverse TwinCAT systems.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.IAdsSymbolCacheProvider">
            <summary>
            Interface IAdsSymbolCacheProvider
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolCacheProvider.TryGetSymbolCache(TwinCAT.Ads.Internal.ISymbolCache@)">
            <summary>
            Get the symbol table.
            </summary>
            <param name="table">The symbol table.</param>
            <returns>The ADS Error Code.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolCacheProvider.GetSymbolCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the symbol table asynchronously
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'RegisterSymbolVersionChanged' operation. The <see cref="T:TwinCAT.Ads.ResultValue`1" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultValue`1.Value"/> and the return code <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsSymbolCacheProvider.SetEncodings(System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Sets the default encoding.
            </summary>
            <param name="symbolNameEncoding">The symbol name encoding.</param>
            <param name="valueEncoding">The default string value encoding.</param>
        </member>
        <member name="T:TwinCAT.Ads.IAdsHandleCacheProvider">
            <summary>
            Interface for handle tables / bags.
            </summary>
            <remarks>The <see cref="T:TwinCAT.Ads.IAdsHandleCacheProvider"/> is able to hold more than one Handle bag.
            E.g. if sets of notification handles are configured with different Notification settings.
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandleCacheProvider.GetHandleCache">
            <summary>
            Gets the handle table.
            </summary>
            <returns>IHandleTable.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandleCacheProvider.CreateHandleBag(System.String[],System.Boolean)">
            <summary>
            Creates a handle bag from symbol paths.
            </summary>
            <param name="instancePath">A list of symbol paths.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <returns>A handle bag that can be disposed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandleCacheProvider.CreateNotificationHandleBag(TwinCAT.TypeSystem.ISymbol[],System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates a notification handle bag form the specified symbols.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The Notification settings.</param>
            <param name="userData">The user data.</param>
            <returns>A handle bag that can be disposed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandleCacheProvider.CreateNotificationExHandleBag(System.Collections.Generic.IList{TwinCAT.TypeSystem.AnySymbolSpecifier},System.Boolean,TwinCAT.Ads.NotificationSettings,System.Object[])">
            <summary>
            Creates a NotificationEx handle bag from a list of symbol paths.
            </summary>
            <param name="symbols">The symbols.</param>
            <param name="relaxSubErrors">Don't leak exceptions on failed single handle creation.</param>
            <param name="settings">The settings.</param>
            <param name="userData">The user data.</param>
            <returns>A handle bag that can be disposed.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsHandleCacheProvider.UnregisterHandleBag(TwinCAT.Ads.Internal.IDisposableHandleBag)">
            <summary>
            Unregisters the handle bag from this <see cref="T:TwinCAT.Ads.IAdsHandleCacheProvider"/>.
            </summary>
            <param name="bag">The handle bag.</param>
        </member>
        <member name="T:TwinCAT.Ads.IAdsInjectAcceptor">
            <summary>
            Interface IInjectAcceptor
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsInjectAcceptor.InjectError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Injects an <see cref="T:TwinCAT.Ads.AdsErrorCode"/> .
            </summary>
            <param name="errorCode">The error.</param>
            <returns>The accepted <see cref="T:TwinCAT.Ads.AdsErrorCode"/>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsInjectAcceptor.InjectSymbolVersionChanged">
            <summary>
            Injection of an SymbolVersionChanged event (just for Unit-Testing purposes)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.IAdsConnection">
            <summary>
            ADS Connection interface
            </summary>
            <seealso cref="T:TwinCAT.IConnection" />
            <seealso cref="T:TwinCAT.Ads.IAdsNotifications" />
            <seealso cref="T:TwinCAT.Ads.IAdsAnyAccess" />
            <seealso cref="T:TwinCAT.Ads.IAdsHandle" />
            <seealso cref="T:TwinCAT.Ads.IAdsReadWrite2" />
            <seealso cref="T:TwinCAT.Ads.IAdsStateControl" />
            <remarks>The ADS connection interface represents the the logical point-to-point exception between Client and Server within an ADS Session.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.IAdsConnection.ClientAddress">
            <summary>
            Get the <see cref="T:TwinCAT.Ads.AmsAddress"/> of the ADS client.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.IAdsConnection.IsLocal">
            <summary>
            Gets a value indicating whether the ADS client is connected to a ADS Server on the local
            computer.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.IAdsConnection.Address">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress"/> of the ADS server.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.IAdsConnection.ReadDeviceInfo">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <returns>DeviceInfo struct containing the name of the device and the version information.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IAdsConnection.ReadDeviceInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Reads the identification and version number of an ADS server.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadDeviceState' operation. The <see cref="T:TwinCAT.Ads.ResultDeviceInfo" /> parameter contains the value
            <see cref="P:TwinCAT.Ads.ResultDeviceInfo.DeviceInfo"/> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode"/> of the ADS communication after execution.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsDisposableConnection">
            <summary>
            Interface IAdsDisposableConnection
            Implements the <see cref="T:TwinCAT.Ads.IAdsConnectAddress" />
            Implements the <see cref="T:TwinCAT.Ads.IRouterNotificationProvider" />
            Implements the <see cref="T:TwinCAT.Ads.IAdsSymbolChangedProvider" />
            Implements the <see cref="T:System.IDisposable" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.IAdsConnectAddress" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:TwinCAT.Ads.IAdsDisposableConnection.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value><c>true</c> if this instance is disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.NotificationSettingsMarshaller">
            <summary>
            Marshalling class for <see cref="T:TwinCAT.Ads.NotificationSettings"/>
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettingsMarshaller.MarshalSize(System.Boolean)">
            <summary>
            Gets the Marshal size of the <see cref="T:TwinCAT.Ads.NotificationSettings"/>
            </summary>
            <param name="extended">if set to <c>true</c> [extended].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettingsMarshaller.Marshal(TwinCAT.Ads.NotificationSettings,System.Int32,System.Span{System.Byte},System.Boolean)">
            <summary>
            Marshals the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="data">The data.</param>
            <param name="extended">if set to <c>true</c> [extended].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettingsMarshaller.Marshal(TwinCAT.Ads.NotificationSettings,System.Int32,System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Marshals the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="dataLength">Length of the data.</param>
            <param name="writer">The writer.</param>
            <param name="extended">if set to <c>true</c> [extended].</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorCodeExtension">
            <summary>
            Class AdsErrorCodeExtensions.
            </summary>
            <remarks>
            This class extends the <see cref="T:TwinCAT.Ads.AdsErrorCode"/> by <see cref="M:TwinCAT.Ads.AdsErrorCodeExtension.Succeeded(TwinCAT.Ads.AdsErrorCode)"/> and <see cref="M:TwinCAT.Ads.AdsErrorCodeExtension.Failed(TwinCAT.Ads.AdsErrorCode)"/> methods.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorCodeExtension.Succeeded(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Indicates, that the communication / <see cref="T:TwinCAT.Ads.AdsErrorCode"/> doesn't show an error.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.AdsErrorCode"/> is <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsErrorCodeExtension.Failed(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Indicates, that the communication failed with <see cref="T:TwinCAT.Ads.AdsErrorCode"/>.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.Ads.AdsErrorCode"/> indicates an Error/Failure, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.StateInfo">
            <summary>
            The structure contains the ADS state and device state.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.#ctor(TwinCAT.Ads.AdsState,System.Int16)">
            <summary>
            Initializes a new Instance of the StateInfo struct.
            </summary>
            <param name="adsState">Ads state.</param>
            <param name="deviceState">Device state.</param>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.#ctor(TwinCAT.Ads.AdsState,System.UInt16)">
            <summary>
            Initializes a new Instance of the StateInfo struct.
            </summary>
            <param name="adsState">Ads state.</param>
            <param name="deviceState">Device state.</param>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.StateInfo"/> struct.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="P:TwinCAT.Ads.StateInfo.Empty">
            <summary>
            Empty / Invalid / Uninitialized state.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:TwinCAT.Ads.StateInfo.AdsState">
            <summary>
            Gets or sets the ADS state of this <see cref="T:TwinCAT.Ads.StateInfo"/> object.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.StateInfo.DeviceState">
            <summary>
            Gets or sets the device state of this <see cref="T:TwinCAT.Ads.StateInfo"/> object.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="ob">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.op_Equality(TwinCAT.Ads.StateInfo,TwinCAT.Ads.StateInfo)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.op_Inequality(TwinCAT.Ads.StateInfo,TwinCAT.Ads.StateInfo)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.Equals(TwinCAT.Ads.StateInfo)">
            <summary>
            Determines whether the specified <see cref="T:TwinCAT.Ads.StateInfo" /> is equal to this instance.
            </summary>
            <param name="info">The <see cref="T:TwinCAT.Ads.StateInfo" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:TwinCAT.Ads.StateInfo" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.StateInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:TwinCAT.Ads.DeviceInfo">
            <summary>
            The structure contains the name and the version information of the device.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.Name">
            <summary>
            Gets the name of the device.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.Version">
            <summary>
            Gets the version information.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.DeviceInfo.#ctor(System.String,TwinCAT.Ads.AdsVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.DeviceInfo"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.Empty">
            <summary>
            Empty / Uninitalized DeviceInfo
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:TwinCAT.Ads.DeviceInfo.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.AdsVersion">
            <summary>
            The structure contains the version number, revision number and build number.
            </summary>
            <remarks>This  version structure is used to indicate Version numbers of TwinCAT.AdsServers.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsVersion"/> class.
            </summary>
            <remarks>Only for internal use!</remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsVersion"/> struct.
            </summary>
            <param name="version">The version.</param>
            <param name="revision">The revision.</param>
            <param name="build">The build.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            version
            or
            revision
            </exception>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersion.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsVersion"/> class.
            </summary>
            <param name="bytes">The bytes.</param>
            <exception cref="T:System.ArgumentNullException">bytes</exception>
            <exception cref="T:System.ArgumentException">bytes</exception>
        </member>
        <member name="F:TwinCAT.Ads.AdsVersion._version">
            <summary>
            The version byte
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsVersion._revision">
            <summary>
            The revision byte.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsVersion._build">
            <summary>
            The build number
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Version">
            <summary>
            Gets or sets the version number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Revision">
            <summary>
            Gets or sets the revision number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Build">
            <summary>
            Gets or sets the build number.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.Empty">
            <summary>
            Get the Empty/Uninitialized Version (0,0,0)
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:TwinCAT.Ads.AdsVersion.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty / uninitialized.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersion.ConvertToStandard">
            <summary>
            Converts this <see cref="T:TwinCAT.Ads.AdsVersion"/> to a .NET Framework <see cref="P:TwinCAT.Ads.AdsVersion.Version"/> object.
            </summary>
            <returns>Version.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersion.Create(System.Version)">
            <summary>
            Creates the <see cref="T:TwinCAT.Ads.AdsVersion"/> object form <see cref="T:System.Version"/>.
            </summary>
            <param name="version">The version.</param>
            <returns>AdsVersion.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersion.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:TwinCAT.Ads.AdsVersion"/> object.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <param name="build">The build.</param>
            <returns>AdsVersion.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersion.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:TwinCAT.Ads.AdsVersion"/> object.
            </summary>
            <param name="major">The major.</param>
            <param name="minor">The minor.</param>
            <returns>AdsVersion.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsVersionConverter">
            <summary>
            Converts the <see cref="T:TwinCAT.Ads.AdsVersion"/> type to <see cref="T:System.Version"/> and vice versa.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersionConverter.Convert(TwinCAT.Ads.AdsVersion)">
            <summary>
            Converts the <see cref="T:TwinCAT.Ads.AdsVersion"/> to <see cref="T:System.Version"/>
            </summary>
            <param name="adsVersion">The ads version.</param>
            <returns>Version.</returns>
        </member>
        <member name="M:TwinCAT.Ads.AdsVersionConverter.Convert(System.Version)">
            <summary>
            Converts the <see cref="T:System.Version"/> to <see cref="T:TwinCAT.Ads.AdsVersion"/>
            </summary>
            <param name="version">The version.</param>
            <returns>AdsVersion.</returns>
            <exception cref="T:System.ArgumentNullException">version</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Revision number not supported by AdsVersion object!</exception>
        </member>
        <member name="T:TwinCAT.Ads.AdsTransMode">
            <summary>
            ADS Transmission Mode for ADS Notifications.
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.Ads.AdsTransMode"/> configures the registration of the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> at the
            server system and how the parameters of the
            <see cref="M:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification(System.String,System.Int32,TwinCAT.Ads.NotificationSettings,System.Object)"/>
            are interpreted.
            The following general scenarios are addressed:
            <list type="bullet"><item>Cyclic notifications.</item><item>Notifications on value change.</item><item>Server side and Client side notifications.</item><item>Binding of notifications to specific tasks.</item></list>
            <para>
            <para>In the default case the <see cref="F:TwinCAT.Ads.AdsTransMode.OnChange"/> or the <see cref="F:TwinCAT.Ads.AdsTransMode.Cyclic"/> (Server cycle) should be used.
            All other modes are side cases for special purposes.</para>
            More about the AdsNotifications: <a href="0fb21396-9448-45f0-9970-115c333627c5.htm">ADS Notification concept</a>.
            </para>
            </remarks>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/>
            <seealso cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>
            <seealso cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationEx"/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.None">
            <summary>
            None / Uninitalized transport mode.
            No <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.ClientCycle">
            <summary>
            Client triggered cyclic <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event.
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically triggered from the client side.
            Polling is used from the User Application to read values, before they are fired as Notifications.
            <para>Client side triggering has the following consequences:
            <list type="bullet"><item>The realtime environment on the server side will be less stressed (especially the mailbox queue).</item><item>Value requests are serialized one after another and are handled slower (synchronouly, not asynchronously)</item><item>Implicit synchronization of the events into the UI Thread.</item></list></para>
            This Mode was used by the AdsOcx only and is not supported by the Beckhoff.TwinCAT.Ads API
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.ClientOnChange">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired when data changes triggered by the client.
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired on-change triggered from the client side.
            Polling is used from the User Application to read values, before they are fired as Notifications.
            Client side triggering has the following consequences:
            <list type="bullet">
            <item><description>The realtime environment on the server side will be less stressed (especially the mailbox queue).</description></item>
            <item><description>Value requests are serialized one after another and are handled slower (synchronously, not asynchronously)</description>.</item>
            <item><description>Implicit synchronization of the events into the UI Thread.</description></item>
            </list>
            This Mode was used by the AdsOcx only and is not supported by the Beckhoff.TwinCAT.Ads API
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.Cyclic">
            <summary>
              <para>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.</para>
              <para>
            The Notification will be registered on the ADS Server side for a cyclical trigger (dependant on time parameter) and is bound
            to the 'default' task of the addressed target. In case of the PLC target (e.g. Port 851) the default
            task is the first configured task.</para>
            <para>
            Each time the 'default' task has finished its cycle the realtime system will check for the expired cycle time
            and sends the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> message on expiry.</para>
            <para>The used ContextMask for the 'default' task is 0.
            </para>
            <para>
            <strong>Please be aware, that server side 'Change' notifications stress the realtime system and should be handled with care.
            Therefore, dependent of the cycle time of the task and the capabilities of the system only a limited set of Cyclic Notifications should be used!
            </strong>
            </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.OnChange">
            <summary>
            <para>
            On-Change <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event.</para>
            <para>The Notification will be registered on the ADS Server side for an on-change and optional cyclical trigger (dependant on parameters) and is bound
            to the 'default' task of the addressed target. In case of the PLC target (e.g. Port 851) the default
            task is the first configured task.
            </para>
            <para>Each time this task has finished its cycle the realtime system will check for the changed value and an optional expired cycle time
            and sends the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> message on change or expiry.</para>
            <para>The used ContextMask for the 'default' task is 0.</para>
            <para>
            <strong>Please be aware, that server side 'OnChange' notifications stress the realtime system / the default task with value comparisons.
            Therefore, dependent of the cycle time of the task and the capabilities of the system a higher amount of notification registrations should be handled with care !
            </strong>
            </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicInContext">
            <summary>
              <para>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically within the given task context.</para>
              <para>A Value of parameter is interpreted as task context number <see cref="P:TwinCAT.Ads.TypeSystem.IContextMaskProvider.ContextMask"/>. This can be important, if
            the notifications have to be synchronous with specific tasks, but should not be used in the default case.</para>
              <para>The Notification will be registered on the ADS Server side for a cyclical trigger (dependant on time parameter) and is bound
            to the task specified by the ContextMask of the addressed target. In case of the PLC target (e.g. Port 851)
            the ContextMask is the Index of the global TASKINFOARRAY - 1.
            </para>
              <para>Each time this task has finished its cycle the realtime system will check for the expired cycle time
            and sends the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> message on expiry.
            </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext">
            <summary>
              <para>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired when the data changes within the given task context.</para>
              <para>A
            Value of parameter is interpreted as task context number <see cref="P:TwinCAT.Ads.TypeSystem.IContextMaskProvider.ContextMask"/>. This can be important, if
            the notifications have to be synchronously with specific tasks, but should not be used in the default case.</para>
              <para>The Notification will be registered on the ADS Server side for an on-change and optional cyclical trigger (dependant on parameters) and is bound
            to the task specified by the ContextMask of the addressed target. In case of the PLC target (e.g. Port 851)
            the ContextMask is the Index of the global TASKINFOARRAY - 1.
            Each time this task has finished its cycle the realtime system will check for the changed value and an optional expired cycle time
            and sends the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> message on change or expiry.</para>
              <para>
                <b>
                  <strong>Please be aware, that server side 'OnChange' notifications stress the realtime system / the default task with value comparisons.
            Therefore, dependent of the cycle time of the task and the capabilities of the system only a limited set of OnChange Notifications should be used!
            </strong>
                </b>
              </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.Client1Req">
            <summary>
            The client1 req 
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC0">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically. Same as 'Cyclic'.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC1">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC2">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC3">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC4">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC5">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC6">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC7">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC8">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC9">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC10">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC11">
            <summary>
            The A<see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC12">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC13">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC14">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsTransMode.CyclicC15">
            <summary>
            The <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> event is fired cyclically.
            </summary>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterState">
            <summary>
            State of the AMS Router.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.None">
            <summary>
            Unknown Router State (None, Uninitialized)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Stopped">
            <summary>
            AMS Router is stopped.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Stop">
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Started">
            <summary>
            AMS Router is started.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Start">
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AmsRouterState.Removed">
            <summary>
            AMS Router has been removed.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsPortRange">
            <summary>
            Defines ranges of <see cref="T:TwinCAT.Ads.AmsPort">AmsPorts.</see>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.PORT_FIRST">
            <summary>
            Defines the first valid port.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.PORT_LAST">
            <summary>
            Defines the last valid port (0xFFFE, 65534)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.S7COMM_FIRST">
            <summary>
            (AMSPORT_R3_S7COMM_FIRST,20100)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.S7COMM_LAST">
            <summary>
            (AMSPORT_R3_S7COMM_LAST,20199)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.CUSTOMER_FIRST">
            <summary>
            First usable port for customer R3 ADS Servers
            (AMSPORT_R3_CUSTOMER_FIRST,25000, 0x61A8)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.CUSTOMER_LAST">
            <summary>
            Last usable port for customer R3 ADS Servers
            (AMSPORT_R3_CUSTOMER_LAST,25999,0x658F)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.CUSTOMERPRIVATE_FIRST">
            <summary>
            First usable port for private networks (0x6590)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPortRange.CUSTOMERPRIVATE_LAST">
            <summary>
            Last usable port for private networks (0x6977)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsPort">
            <summary>
            Ams Ports Definitions.
            </summary>
            <remarks>
            The AmsPort enumeration defines the pre-occupied port numbers for Beckhoff AmsServers. Additionally the free areas for
            custom AmsServers are defined here.
            <list type="table">
              <listheader>
                <term>Port Range</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>1 .. 24999 (0x01 .. 0x61A7)</term>
                <description>Internally Reserved for Beckhoff AMS Servers.</description>
              </item>
              <item>
                <term><see cref="F:TwinCAT.Ads.AmsPortRange.CUSTOMER_FIRST"/> (25000, 0x61A8) &lt;= PORT &lt;= <see cref="F:TwinCAT.Ads.AmsPortRange.CUSTOMER_LAST"/> (25999, 658F)</term>
                <description>Reserved for Customer use. Don't forget to register your port at Beckhoff to prevent Port conflicts with other released AmsServers.</description>
              </item>
              <item>
                <term><see cref="F:TwinCAT.Ads.AmsPortRange.CUSTOMERPRIVATE_FIRST"/> (26000, 0x6590) &lt;= PORT &lt;= <see cref="F:TwinCAT.Ads.AmsPortRange.CUSTOMERPRIVATE_LAST"/> (26999, 6977)</term>
                <description>Reserved for Customer private use. Private use means that AMSServers with this port never leave the customer private
                network and the customer is responsible by himself to prevent port conflicts in this area.
              </description>
              </item>
              <item>
                <term>32768 .. <see cref="F:TwinCAT.Ads.AmsPortRange.PORT_LAST"/> (65534) (0x8000 .. 0xFFFE)</term>
                <description>Dynamic ports used for AMSServers defined with <see cref="F:TwinCAT.Ads.AmsPort.UNFIXEDPORT"/>. This is used by AdsClients which are in
                fact an AMSServer with dynamic port.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Router">
            <summary>
            AMS Router (Port 1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Debugger">
            <summary>
            AMS Debugger (Port 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_TComServer">
            <summary>
            The TCom Server. Dpc or passive level.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_TComServerTask">
            <summary>
            TCom Server Task. RT context.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_TComServer_PL">
            <summary>
            TCom Serve Task. Passive level.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_TcDebugger">
            <summary>
            TwinCAT Debugger
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_TcDebuggerTask">
            <summary>
            TwinCAT Debugger Task
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_LicenseServer">
            <summary>
            The License Server (Port 30)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Logger">
            <summary>
            Logger (Port 100)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.EventLog">
            <summary>
            Event Logger (Port 110)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.DeviceApplication">
            <summary>
            application for coupler (EK), gateway (EL), etc.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.EventLog_UM">
            <summary>
            Event Logger UM
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.EventLog_RT">
            <summary>
            Event Logger RT
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.EventLogPublisher">
            <summary>
            Event Logger Publisher
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_Realtime">
            <summary>
            R0 Realtime (Port 200)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_Trace">
            <summary>
            R0 Trace (Port 290)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_IO">
            <summary>
            R0 IO (Port 300)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NC">
            <summary>
            NC (R0) (Port 500)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NCSAF">
            <summary>
            R0 Satzausführung (Port 501)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NCSVB">
            <summary>
            R0 Satzvorbereitung (Port 511)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_NCINSTANCE">
            <summary>
            Preconfigured Nc2-Nc3-Instance
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_ISG">
            <summary>
            R0 ISG (Port 550)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_CNC">
            <summary>
            R0 CNC (Port 600)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_LINE">
            <summary>
            R0 Line (Port 700)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_PLC">
            <summary>
            R0 PLC (Port 800)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Tc2_Plc1">
            <summary>
            PLC runtime on Port 801 (TwinCAT 2, Runtime System 1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_801">
            <summary>
            PLC runtime on Port 801 (TwinCAT 2, Runtime System 1)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Tc2_Plc2">
            <summary>
            PLC runtime on Port 811 (TwinCAT 2, Runtime System 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_811">
            <summary>
            PLC runtime on Port 811 (TwinCAT 2, Runtime System 2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Tc2_Plc3">
            <summary>
            PLC runtime on Port 821 (TwinCAT 2, Runtime System 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_821">
            <summary>
            PLC runtime on Port 821 (TwinCAT 2, Runtime System 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Tc2_Plc4">
            <summary>
            PLC runtime on Port 831 (TwinCAT 2, Runtime System 4)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_831">
            <summary>
            PLC runtime on Port 831 (TwinCAT 2, Runtime System 4)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_RTS">
            <summary>
            R0 RTS (Port 850)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_851">
            <summary>
            PLC runtime on Port 851 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_852">
            <summary>
            PLC runtime on Port 852 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_853">
            <summary>
            PLC runtime on Port 853 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_854">
            <summary>
            PLC runtime on Port 854 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_855">
            <summary>
            PLC runtime on Port 855 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_856">
            <summary>
            PLC runtime on Port 856 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_857">
            <summary>
            PLC runtime on Port 857 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_858">
            <summary>
            PLC runtime on Port 858 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_859">
            <summary>
            PLC runtime on Port 859 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.PlcRuntime_860">
            <summary>
            PLC runtime on Port 860 (TwinCAT 3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.CamshaftController">
            <summary>
            Camshaft Controller (R0) (Port 900)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_CAMTOOL">
            <summary>
            R0 CAM Tool (Port 950)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R0_USER">
            <summary>
            R0 User (Port 2000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.SystemService">
            <summary>
            System Service (AMSPORT_R3_SYSSERV, 10000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CTRLPROG">
            <summary>
            (Port 10000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSCTRL">
            <summary>
            (Port 10001)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSSAMPLER">
            <summary>
            Port 10100
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_TCPRAWCONN">
            <summary>
            Port 10200
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_TCPIPSERVER">
            <summary>
            Port 10201
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SYSMANAGER">
            <summary>
            Port 10300
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SMSSERVER">
            <summary>
            Port 10400
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_MODBUSSERVER">
            <summary>
            Port 10500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_AMSLOGGER">
            <summary>
            Port 10502
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_S7SERVER">
            <summary>
            Port 10600
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_XMLDATASERVER">
            <summary>
            Port 10600
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_AUTOCONFIG">
            <summary>
            Port 10700
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_PLCCONTROL">
            <summary>
            Port 10800
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_FTPCLIENT">
            <summary>
            Port 10900
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_NCCTRL">
            <summary>
            Port 11000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_NCINTERPRETER">
            <summary>
            Port 11500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_GSTINTERPRETER">
            <summary>
            Port 11600
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_STRECKECTRL">
            <summary>
            Port 12000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CAMCTRL">
            <summary>
            Port 13000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SCOPE">
            <summary>
            Port 14000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CONDITIONMON">
            <summary>
            Port 14100
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_SINECH1">
            <summary>
            Port 15000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CONTROLNET">
            <summary>
            Port 16000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_OPCSERVER">
            <summary>
            Port 17000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_OPCCLIENT">
            <summary>
            Port 17500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_MAILSERVER">
            <summary>
            Port 18000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_EL60XX">
            <summary>
            Port 19000
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_MANAGEMENT">
            <summary>
            Port 19100
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_MIELEHOME">
            <summary>
            Port 19200
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_CPLINK3">
            <summary>
            Port 19300
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_VNSERVICE">
            <summary>
            Port 19500
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.MultiUser">
            <summary>
            Multiuser (Port 19600)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.R3_NI845X">
            <summary>
            (AMSPORT_R3_NI845X,19700)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.HmiServer">
            <summary>
            (AMSPORT_R3_HMISERVER,19800)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.UserModeRuntime">
            <summary>
            (AMSPORT_R3_UMRUNTIME,20000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.UNFIXEDPORT">
            <summary>
            UNFIXEDPORT / Uninitialized
            </summary>
            <remarks>An unfixed port indicates that AMS chooses the port dynamically during connect.
            This is used internally for the AdsClient, every client is getting its own port in the range
            from 0x8000 .. 0x0xFFFE.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.None">
            <summary>
            UNFIXEDPORT / Uninitialized
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.Uninitialized">
            <summary>
            UNFIXEDPORT / Uninitialized
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AmsPort.USEDEFAULT">
            <summary>
            Use default port
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsState">
            <summary>
            Describes the AdsState.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Invalid">
            <summary>
            Ads State is Invalid / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Idle">
            <summary>
            Idle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Reset">
            <summary>
            Reset
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Init">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Run">
            <summary>
            Run
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.SaveConfig">
            <summary>
            Save Configuration
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.LoadConfig">
            <summary>
            Load Configuration
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.PowerFailure">
            <summary>
            Power failure
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.PowerGood">
            <summary>
            Power Good
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Shutdown">
            <summary>
            Shutdown
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Suspend">
            <summary>
            Suspend
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Resume">
            <summary>
            Resume
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Config">
            <summary>
            Config (System is in config mode)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Reconfig">
            <summary>
            Reconfig (System should restart in config mode)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Stopping">
            <summary>
            Stopping
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Incompatible">
            <summary>
            Incompatible
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsState.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsStateCommand">
            <summary>
            Describes the AdsState Commands
            </summary>
            <remarks>This enumeration is to refactor out the commands from the states.</remarks>
            <seealso cref="T:TwinCAT.Ads.AdsState"/>
        </member>
        <member name="F:TwinCAT.Ads.AdsStateCommand.None">
            <summary>
            Ads State is Invalid / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsStateCommand.Reset">
            <summary>
            Resets the AdsServer
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsStateCommand.Start">
            <summary>
            Starts the AdsServer
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsStateCommand.Stop">
            <summary>
            Stops teh AdsServer
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsStateCommand.Reconfig">
            <summary>
            Reconfig (System should restart in config mode)
            </summary>
            <remarks>Actually this command has only a meaning for the SystemService ADS Server (Port 10000)
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsStateCommand.Run">
            <summary>
            Sets an AdsServer to Run
            </summary>
            <remarks>e.g. for the Plc System</remarks>
        </member>
        <member name="T:TwinCAT.Ads.AdsReservedIndexGroup">
            <summary>
            Describes predefined Index-Groups.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.PlcRWIB">
            <summary>
            PlcRWIB (0x4000, 16384)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.PlcRWOB">
            <summary>
            PlcRWOB (0x4010, 16400)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.PlcRWMB">
            <summary>
            PlcRWMB (0x4020, 16416)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.PlcRWRB">
            <summary>
            PlcRWRB (0x4030, 16432)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.PlcRWDB">
            <summary>
            PlcRWDB (0x4040,16448)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolTable">
            <summary>
            SymbolTable (0xF000, 61440)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolName">
            <summary>
            SymbolName (0xF001, 61441)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolValue">
            <summary>
            SymbolValue (0xF002, 61442)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolHandleByName">
            <summary>
            SymbolHandleByName (0xF003, 61443)
            </summary>
            <remarks>
            readLength == 4: handle
            readLength > 4: handle(4) + var size(4) + type decoration(4) +
                            type name length(2) + type name(n) + '\0'(1)
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolValueByName">
            <summary>
            SymbolValueByName (0xF004, 61444)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolValueByHandle">
            <summary>
            SymbolValueByHandle (0xF005, 61445)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolReleaseHandle">
            <summary>
            SymbolReleaseHandle (0xF006, 61446)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolInfoByName">
            <summary>
            SymbolInfoByName (0xF007, 61447)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolVersion">
            <summary>
            SymbolVersion (0xF008, 61448)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolInfoByNameEx">
            <summary>
            SymbolInfoByNameEx (0xF009, 61449)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolDownload">
            <summary>
            SymbolDownload (F00A, 61450)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolUpload">
            <summary>
            SymbolUpload (F00B, 61451)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolUploadInfo">
            <summary>
            SymbolUploadInfo (0xF00C, 61452)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SymbolNote">
            <summary>
            Notification of named handle (0xF010, 61456)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageRWIB">
            <summary>
            read/write input byte(s) (0xF020, 61472)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageRWIX">
            <summary>
            read/write input bit (0xF021, 61473)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageRWOB">
            <summary>
            read/write output byte(s) (0xF030, 61488)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageRWOX">
            <summary>
            read/write output bit (0xF031, 61489)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageClearI">
            <summary>
            write inputs to null (0xF040, 61504)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageClearO">
            <summary>
            write outputs to null (0xF050, 61520)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageRWIOb">
            <summary>
            Read input and write output byte(s) (ADSIGRP_IOIMAGE_RWIOB, 0xF060, ADS_READWRITE)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageWachdog">
            <summary>
            iOffs==1 client protection, pData (4Bytes) = Watchdog in ms (ADSIGRP_IOIMAGE_WATCHDOG, 0xF064)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.IOImageCreate">
            <summary>
            Write IoCreateImageStruct (ADSIGRP_IOIMAGE_CREATE, 0xF068)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.JsonCommand">
            <summary>
            Read/write Json commands (ADSIGRP_JSON,0xF070)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.JsonDomAccessGet">
            <summary>
            Gets the Json Document (ADSIGRP_JSON_DOM_ACCESS_GET, 0xF071, AdsRead)
            </summary>
            <remarks>
            AdsR:  get the whole document -> one 0-terminated string
            AdsRW: W: one 0-terminated string: Length==0 whole document, Length > 0 path to an json object (0-terminated!) R: json content (0-terminated)
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.JsonDomAccessSet">
            <summary>
            Set a whole Json Document (ADSIGRP_JSON_DOM_ACCESS_SET, 0xF072)
            </summary>
            <remarks>
            AdsW: three 0-terminated strings: path+\0, member+\0, jsonText+\0
            strlen(path)==0 -> realtive to root)
            strlen(member)==0 -> exchange existing path
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.JsonDomAccessDelete">
            <summary>
            Json Delete Access (ADSIGRP_JSON_DOM_ACCESS_DEL,0xF073)
            </summary>
            <remarks>
            AdsW: path+\0, member+\0
            strlen(path)==0 AND strlen(member)==0 -> clear document
            strlen(path)==0 -> delete root member
            strlen(member)==0 -> removes path member
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.JsonDomAccessLen">
            <summary>
            Gets the length of the Json Document in bytes (ADSIGRP_JSON_DOM_ACCESS_LEN, 0xF074)
            </summary>
            <remarks>
            AdsR: string length of the whole document (incl. terminating \0) - 4 Bytes
            AdsRW: one 0-terminated string: Length==0 whole document, Length > 0 path to an json object (0-terminated!) R: Length of json object (incl. terminating 0) - 4 Bytes        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SumCommandRead">
            <summary>
            ADS Sum Read Command (ADSIGRP_SUMUP_READ, 0xF080, 61568)
            </summary>
            <remarks>
            AdsRW  IOffs list size or 0 (=0 -> list size == WLength/3*sizeof(ULONG))
            W: {list of IGrp, IOffs, Length} 
            if IOffs != 0 then R: {list of results} and {list of data}
            if IOffs == 0 then R: only data (sum result)
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SumCommandWrite">
            <summary>
            ADS Sum Write Command (ADSIGRP_SUMUP_WRITE, 0xF081, 61569)
            </summary>
            <remarks>
            AdsRW  IOffs list size
            W: {list of IGrp, IOffs, Length} followed by {list of data}
            R: list of results
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SumCommandReadWrite">
            <summary>
            ADS sum Read/Write command (ADSIGRP_SUMUP_READWRITE, 0xF082, 61570)
            </summary>
            <remarks>
            AdsRW  IOffs list size 
            W: {list of IGrp, IOffs, RLength, WLength} followed by {list of data} 
            R: {list of results, RLength} followed by {list of data (returned lengths)}
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SumCommandReadEx">
            <summary>
            ADS sum ReadEx command (ADSIGRP_SUMUP_READEX, 0xF083, 61571)
            </summary>
            <remarks>
            AdsRW  IOffs list size 
            W: {list of IGrp, IOffs, Length} 
            R: {list of results, Length} followed by {list of data (accepted lengths)}
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SumCommandReadEx2">
            <summary>
            ADS sum ReadEx2 command (ADSIGRP_SUMUP_READEX2, 0xF084, 61572)
            </summary>
            <remarks>
            AdsRW  IOffs list size 
            W: {list of IGrp, IOffs, Length} 
            R: {list of results, Length} followed by {list of data (returned lengths)}
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SumCommandAddNotification">
            <summary>
            Register ADS Device Notifications (ADSIGRP_SUMUP_ADDDEVNOTE, 0xF085, 61573)
            </summary>
            <remarks>
            AdsRW  IOffs list size
            W: {list of IGrp, IOffs, Attrib} 
            R: {list of results, handles}
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.SumCommandDelNotification">
            <summary>
            Unregister ADS Device Notifications (ADSIGRP_SUMUP_DELDEVNOTE, 0xF086, 61574)
            </summary>
            <remarks>
            AdsRW  IOffs list size
            W: {list of handles} 
            R: {list of results}
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexGroup.DeviceData">
            <summary>
            DeviceData (0xF100,61696)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsReservedIndexOffset">
            <summary>
            Describes predefined Index-Offsets.
            </summary>
            <exclude/>"
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexOffset.DeviceDataAdsState">
            <summary>
            Device Data ADS State
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexOffset.DeviceDataDeviceState">
            <summary>
            DeviceDataDeviceState
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexOffset.DeviceDataConfigID">
            <summary>
            DeviceDataConfigID
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsReservedIndexOffset.DeviceDataAdsVersionCheck">
            <summary>
            DeviceDataAdsVersionCheck
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsErrorCode">
            <summary>
            ADS request return codes.
            </summary>
            <remarks><para>These ADS Error codes are used within the AmsHeader to indicate ReturnCodes or Error states in ADS Request Responses.
            For example the <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError" /> (value 0) indicates a success.
            Further codes like <see cref="F:TwinCAT.Ads.AdsErrorCode.TargetPortNotFound" /> (the ADSServer port is not found) or <see cref="F:TwinCAT.Ads.AdsErrorCode.ClientSyncTimeOut" /> (the client request wasn't answered within the configured global timeout) indicate communication errors.
            Also ApplicationReturn codes (e.g. <see cref="F:TwinCAT.Ads.AdsErrorCode.ClientNoMoreSymbols" /> (the end of the Server Symbols list is reached) are encoded in this <see cref="T:TwinCAT.Ads.AdsErrorCode" />.
            </para>
            <para>
            For more information please see the  <see href="https://infosys.beckhoff.com/content/1033/tc3_ads_intro/115847307.html?id=7738940192708835096">AMS Header structure</see> described on the Beckhoff Information System.
            </para></remarks>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.None">
            <summary>
            None / Uninitialized.
            <para>Category: Global</para>
            <para>This indicates an uninitialized value.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoError">
            <summary>
            No Error / Succeeded.
            <para>Error code: 0 (0x000).</para>
            <para>Category: Global</para>
            <para>C++: ERR_NOERROR</para>
            <para>The ADS request succeeded.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.Succeeded">
            <summary>
            No Error / Succeeded.
            <para>Error code: 0 (0x000,).</para>
            <para>Category: Global</para>
            <para>C++: ERR_NOERROR</para>
            <para>The ADS request succeeded.</para>
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InternalError">
            <summary>
            Internal Error.
            <para>Error code: 1 (0x001).</para>
            <para>Category: Global</para>
            <para>C++: ERR_INTERNAL</para>
            <para>This error is very generic and there is no further information available about the problem.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoRTime">
            <summary>
            No Realtime available.
            <para>Error code: 2 (0x002).</para>
            <para>Category: Global</para>
            <para>C++: ERR_NORTIME</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.LockedMemoryError">
            <summary>
            Allocation locked memory error.
            <para>Error code: 3 (0x003).</para>
            <para>Category: Global</para>
            <para>C++: ERR_ALLOCLOCKEDMEM</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.MailBoxError">
            <summary>
            Mailbox error.
            <para>Error code: 4 (0x004).</para>
            <para>Category: Global</para>
            <para>C++: ERR_INSERTMAILBOX</para>
            <para>The Mailbox is full – the ADS message could not be sent. Reducing the number of ADS messages per cycle may help.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WrongHMsg">
            <summary>
            Wrong receive HMSG.
            <para>Error code: 5 (0x005).</para>
            <para>Category: Global</para>
            <para>C++: ERR_WRONGRECEIVEHMSG</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TargetPortNotFound">
            <summary>
            The Target port is not found.
            <para>Error code: 6 (0x006).</para>
            <para>Category: Global</para>
            <para>C++: ERR_TARGETPORTNOTFOUND</para>
            <para>The ADS server is not started or is not reachable.
            The target machine could be found, but the Port is not available.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TargetMachineNotFound">
            <summary>
            The Target machine is not found.
            <para>Error code: 7 (0x007).</para>
            <para>Category: Global</para>
            <para>C++: ERR_TARGETMACHINENOTFOUND</para>
            <para>The Target computer / AMS route was not found.
            This Error typically occurs when the Route is not registered at the requesting system.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.UnknownCommandID">
            <summary>
            Unknown command ID.
            <para>Error code: 8 (0x008).</para>
            <para>Category: Global</para>
            <para>C++: ERR_UNKNOWNCMDID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.BadTaskID">
            <summary>
            Bad task ID.
            <para>Error code: 9 (0x009).</para>
            <para>Category: Global</para>
            <para>C++: ERR_BADTASKID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoIO">
            <summary>
            No IO.
            <para>Error code: 10 (0x00A).</para>
            <para>Category: Global</para>
            <para>C++: ERR_NOIO</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.UnknownAmsCommand">
            <summary>
            Unknown AMS command.
            <para>Error code: 11 (0x00B).</para>
            <para>Category: Global</para>
            <para>C++: ERR_UNKNOWNAMSCMD</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.Win32Error">
            <summary>
            Win 32 error.
            <para>Error code: 12 (0x00C).</para>
            <para>Category: Global</para>
            <para>C++: ERR_WIN32ERROR</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortNotConnected">
            <summary>
            The Port is not connected.
            <para>Error code: 13 (0x00D).</para>
            <para>Category: Global</para>
            <para>C++: ERR_PORTNOTCONNECTED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsLength">
            <summary>
            Invalid AMS length.
            <para>Error code: 14 (0x00E).</para>
            <para>Category: Global</para>
            <para>C++: ERR_INVALIDAMSLENGTH</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsNetID">
            <summary>
            Invalid AMS Net ID.
            <para>Error code: 15 (0x00F).</para>
            <para>Category: Global</para>
            <para>C++: ERR_INVALIDAMSNETID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.LowInstallLevel">
            <summary>
            Low Installation level.
            <para>Error code: 16 (0x010).</para>
            <para>Category: Global</para>
            <para>C++: ERR_LOWINSTLEVEL</para>
            <para>Installation level is too low – TwinCAT 2 license error.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoDebug">
            <summary>
            No debug available.
            <para>Error code: 17 (0x011).</para>
            <para>Category: Global</para>
            <para>C++: ERR_NODEBUGINTAVAILABLE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortDisabled">
            <summary>
            Port disabled.
            <para>Error code: 18 (0x012).</para>
            <para>Category: Global</para>
            <para>C++: ERR_PORTDISABLED</para>
            <para>The port is disabled when the TwinCAT system service not in an active state (config, running).
            For the time of a Reconfig/Restart the included TwinCAT Router disables all RouterPorts.
            </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortConnected">
            <summary>
            The Port is already connected.
            <para>Error code: 19 (0x013).</para>
            <para>Category: Global</para>
            <para>C++: ERR_PORTALREADYCONNECTED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncWin32Error">
            <summary>
            AMS Sync Win32 error.
            <para>Error code: 20 (0x014).</para>
            <para>C++: ERR_AMSSYNC_W32ERROR</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.SyncTimeOut">
            <summary>
            AMS Sync timeout.
            <para>Error code: 21 (0x015).</para>
            <para>Category: Global</para>
            <para>C++: ERR_AMSSYNC_TIMEOUT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncAmsError">
            <summary>
            AMS Sync AMS error
            <para>Error code: 22 (0x016).</para>
            <para>Category: Global</para>
            <para>C++: ERR_AMSSYNC_AMSERROR</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsSyncNoIndexMap">
            <summary>
            No index map for AMS Sync available.
            <para>Error code: 23 (0x017).</para>
            <para>Category: Global</para>
            <para>C++: ERR_AMSSYNC_NOINDEXINMAP</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidAmsPort">
            <summary>
            Invalid AMS port.
            <para>Error code: 24 (0x018).</para>
            <para>Category: Global</para>
            <para>C++: ERR_INVALIDAMSPORT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoMemory">
            <summary>
            No memory.
            <para>Error code: 25 (0x019).</para>
            <para>Category: Global</para>
            <para>C++: ERR_NOMEMORY</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TCPSendError">
            <summary>
            TCP send error.
            <para>Error code: 26 (0x01A).</para>
            <para>Category: Global</para>
            <para>C++: ERR_TCPSEND</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.HostUnreachable">
            <summary>
            The Host is unreachable.
            <para>Error code: 27 (0x1B).</para>
            <para>Category: Global</para>
            <para>C++: , ERR_HOSTUNREACHABLE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AmsInvalidFragment">
            <summary>
            Invalid AMS fragment.
            <para>Error code: 28 (0x1C).</para>
            <para>Category: Global</para>
            <para>C++: ERR_INVALIDAMSFRAGMENT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TlsSendError">
            <summary>
            TLS send error – secure ADS connection failed.
            <para>Error code: 29 (0x1D)</para>
            <para>Category: Global</para>
            <para>C++: ERR_TLSSEND</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.AccessDenied">
            <summary>
            Access denied – secure ADS access denied.
            <para>Error code: 30 (0x1E)</para>
            <para>Category: Global</para>
            <para>C++: ERR_ACCESSDENIED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.TcpConnectionRefused">
            <summary>
            TCP Connection refused
            <para>Error code: 31 (0x1F)</para>
            <para>Category: Global</para>
            <para>C++: ERR_TCP_CONN_REFUSED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoLockedMemory">
            <summary>
            Router: no locked memory.
            <para>Error code: 1280 (0x500).</para>
            <para>Category: Router</para>
            <para>C++:  ROUTERERR_NOLOCKEDMEMORY</para>
            <para>Locked memory cannot be allocated.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ResizeMemory">
            <summary>
            Router: The size of the  router memory could not be changed.
            <para>Error code: 1281 (0x501).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_RESIZEMEMORY</para>
            <para>The router memory size could not be changed.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.MailboxFull">
            <summary>
            Router: mailbox full.
            <para>Error code: 1282 (0x502).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_MAILBOXFULL</para>
            <para>The mailbox has reached the maximum number of possible messages.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DebugBoxFull">
            <summary>
            Router: The mailbox has reached the maximum number of possible messages.
            <para>Error code: 1284 (0x504).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_DEBUGBOXFULL</para>
            <para>The Debug mailbox has reached the maximum number of possible messages.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.UnknownPortType">
            <summary>
            Router: Unknown Port Type
            <para>Error code: 1284 (0x504).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_UNKNOWNPORTTYPE</para>
            <para>The port type is unknown.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.RouterNotInitialized">
            <summary>
            Router: Router is not initialized.
            <para>Error code: 1285 (0x505).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_NOTINITIALIZED</para>
            <para>The router is not initialized.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortAlreadyInUse">
            <summary>
            Router: The desired port number is already assigned.
            <para>Error code: 1286 (0x506).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_PORTALREADYINUSE</para>
            <para>The port number is already assigned.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.PortNotRegistered">
            <summary>
            Router: Port not registered.
            <para>Error code: 1287 (0x507).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_NOTREGISTERED</para>
            <para>The port is not registered.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.NoMoreQueues">
            <summary>
            Router: The maximum number of Ports reached.
            <para>Error code: 1288 (0x508).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_NOMOREQUEUES</para>
            <para>The maximum number of ports has been reached.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.InvalidPort">
            <summary>
            Router: The port is invalid.
            <para>Error code: 1289 (0x509).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_INVALIDPORT</para>
            <para>The port is invalid.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.RouterNotActive">
            <summary>
            Router:  TwinCAT Router not active.
            <para>Error code: 1290 (0x50A).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_NOTACTIVATED</para>
            <para>The router is not active.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.RouterFragmentBoxFull">
            <summary>
            Router:  The mailbox has reached the maximum number for fragmented messages.
            <para>Error code: 1291 (0x50B).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_FRAGMENTBOXFULL</para>
            <para>The mailbox has reached the maximum number for fragmented messages.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.RouterFragmentTimeout">
            <summary>
            Router:  A fragment timeout has occurred.
            <para>Error code: 1292 (0x50C).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_FRAGMENTTIMEOUT</para>
            <para>A fragment timeout has occurred.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.RouterPortToBeRemoved">
            <summary>
            Router:  The port is removed..
            <para>Error code: 1293 (0x50D).</para>
            <para>Category: Router</para>
            <para>C++: ROUTERERR_TOBEREMOVED</para>
            <para>The port is removed..</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceError">
            <summary>
            error class &lt;device error"&gt;
            <para>Error code: 1792 (0x700).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_ERROR</para>
            <para></para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceServiceNotSupported">
            <summary>
            The requested Service is not supported by the server.
            <para>Error code: 1793 (0x701).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_SRVNOTSUPP</para>
            <para>This will be returned for example when an not known IndexGroup or IndexOffset is accessed.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidGroup">
            <summary>
            Invalid index group.
            <para>Error code: 1794 (0x702).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDGRP</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidOffset">
            <summary>
            Invalid index offset.
            <para>Error code: 1795 (0x703).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDOFFSET</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidAccess">
            <summary>
            Reading/writing not permitted.
            <para>Error code: 1796 (0x704).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDACCESS</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidSize">
            <summary>
            Parameter size not correct.
            <para>Error code: 1797 (0x705).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDSIZE</para>
            <para>Usually the size of the requested return data (by Read or ReadWrite-request)  doesn't have the correct size and doesn't fit in the reserved read memory buffer.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidData">
            <summary>
            Invalid parameter value(s).
            <para>Error code: 1798 (0x706).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDDATA</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotReady">
            <summary>
            Device is not in a ready state.
            <para>Error code: 1799 (0x707).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_NOTREADY</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceBusy">
            <summary>
            Device is busy.
            <para>Error code: 1800 (0x708).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_BUSY</para>
            <para>This return code indicates that the addressed (ADS) device is actually busy.
            Try the request later on again.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidContext">
            <summary>
            Invalid context (must be in Windows).
            <para>Error code: 1801 (0x709).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDCONTEXT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoMemory">
            <summary>
            The device ran out of memory.
            <para>Error code: 1802 (0x70a).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_NOMEMORY</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidParam">
            <summary>
            Invalid parameter value(s).
            <para>Error code: 1803 (0x70b).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDPARM</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotFound">
            <summary>
            Not found(files, ...).
            <para>Error code: 1804 (0x70c).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_NOTFOUND</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSyntaxError">
            <summary>
            Syntax error in command or file.
            <para>Error code: 1805 (0x70d).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_SYNTAX</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceIncompatible">
            <summary>
            Objects do not match.
            <para>Error code: 1806 (0x70e).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INCOMPATIBLE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceExists">
            <summary>
            Object already exists on device.
            <para>Error code: 1807 (0x70f).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_EXISTS</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSymbolNotFound">
            <summary>
            Symbol not found.
            <para>Error code: 1808 (0x7010).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_SYMBOLNOTFOUND</para>
            <para>The requested Symbol - usually requested by instance path - is not found or not existent.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSymbolVersionInvalid">
            <summary>
            Symbol version is invalid.
            <para>Error code: 1809 (0x711).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_SYMBOLVERSIONINVALID</para>
            <para>This ErrorCode can indicate that a variable handle is invalid.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidState">
            <summary>
            Server is not in a valid state.
            <para>Error code: 1810 (0x712).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDSTATE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceTransModeNotSupported">
            <summary>
            ADS transmode is not supported.
            <para>Error code: 1811 (0x713).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_TRANSMODENOTSUPP</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotifyHandleInvalid">
            <summary>
            Notification handle is invalid.
            <para>Error code: 1812 (0x714).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_NOTIFYHNDINVALID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceClientUnknown">
            <summary>
            Notification client not registered.
            <para>Error code: 1813 (0x715).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_CLIENTUNKNOWN</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoMoreHandles">
            <summary>
            No more notification handles.
            <para>Error code: 1814 (0x716).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_NOMOREHDLS</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidWatchsize">
            <summary>
            Size for watch to big.
            <para>Error code: 1815 (0x717).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDWATCHSIZE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNotInitialized">
            <summary>
            Device is not initialized.
            <para>Error code: 1818 (0x718).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_NOTINIT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceTimeOut">
            <summary>
            Device has a timeout.
            <para>Error code: 1817 (0x719).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_TIMEOUT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceNoInterface">
            <summary>
            Query interface has failed.
            <para>Error code: 1818 (0x71A).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_NOINTERFACE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidInterface">
            <summary>
            Wrong interface required.
            <para>Error code: 1819 (0x71B).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDINTERFACE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidCLSID">
            <summary>
            Class ID is invalid.
            <para>Error code: 1820 (0x71C).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDCLSID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidObjectID">
            <summary>
            Object ID is invalid.
            <para>Category: Device</para>
            <para>Error code: 1821 (0x71D).</para>
            <para>C++: ADSERR_DEVICE_INVALIDOBJID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceRequestIsPending">
            <summary>
            Device: A Request is Pending.
            <para>Error code: 1822 (0x71E).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_PENDING</para>
            <para>This return code indicates that the result of an request is not available yet.
            Try later to access the request result.
            </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceRequestIsAborted">
            <summary>
            Device: Request is Aborted.
            <para>Category: Device</para>
            <para>Error code: 1823 (0x71F).</para>
            <para>C++: ADSERR_DEVICE_ABORTED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSignalWarning">
            <summary>
            Device: Signal warning.
            <para>Error code: 1824 (0x720).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_WARNING</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidArrayIndex">
            <summary>
            Device: Invalid Array Index (ADSERR_DEVICE_INVALIDARRAYIDX)
            <para>Error code: 1825 (0x721).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDARRAYIDX</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSymbolNotActive">
            <summary>
            Device: Symbol not Active
            <para>Error code: 1826 (0x722).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_SYMBOLNOTACTIVE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceAccessDenied">
            <summary>
            Device: Access denied.
            <para>Error code: 1827 (0x723).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_ACCESSDENIED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceMissingLicense">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseNotFound">
            <summary>
            Device: license not found
            <para>Error code: 1828 (0x724).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSENOTFOUND</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseExpired">
            <summary>
            Device: license expired
            <para>Error code: 1829 (0x725).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEEXPIRED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseExceeded">
            <summary>
            Device: license exceeded
            <para>Error code: 1830 (0x726).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEEXCEEDED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseInvalid">
            <summary>
            Device: license invalid 
            <para>Error code: 1831 (0x727).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEINVALID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseSystemId">
            <summary>
            Device: license invalid system id
            <para>Error code: 1832 (0x728).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSESYSTEMID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseNoTimeLimit">
            <summary>
            Device: license not time limited
            <para>Error code: 1833 (0x729).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSENOTIMELIMIT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseFutureIssue">
            <summary>
            Device: license issue time in the future
            <para>Error code: 1834 (0x72A).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEFUTUREISSUE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseTimeToLong">
            <summary>
            Device: license time period to long
            <para>Error code: 1835 (0x72B).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSETIMETOLONG</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceExceptionDuringStartup">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceException">
            <summary>
            Device: Exception in device specific code
            <para>Error code: 1836 (0x72C).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_EXCEPTION</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseDuplicated">
            <summary>
            Device: License file read twice
            <para>Error code: 1837 (0x72D).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEDUPLICATED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceSignatureInvalid">
            <summary>
            Device:  invalid signature
            <para>Error code: 1838 (0x72E).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_SIGNATUREINVALID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceCertificateInvalid">
            <summary>
            Device: public key certificate
            <para>Error code: 1839 (0x72F).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_CERTIFICATEINVALID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseOemNotFound">
            <summary>
            Device: public key of OEM unknown
            <para>Error code: 1840 (0x730).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEOEMNOTFOUND</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseRestricted">
            <summary>
            Device: license not valid for this system id type
            <para>Error code: 1841 (0x731).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSERESTRICTED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicenseDemoDenied">
            <summary>
            Device: trial license denied
            <para>Error code: 1842 (0x732).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEDEMODENIED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidFunctionId">
            <summary>
            Device: function id is invalid
            <para>Error code: 1843 (0x733).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDFNCID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceOutOfRange">
            <summary>
            Device:  a parameter, an index, an iterator, ... is out of range
            <para>Error code: 1844 (0x734).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_OUTOFRANGE</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceInvalidAlignment">
            <summary>
            Device: invalid alignment
            <para>Error code: 1845 (0x735).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_INVALIDALIGNMENT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceLicensePlatform">
            <summary>
            Device: license invalid platform level
            <para>Error code: 1846 (0x736).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_LICENSEPLATFORM</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceContextForwardPassiveLevel">
            <summary>
            Device: wrong context - forward to passive level (port 12)
            <para>Error code: 1847 (0x737).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_FORWARD_PL</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceContextForwardDispatchLevel">
            <summary>
            Device: wrong context - forward to dispatch level (port 10)
            <para>Error code: 1848 (0x738).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_FORWARD_DL</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceContextForwardRealTime">
            <summary>
            Device:  wrong context - forward to real time (port 11)
            <para>Error code: 1849 (0x739).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_FORWARD_RT</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.DeviceCertificateEntrust">
            <summary>
            Device: OEM certificate not in trusted list
            <para>Error code: 1850 (0x73A).</para>
            <para>Category: Device</para>
            <para>C++: ADSERR_DEVICE_CERTIFICATENTRUST</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientError">
            <summary>
            Error class &lt;client error&gt;
            <para>Error code: 1856 (0x740).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_ERROR</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientInvalidParameter">
            <summary>
            Parameter at service is invalid.
            <para></para>Error code: 1857 (0x741).
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_INVALIDPARM</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientListEmpty">
            <summary>
            Polling list is empty.
            <para>Error code: 1858 (0x742).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_LISTEMPTY</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientVariableInUse">
            <summary>
            Variable connection is already in use.
            <para>Error code: 1859 (0x743).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_VARUSED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientDuplicateInvokeID">
            <summary>
            Invoke ID already in use.
            <para>Error code: 1860 (0x744).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_DUPLINVOKEID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncTimeOut">
            <summary>
            Timeout has elapsed.
            <para>Error code: 1861 (0x745).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_SYNCTIMEOUT</para>
            <para>This error occurs when the communication endpoint don't answer within the configured timeout timespan.
            The most likely reasons for this return code is a not available client (system shutdown), network problems or a busy device that runs the client.
            </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientW32Error">
            <summary>
            Error in win32 subsystem.
            <para>Category: Client</para>
            <para>Error code: 1862 (0x746).</para>
            <para>C++: ADSERR_CLIENT_W32ERROR</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientTimeoutInvalid">
            <summary>
            Timeout value is invalid.
            <para>Error code: 1863 (0x747).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_TIMEOUTINVALID</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientPortNotOpen">
            <summary>
            ADS port is not opened.
            <para>Error code: 1864 (0x748).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_PORTNOTOPEN</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientNoAmsAddr">
            <summary>
            No AMS Address.
            <para>Error code: 1865 (0x749).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_NOAMSADDR</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncInternal">
            <summary>
            An internal in ADS sync has occurred.
            <para>Error code: 1872 (0x750).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_SYNCINTERNAL</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientAddHash">
            <summary>
            Hash table overflow.
            <para>Error code: 1873(0x751).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_ADDHASH</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientRemoveHash">
            <summary>
            There are no more symbols in the hash table.
            <para>Error code: 1874 (0x752).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_REMOVEHASH</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientNoMoreSymbols">
            <summary>
            There are no more symbols in cache.
            <para>Error code: 1875 (0x753).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_NOMORESYM</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncResInvalid">
            <summary>
            Obsolete
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientResponseInvalid">
            <summary>
            An invalid response has been received.
            <para>Error code: 1876 (0x754).</para>
            <para>Category: Client</para>
            <para>C++ ADSERR_CLIENT_SYNCRESINVALID</para>
            <para>This error occurs when the client receives invalid response frame for an ADS request. The frame is ignored and
            this error code is returned to the caller.</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientSyncPortLocked">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientPortLocked">
            <summary>
            The synchronous ADS Port is locked.
            <para>Error code: 1877 (0x755).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_SYNCPORTLOCKED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientRequestCancelled">
            <summary>
            The client Request was cancelled (asynchronously)
            <para>Error code: 1878 (0x756).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_REQCANCEL</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.ClientQueueFull">
            <summary>
            The ADS Client queue is full
            <para>Error code: 32768 (0x8000).</para>
            <para>Category: Client</para>
            <para>C++: ADSERR_CLIENT_SYNCPORTLOCKED</para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnAborted">
            <summary>
            Software caused connection abort (0x2745, 10053)
            <para>An established connection was aborted by the software in your host computer,
            possibly due to a data transmission time-out or protocol error.</para>
            <para>Error code: 10053 (0x2745).</para>
            <para>Category: Windows Sockets</para>
            <para>C++: WSAECONNABORTED </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnReset">
            <summary>
            Connection reset by peer. (0x2746, 10054)
            <para>An existing connection was forcibly closed by the remote host.
            This normally results if the peer application on the remote host is suddenly stopped,
            the host is rebooted, the host or remote network interface is disabled, or the remote
            host uses a hard close (see setsockopt for more information on the SO_LINGER option on
            the remote socket).
            This error may also result if a connection was broken due to keep-alive activity detecting
            a failure while one or more operations are in progress. Operations that were in progress
            fail with WSAENETRESET. Subsequent operations fail with WSAECONNRESET.</para>
            <para>Error code: 10054 (0x2746).</para>
            <para>Category: Windows Sockets</para>
            <para>C++: WSAECONNRESET </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnRefused">
            <summary>
            Windows sockets connection refused (0x274d, 10061)
            <para>No connection could be made because the target computer actively refused it.
            This usually results from trying to connect to a service that is inactive on
            the foreign host—that is, one with no server application running.</para>
            <para>Error code: 10061 (0x274d).</para>
            <para>Category: Windows Sockets</para>
            <para>C++: WSAECONNREFUSED </para>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_Interrupted">
            <summary>
            A blocking System.Net.Sockets.Socket call was canceled.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_AccessDenied">
            <summary>
            An attempt was made to access a System.Net.Sockets.Socket in a way that is forbidden
            by its access permissions.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_Fault">
            <summary>
            An invalid pointer address was detected by the underlying socket provider.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_InvalidArgument">
            <summary>
            An invalid argument was supplied to a System.Net.Sockets.Socket member
            </summary>
            <exclude/>
            <summary>
            The interrupted
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_TooManyOpenSockets">
            <summary>
            There are too many open sockets in the underlying socket provider.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_WouldBlock">
            <summary>
            An operation on a nonblocking socket cannot be completed immediately.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_InProgress">
            <summary>
            A blocking operation is in progress.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_AlreadyInProgress">
            <summary>
            The nonblocking System.Net.Sockets.Socket already has an operation in progress.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NotSocket">
            <summary>
            A System.Net.Sockets.Socket operation was attempted on a non-socket.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_DestinationAddressRequired">
            <summary>
            A required address was omitted from an operation on a System.Net.Sockets.Socket.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_MessageSize">
            <summary>
            The datagram is too long.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ProtocolType">
            <summary>
            The protocol type is incorrect for this System.Net.Sockets.Socket.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ProtocolOption">
            <summary>
            An unknown, invalid, or unsupported option or level was used with a System.Net.Sockets.Socket.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ProtocolNotSupported">
            <summary>
             The protocol is not implemented or has not been configured.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_SocketNotSupported">
            <summary>
            The support for the specified socket type does not exist in this address family.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_OperationNotSupported">
            <summary>
            The address family is not supported by the protocol family.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ProtocolFamilyNotSupported">
            <summary>
            The protocol family is not implemented or has not been configured.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_AddressFamilyNotSupported">
            <summary>
            The address family specified is not supported. This error is returned if the
            IPv6 address family was specified and the IPv6 stack is not installed on the
            local machine. This error is returned if the IPv4 address family was specified
            and the IPv4 stack is not installed on the local machine.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_AddressAlreadyInUse">
            <summary>
            Only one use of an address is normally permitted.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_AddressNotAvailable">
            <summary>
            The selected IP address is not valid in this context.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NetworkDown">
            <summary>
            The network is not available.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NetworkUnreachable">
            <summary>
            No route to the remote host exists.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NetworkReset">
            <summary>
            The application tried to set System.Net.Sockets.SocketOptionName.KeepAlive on
             a connection that has already timed out.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnectionAborted">
            <summary>
            The connection was aborted by .NET or the underlying socket provider.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnectionReset">
            <summary>
            The connection was reset by the remote peer.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NoBufferSpaceAvailable">
            <summary>
            No free buffer space is available for a System.Net.Sockets.Socket operation.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_IsConnected">
            <summary>
            The System.Net.Sockets.Socket is already connected.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NotConnected">
            <summary>
            The application tried to send or receive data, and the System.Net.Sockets.Socket
            is not connected.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_Shutdown">
            <summary>
            A request to send or receive data was disallowed because the System.Net.Sockets.Socket
            has already been closed.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_TimedOut">
            <summary>
            The connection attempt timed out, or the connected host has failed to respond.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnectionRefused">
            <summary>
            The remote host is actively refusing a connection.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_HostDown">
            <summary>
            The operation failed because the remote host is down.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_HostUnreachable">
            <summary>
            There is no network route to the specified host.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_ProcessLimit">
             <summary>
            Too many processes are using the underlying socket provider.
             </summary>
             <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_SystemNotReady">
            <summary>
            The network subsystem is unavailable.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_VersionNotSupported">
            <summary>
            The version of the underlying socket provider is out of range.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NotInitialized">
            <summary>
            The underlying socket provider has not been initialized.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_Disconnecting">
            <summary>
            A graceful shutdown is in progress.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_TypeNotFound">
            <summary>
            The specified class was not found.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_HostNotFound">
            <summary>
            No such host is known. The name is not an official host name or alias.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_TryAgain">
            <summary>
            The name of the host could not be resolved. Try again later.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NoRecovery">
            <summary>
            The error is unrecoverable or the requested database cannot be located.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.AdsErrorCode.WSA_NoData">
            <summary>
            The requested name or IP address was not found on the name server.
            </summary>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.IndexGroupSymbolAccess">
            <summary>
            ADS IndexGroups defined for ADS Symbol Handling
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.HandleByName">
            <summary>
            Handle by SymbolName (ADSIGRP_SYM_HNDBYNAME, 0xF003)
            </summary>
            <remarks>
            <para>
            <code>
            readLength == 4: handle
            readLength > 4: handle(4) + var size(4) + type decoration(4) +
                            type name length(2) + type name(n) + '\0'(1)
            </code>
            </para>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_HNDBYNAME</term>
            <term>0xF003</term>
            <term>61443</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ValueByName">
            <summary>
            Value By SymbolName (ADSIGRP_SYM_VALBYNAME,0xF004,61444)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_VALBYNAME</term>
            <term>0xF004</term>
            <term>61444</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ValueByHandle">
            <summary>
            Value By handle(ADSIGRP_SYM_VALBYHND, 0xF005,61445)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_VALBYHND</term>
            <term>0xF005</term>
            <term>61445</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ReleaseHandle">
            <summary>
            RELEASEHND (ADSIGRP_SYM_RELEASEHND, 0xF006, 61446)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_RELEASEHND</term>
            <term>0xF006</term>
            <term>61446</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.SymbolByName">
            <summary>
            Symbol Info by Name (ADSIGRP_SYM_INFOBYNAME,0xF007, 61447)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_INFOBYNAME</term>
            <term>0xF007</term>
            <term>61447</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.SymbolVersion">
            <summary>
            Get Symbol Version (ADSIGRP_SYM_VERSION, 0xF008, 61448)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_VERSION</term>
            <term>0xF008</term>
            <term>61448</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.SymbolByNameEx">
            <summary>
            Get SymbolInfo by Name (extended version) (ADSIGRP_SYM_INFOBYNAMEEX, 0xF009, 61449)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_INFOBYNAMEEX</term>
            <term>0xF009</term>
            <term>61449</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.DownloadSymbols">
            <summary>
            Symbol Download (ADSIGRP_SYM_DOWNLOAD, 0xF00A, 61450)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_DOWNLOAD</term>
            <term>0xF00A</term>
            <term>61450</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.UploadSymbols">
            <summary>
            UploadSymbols (ADSIGRP_SYM_UPLOAD, 0xF00B, 61451)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_UPLOAD</term>
            <term>0xF00B</term>
            <term>61451</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.UploadInfo">
            <summary>
            Symbol Upload Info (ADSIGRP_SYM_UPLOAD, 0xF00C, 61452)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_UPLOADINFO</term>
            <term>0xF00C</term>
            <term>61452</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.DownloadSymbols2">
            <summary>
            SymbolDownload (2nd version) (ADSIGRP_SYM_DOWNLOAD2, 0xF00D, 61453)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_DOWNLOAD2</term>
            <term>0xF00D</term>
            <term>61453</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.UploadTypes">
            <summary>
            DT_UPLOAD (ADSIGRP_SYM_DT_UPLOAD, 0xF00E, 61454)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_DT_UPLOAD</term>
            <term>0xF00E</term>
            <term>61454</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.UploadInfo2">
            <summary>
            Symbol Upload Info (2nd Version) (ADSIGRP_SYM_UPLOADINFO2, 0xF00F, 61455)
            </summary>/
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_UPLOADINFO2</term>
            <term>0xF00F</term>
            <term>61455</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.Notification">
            <summary>
            Notification of named handle (ADSIGRP_SYM_SYMNOTE, 0xF010, 61456)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_SYMNOTE</term>
            <term>0xF010</term>
            <term>61456</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.DataTypeByName">
            <summary>
            DataType Info by Name (ADSIGRP_SYM_DT_INFOBYNAMEEX, 0xF011,61457)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_DT_INFOBYNAMEEX</term>
            <term>0xF011</term>
            <term>61457</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.AddressByHandle">
            <summary>
            Address by handle (ADSIGRP_SYM_ADDRBYHND, 0xF012,61458)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_ADDRBYHND</term>
            <term>0xF012</term>
            <term>61458</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.PointerSupport">
            <summary>
            Symbol Pointer Support (ADSIGRP_SYM_POINTER_SUPPORT, 0xF013, 61459)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_POINTER_SUPPORT</term>
            <term>0xF013</term>
            <term>61459</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.PointerAccess">
             <summary>
            Pointer Access (ADSIGRP_SYM_POINTER_ACCESS, 0xF014, 61460)
             </summary>
             <remarks>
             Dummy IndexGroup for dereferenced pointer: read or write access via this IndexGroup is not possible.
             <list type="table">
             <listheader>
             <term>C++ Name</term>
             <term>Hex</term>
             <term>Dec</term>
             </listheader>
             <item>
             <term>ADSIGRP_SYM_POINTER_ACCESS</term>
             <term>0xF014</term>
             <term>61460</term>
             </item>
             </list>        
             </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ReferenceSupport">
            <summary>
            Reference Support (ADSIGRP_SYM_REFERENCE_SUPPORT, 0xF015, 61461)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_REFERENCE_SUPPORT</term>
            <term>0xF015</term>
            <term>61461</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ReferenceAccess">
            <summary>
            Reference Access (ADSIGRP_SYM_REFERENCE_ACCESS, 0xF016, 61462)
            </summary>
            <remarks>
            Dummy IndexGroup for dereferenced a reference: read or write access via this IndexGroup is not possible.
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRADSIGRP_SYM_REFERENCE_ACCESSP_SYM_</term>
            <term>0xF016</term>
            <term>61462</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ValueByHandleMasked">
            <summary>
            Value Handle with Mask (ADSIGRP_SYM_VALBYHND_WITHMASK, 0xF018, 61464)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_VALBYHND_WITHMASK</term>
            <term>0xF018</term>
            <term>61464</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.NoSubSymbolAccess">
            <summary>
            No Access to SubSymbol (ADSIGRP_SYM_NOACCESS_TO_SUBSYM, 0xF019, 61465)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_NOACCESS_TO_SUBSYM</term>
            <term>0xF019</term>
            <term>61465</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.PointerBitAccess">
            <summary>
            POINTER with BitAccess (ADSIGRP_SYM_POINTER_BITACCESS, 0xF01A, 61466)
            </summary>
            <remarks>Dummy IndexGroup for dereferenced pointer to bit access. Read or write access via this IndexGroup is not possible.
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_POINTER_BITACCESS</term>
            <term>0xF01A</term>
            <term>61466</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ReferenceBitAccess">
            <summary>
            Reference with BitAccess (ADSIGRP_SYM_REFERENCE_BITACCESS, 0xF01B, 61467)
            </summary>
            <remarks>
            Dummy IndexGroup for dereferenced a reference to bit access. Read or write access via this IndexGroup is not possible.
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_REFERENCE_BITACCESS</term>
            <term>0xF01B</term>
            <term>61467</term>
            </item>
            </list>        
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.Download3">
            <summary>
            Download AdsSymbolUpAndDownloadHeader3 (ADSIGRP_SYM_DOWNLOAD3, 0xF01C, 61468)
            </summary>
            <remarks>
            AdsSymbolUpAndDownloadHeader3
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_DOWNLOAD3</term>
            <term>0xF01C</term>
            <term>61468</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ForwardAccess">
            <summary>
            (ADSIGRP_SYM_FORWARD_ACCESS, 0xF01D, 61469)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_FORWARD_ACCESS</term>
            <term>0xF01D</term>
            <term>61469</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.ForwardByHandle">
            <summary>
            (ADSIGRP_SYM_FORWARD_BYHND, 0xF01E, 61470)
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_FORWARD_BYHND</term>
            <term>0xF01E</term>
            <term>61470</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.IndexGroupSymbolAccess.XAFObjectID">
            <summary>
            (ADSIGRP_SYM_XAF_OBJECTID, 0xF01F, 61471)
            </summary>
            <remarks>
            IndexOffset contains XAF ObjectID
            <list type="table">
            <listheader>
            <term>C++ Name</term>
            <term>Hex</term>
            <term>Dec</term>
            </listheader>
            <item>
            <term>ADSIGRP_SYM_XAF_OBJECTID</term>
            <term>0xF01F</term>
            <term>61471</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.Credentials">
            <summary>
            Credentials class
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Credentials.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Credentials"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:TwinCAT.Ads.Credentials.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Credentials"/> class.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="clearTextPassword">The clear text password.</param>
        </member>
        <member name="P:TwinCAT.Ads.Credentials.UserName">
            <summary>
            Gets the User Name
            </summary>
            <value>The name of the user.</value>
        </member>
        <member name="P:TwinCAT.Ads.Credentials.Password">
            <summary>
            Gets the password as Secure Strings
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:TwinCAT.Ads.Credentials.CXDefault">
            <summary>
            Gets the CX Default User Administrator credentials (Password '1')
            </summary>
            <value>The C x_ DEFAULT.</value>
        </member>
        <member name="M:TwinCAT.Ads.Credentials.GetSecureString(System.String)">
            <summary>
            Creates a Secure string out of the unsecure (clear text) password.
            </summary>
            <param name="clearTextPassword">Password (unsecure)</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.Ads.Credentials.Empty">
            <summary>
            Creates Empty Credentials (No UserName, Empty Password)
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:TwinCAT.Ads.Native.FingerprintConverter">
            <summary>
            Converter class for AdsSecure Fingerprint information
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.Native.FingerprintConverter.FingerprintSize">
            <summary>
            Gets the size of the fingerprint.
            </summary>
            <value>The size of the fingerprint.</value>
        </member>
        <member name="M:TwinCAT.Ads.Native.FingerprintConverter.Convert(System.String)">
            <summary>
            Converts the specified hexadecimal string to the fingerprint byte information.
            </summary>
            <param name="hex">The hexadecimal.</param>
            <returns>System.Byte[].</returns>
            <exception cref="T:System.ArgumentNullException">hex</exception>
            <exception cref="T:System.ArgumentException">Fingerprint is not of size '{_fingerprintSize}'! - hex</exception>
            <exception cref="T:System.FormatException">Cannot parse Fingerprint!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Native.FingerprintConverter.TryConvert(System.String,System.Byte[]@)">
            <summary>
            Tries to convert the fingerprint hex string to byte array
            </summary>
            <param name="hex">The hexadecimal.</param>
            <param name="bytes">The bytes.</param>
            <returns><c>true</c> if the hex string could be converted, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.in_addr">
            <summary>
            IPAddress marshaled over ADS
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.in_addr.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.in6_addr"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">ip</exception>
        </member>
        <member name="M:TwinCAT.Ads.Native.in_addr.#ctor(System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="ipAddr"></param>
        </member>
        <member name="M:TwinCAT.Ads.Native.in_addr.#ctor(System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="ipAddr"></param>
        </member>
        <member name="M:TwinCAT.Ads.Native.in_addr.AsIPAddress">
            <summary>
            Returns the IPAddress representation
            </summary>
            <returns>IPAddress.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.in_addr.GetBytes">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.Native.sockaddr_in"/> is byte array representation
            </summary>
            <returns>System.Byte[].</returns>
        </member>
        <member name="P:TwinCAT.Ads.Native.in_addr.MarshalSize">
            <summary>
            Gets the Marshal size of this <see cref="T:TwinCAT.Ads.Native.sockaddr_in"/>
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="T:TwinCAT.Ads.Native.in6_addr">
            <summary>
            Tcp/IP V6 Win API IPAddress structure
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.in6_addr.#ctor(System.Net.IPAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.in6_addr"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">ip</exception>
        </member>
        <member name="M:TwinCAT.Ads.Native.in6_addr.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.in6_addr"/> class.
            </summary>
            <param name="span">The span.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">span</exception>
        </member>
        <member name="M:TwinCAT.Ads.Native.in6_addr.GetByte(System.Int32)">
            <summary>
            Gets the raw bytes.
            </summary>
            <param name="idx">The index.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.in6_addr.GetWord(System.Int32)">
            <summary>
            Gets an indexed word of the raw data.
            </summary>
            <param name="idx">The index.</param>
            <returns>System.UInt16.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.in6_addr.GetBytes">
            <summary>
            Gets the bytes.
            </summary>
            <returns>ReadOnlySpan&lt;System.Byte&gt;.</returns>
        </member>
        <member name="P:TwinCAT.Ads.Native.in6_addr.MarshalSize">
            <summary>
            Gets the marshal size of this struct.
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="M:TwinCAT.Ads.Native.in6_addr.AsIPAddress">
            <summary>
            Gets the IPAddress representation
            </summary>
            <returns>IPAddress.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.sockaddr_in6">
            <summary>
            Tcp/IP V6 socket address
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.Native.sockaddr_in6.MarshalSize">
            <summary>
            Gets the MarshalSize
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in6.sin6_family">
            <summary>
            The address family
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in6.sin6_port">
            <summary>
            The port
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in6.sin6_flowinfo">
            <summary>
            The flow info
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in6.sin6_addr">
            <summary>
            The address in network bytes
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in6.sin6_scope_id">
            <summary>
            The scopeid
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.sockaddr_in6.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.sockaddr_in6"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.sockaddr_in6.#ctor(System.Net.IPAddress,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.sockaddr_in6"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <param name="port">The port.</param>
        </member>
        <member name="P:TwinCAT.Ads.Native.sockaddr_in6.IPAddress">
            <summary>
            Gets the ip address.
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:TwinCAT.Ads.Native.sockaddr_in6.Port">
            <summary>
            Gets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:TwinCAT.Ads.Native.sockaddr_in">
            <summary>
            Class sockaddr_in.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.Native.sockaddr_in.MarshalSize">
            <summary>
            Gets the Marshal size
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in.sin_family">
            <summary>
            The address family
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in.sin_port">
            <summary>
            The Port
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in.sin_addr">
            <summary>
            The Address
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.sockaddr_in.sin_zero">
            <summary>
            Zero
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.sockaddr_in.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.sockaddr_in"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.sockaddr_in.#ctor(System.Net.IPAddress,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.sockaddr_in"/> class.
            </summary>
            <param name="ip">The ip.</param>
            <param name="port">The port.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">ip</exception>
        </member>
        <member name="P:TwinCAT.Ads.Native.sockaddr_in.IPAddress">
            <summary>
            Gets the ip address (IPV4 Family here)
            </summary>
            <value>The ip address.</value>
        </member>
        <member name="P:TwinCAT.Ads.Native.sockaddr_in.Port">
            <summary>
            Gets the port of this socket address in Host Order
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:TwinCAT.Ads.Native.SockAddrInMarshaler">
            <summary>
            Class SockAddrInMarshaler.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.SockAddrInMarshaler.Marshal(TwinCAT.Ads.Native.sockaddr_in6,System.Span{System.Byte})">
            <summary>
            Marshals the specified socket address.
            </summary>
            <param name="str">The address.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.SockAddrInMarshaler.Marshal(TwinCAT.Ads.Native.sockaddr_in,System.Span{System.Byte})">
            <summary>
            Marshals the specified socket address
            </summary>
            <param name="str">The address.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.SockAddrInMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.sockaddr_in@)">
            <summary>
            Unmarshals the socket address.
            </summary>
            <param name="data">The data.</param>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.SockAddrInMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.sockaddr_in6@)">
            <summary>
            Unmarshals the socket address.
            </summary>
            <param name="data">The data.</param>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.SockAddrInMarshaler.GetAddressFamily(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets the address family.
            </summary>
            <param name="data">The data.</param>
            <returns>AddressFamily.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddNetId">
            <summary>
            Assigns a SubRoute
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddNetId.netId">
            <summary>
            The AmsNetId
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddNetId.reserved1">
            <summary>
            Reserved Bytes USHORT[5]
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddNetId.dwFlags">
            <summary>
            Flags (DWORD)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddNetId.cbName">
            <summary>
            Length of name including \0 (ULONG)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddNetId.name">
            <summary>
            The name including \0
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddNetIdMarshaller">
            <summary>
            Marshaller class for additional NetId structs <see cref="T:TwinCAT.Ads.Native.AdsSysAddNetId"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddNetIdMarshaller.Marshal(TwinCAT.Ads.Native.AdsSysAddNetId,System.Span{System.Byte})">
            <summary>
            Marshals the specified object to a byte array.
            </summary>
            <param name="obj">The object.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddNetIdMarshaller.MarshalSize(TwinCAT.Ads.Native.AdsSysAddNetId)">
            <summary>
            Gets the ADS marshal size of the <see cref="T:TwinCAT.Ads.Native.AdsSysAddNetId"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddNetIdMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.AdsSysAddNetId@)">
            <summary>
            Unmarshals the specified data to the <see cref="T:TwinCAT.Ads.Native.AdsSysAddNetId" /> structure.
            </summary>
            <param name="data">The data.</param>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddRemoteRequest">
            <summary>
            Internal Representiation of an Route object (AdsSysAddRemote)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.netId">
            <summary>
            The AmsNetID
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.nTransType">
            <summary>
            The transport type
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.dwFlags">
            <summary>
            Route flags (DWORD)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.nTimeout">
            <summary>
            The Communication Timeout of the route (ULONG)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.nMaxFragment">
            <summary>
            Maximum FragmentSize (in KB)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.reserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.reserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.reserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.cbAddress">
            <summary>
            Address string length (including \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.cbName">
            <summary>
            Name string length (including \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.cbAddNetIds">
            <summary>
            Number of additional NetIds
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.address">
            <summary>
            The Route address
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.name">
            <summary>
            The Route name
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.addNetIds">
            <summary>
            AdditionalNetIds.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.tls">
            <summary>
            Secure transport layer settings (if <see cref="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.TLS"/> is set.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteRequest.remoteNetId">
            <summary>
            The Remote NetId (if ADSSYSADDREMOTEFLAG_REMOTENETID is set).
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag">
            <summary>
            Enum AdsAddRemoteTlsFlag (ADSSYSADDREMOTETLSFLAG)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.CaseSensitive">
            <summary>
            CaseSensitive (ADSSYSADDREMOTETLSFLAG_CASESENSITIVE)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.UserPassword">
            <summary>
            User password (ADSSYSADDREMOTETLSFLAG_USERPWD)
            </summary>
            <remarks>
            if set szIdentity == username
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.ServerInfo">
            <summary>
            Save only Server Info (ADSSYSADDREMOTETLSFLAG_SERVERINFO)
            </summary>
            <remarks>
            save only serverinfo (e.g. fingerprint but not IP address of peer)
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.SSC">
            <summary>
            Self Signed Certificate (ADSSYSADDREMOTETLSFLAG_SSC)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.PSK">
            <summary>
            PresharedKey (ADSSYSADDREMOTETLSFLAG_PSK)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.SCA">
            <summary>
            Shared Common Authority (ADSSYSADDREMOTETLSFLAG_SCA)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.IgnoreCN">
            <summary>
            Ignore Common Name (ADSSYSADDREMOTETLSFLAG_IGNORECN)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsAddRemoteTlsFlag.Mask_Type">
            <summary>
            The Sign type mask.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddRemoteTls">
            <summary>
            Transport Layer Security (TLS) settings object.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.dwFlags">
            <summary>
            TLS Flags
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.cbStart">
            <summary>
            Number of start bytes (?)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.cbIdentity">
            <summary>
            Number of chars in Identity string (incl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.cbPwd">
            <summary>
            Number of chars in Password string (incl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.cbKey">
            <summary>
            Number of bytes in the key array.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.cbHost">
            <summary>
            Number of chars in the Hosts string (incl. \0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.bStart">
            <summary>
            Start Bytes (?)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.szIdentity">
            <summary>
            Identity String
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.szPassword">
            <summary>
            Password String (clearText!!!)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.key">
            <summary>
            The Key
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteTls.szHost">
            <summary>
            The HostName.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.RemoteTlsInfo">
            <summary>
            Class RemoteTlsInfo.
            </summary>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddRemoteTlsFactory">
            <summary>
            Factory creating <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteTls"/> structures.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteTlsFactory.CreatePSK(TwinCAT.Ads.Credentials,TwinCAT.RoutePersistanceType)">
            <summary>
            Creates an Shared Common Authority TLS Settings object (SCA)
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="routeType">Type of the route.</param>
            <returns>AdsSysAddRemoteTls.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteTlsFactory.CreatePSK(TwinCAT.Ads.Credentials,TwinCAT.RoutePersistanceType,System.Byte[])">
            <summary>
            Creates an Shared Common Authority TLS Settings object (SCA)
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="routeType">Type of the route.</param>
            <param name="preSharedKey">The pre shared key.</param>
            <returns>AdsSysAddRemoteTls.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteTlsFactory.CreateSCA(System.Boolean)">
            <summary>
            Creates an Shared Common Authority TLS Settings object (SCA)
            </summary>
            <param name="ignoreCommonName">if set to <c>true</c> ignore common name.</param>
            <returns>AdsSysAddRemoteTls.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteTlsFactory.CreateSSC(System.String,TwinCAT.Ads.Credentials,TwinCAT.RoutePersistanceType)">
            <summary>
            Creates an SelfSigned Certified configured TLS settings object (SSC)
            </summary>
            <param name="fingerPrint">The finger print.</param>
            <param name="credentials">The credentials.</param>
            <param name="routeType">Type of the route.</param>
            <returns>AdsSysAddRemoteTls.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddRemoteTlsMarshaller">
            <summary>
            Marshaller class for <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteTls"/> objects.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteTlsMarshaller.MarshalSize(TwinCAT.Ads.Native.AdsSysAddRemoteTls)">
            <summary>
            Gets the marshalling size of the <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteTls"/> object.
            </summary>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteTlsMarshaller.Marshal(TwinCAT.Ads.Native.AdsSysAddRemoteTls,System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Marshals the <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteTls" /> object to byte array.
            </summary>
            <param name="str">The string.</param>
            <param name="data">The data.</param>
            <param name="hash">The hash.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteTlsMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.AdsSysAddRemoteTls@)">
            <summary>
            Unmarshal the specified byte data to the <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteTls" /> object.
            </summary>
            <param name="writeable">The writeable.</param>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
            <remarks>In this case the span is not readonly, because the password is nulled out
            as soon as possible for security reasons.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddRemoteMarshaller">
            <summary>
            Ads Marshaller for the <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteRequest"/> structure
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.AdsSysAddRemoteRequest@)">
            <summary>
            Unmarshals the <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteRequest" /> structure from byte array.
            </summary>
            <param name="data">The data.</param>
            <param name="obj">The object.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteMarshaller.SizeOf(TwinCAT.Ads.Native.AdsSysAddRemoteRequest)">
            <summary>
            Determines the marshalled size of the <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteRequest"/>
            </summary>
            <param name="obj">The structure to be marshalled.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteMarshaller.SizeOfHeader(TwinCAT.Ads.Native.AdsSysAddRemoteRequest)">
            <summary>
            Determines the marshalled size of the <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteRequest"/>
            </summary>
            <param name="obj">The structure to be marshalled.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteMarshaller.createHash(TwinCAT.Ads.Native.AdsSysAddRemoteRequest)">
            <summary>
            Creates the hash.
            </summary>
            <param name="requestData">The request data.</param>
            <returns>System.Nullable&lt;System.Byte&gt;[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteMarshaller.MarshalHeader(TwinCAT.Ads.Native.AdsSysAddRemoteRequest,System.Span{System.Byte})">
            <summary>
            Marshals the specified object for ADS into the specified byte array.
            </summary>
            <param name="obj">The object.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.AdsSysAddRemoteMarshaller.Marshal(TwinCAT.Ads.Native.AdsSysAddRemoteRequest,System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
            Marshals the specified object for ADS into the specified byte array.
            </summary>
            <param name="obj">The object.</param>
            <param name="data">The data.</param>
            <param name="hash">The hash.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">obj</exception>
        </member>
        <member name="T:TwinCAT.Ads.Native.AdsSysAddRemoteFlag">
            <summary>
            Flag parameters on an <see cref="T:TwinCAT.Ads.Native.AdsSysAddRemoteRequest"/> structure.
            </summary>
            <exclude></exclude>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.None">
            <summary>
            Uninitialized / None
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.Temporary">
            <summary>
            Temporary Route (ADSSYSADDREMOTEFLAG_TEMPORARY)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.HostName">
            <summary>
            Hostname instead of IP Address destination (ADSSYSADDREMOTEFLAG_HOSTNAME)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.NoOverride">
            <summary>
            No override (ADSSYSADDREMOTEFLAG_NOOVERRIDE)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.TLS">
            <summary>
            TLS (ADSSYSADDREMOTEFLAG_TLS)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.OwnFile">
            <summary>
            Own File (ADSSYSADDREMOTEFLAG_OWNFILE)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.IPAddress">
            <summary>
            Use IP Address instead of HostName (ADSSYSADDREMOTEFLAG_IPADDR)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.FromUdpDiscovery">
            <summary>
            AddRemoteComputer() called from UDP Discovery - do not call VerifyConnected (no ADS secure) (ADSSYSADDREMOTEFLAG_FROM_UDP_DISCO)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.Unidirectional">
            <summary>
            Unidirectional, only allows ADS responses, Notification Requestes and ReadState requests. (ADSSYSADDREMOTEFLAG_UNIDIRECTIONAL)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.RemoteNetId">
            <summary>
            Specifying an AmsNatRoute (ADSSYSADDREMOTEFLAG_REMOTENETID)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.AdsSysAddRemoteFlag.Mask_Internal">
            <summary>
            Internal (Mask, ADSSYSADDREMOTEFLAG_INTERNAL)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryServiceID">
            <summary>
            Discovery ServiceID (EUDP_DISCO_SERVICEID)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryServiceID.ServerInfo">
            <summary>
            Gets the ServerInfo(UDP_DISCO_SERVICEID_SERVERINFO)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryServiceID.AddRoute">
            <summary>
            Adds a route (UDP_DISCO_SERVICEID_ADDROUTE)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryServiceID.DeleteRoute">
            <summary>
            Deletes a route (UDP_DISCO_SERVICEID_DELROUTE)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryServiceID.ReadRoutes">
            <summary>
            Reads / Determines the Routes (UDP_DISCO_SERVICEID_READROUTES)
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryTagID">
            <summary>
            Enum UDP_DISCO_TAGID
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.Result">
            <summary>
            UDP_DISCO_TAG_RESULT = 1,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.Password">
            <summary>
            UDP_DISCO_TAG_PASSWORD = 2,     // incl. \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.TcVersion">
            <summary>
            UDP_DISCO_TAG_TCVERSION = 3,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.TargetOs">
            <summary>
            UDP_DISCO_TAG_TARGETOS = 4,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.ComputerName">
            <summary>
            UDP_DISCO_TAG_COMPUTERNAME = 5,     // incl. \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.Description">
            <summary>
            UDP_DISCO_TAG_DESCRIPTION = 6,      // incl. \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.NetId">
            <summary>
            UDP_DISCO_TAG_NETID = 7,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.IPAddress">
            <summary>
            UDP_DISCO_TAG_IPADDR = 8,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.Temporary">
            <summary>
            UDP_DISCO_TAG_TEMPORARY = 9,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.RouteIndex">
            <summary>
            UDP_DISCO_TAG_ROUTEINDEX = 10,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.RouteInfo">
            <summary>
            UDP_DISCO_TAG_ROUTEINFO = 11,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.RouteName">
            <summary>
            UDP_DISCO_TAG_ROUTENAME = 12,       // incl. \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.UserName">
            <summary>
            UDP_DISCO_TAG_USERNAME = 13,        // incl. \0
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.PasswordAes">
            <summary>
            UDP_DISCO_TAG_PASSWORD_AES = 14,        // incl. \0 size is multiple of 16
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.UsernameAes">
            <summary>
            UDP_DISCO_TAG_USERNAME_AES = 15,        // incl. \0 size is multiple of 16
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.MaxFragment">
            <summary>
            UDP_DISCO_TAG_MAXFRAGMENT = 16,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.SecurityFlags">
            <summary>
            UDP_DISCO_TAG_SECURITYFLAGS = 17,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.Fingerprint">
            <summary>
            UDP_DISCO_TAG_SSCERT_FINGERPRINT = 18,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.SearchServer">
            <summary>
            UDP_DISCO_TAG_SEARCH_SERVER = 19,
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.FQDNName">
            <summary>
            UDP_DISCO_TAG_FQDNNAME = 20,        // incl. \0
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryTag">
            <summary>
            UpdDiscoTag structure
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTag.tagId">
            <summary>
            Tag ID
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTag.tagLen">
            <summary>
            Length of the included subtag
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryTag.tag">
            <summary>
            Sub Tag
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTag.GetNativeSizeOf">
            <summary>
            Native Size of the Tag (Marshaled over ADS)
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryTagFactory">
            <summary>
            Class UdpDiscoTagFactory.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.Create(TwinCAT.Ads.Native.UdpDiscoveryTagID,System.Byte[])">
            <summary>
            Creates a tag with the specified <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryTagID"/>.
            </summary>
            <param name="id">The identifier.</param>
            <param name="tag">The tag.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.Create(TwinCAT.Ads.Native.UdpDiscoveryTagID,System.String)">
            <summary>
            Creates a string valued tag with the specified <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryTagID"/>
            </summary>
            <param name="id">The identifier.</param>
            <param name="str">The string.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateOsVersion(TwinCAT.Ads.Native.OSVersionInfo)">
            <summary>
            Creates an OsVersion discovery tag
            </summary>
            <param name="osVersion">The os version.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateOsVersion">
            <summary>
            Creates an OsVersion discovery tag for the local system.
            </summary>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateTcVersion(TwinCAT.Ads.AdsVersion)">
            <summary>
            Creates an discovery tag from the specified TwinCAT version.
            </summary>
            <param name="version">The version.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateTcVersion(System.Version)">
            <summary>
            Creates an discovery tag from the specified TwinCAT version.
            </summary>
            <param name="version">The version.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateFingerprint(System.String)">
            <summary>
            Creates a fingerprint discovery tag.
            </summary>
            <param name="fingerprint">The fingerprint.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateFQDNName(System.String)">
            <summary>
            Creates a discovery tag filled with the FQDN name.
            </summary>
            <param name="fqdn">The FQDN.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateResult(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates a <see cref="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.Result"/> tag from the error code.
            </summary>
            <param name="errorCode">Ads return code.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateRouteInfo(TwinCAT.Router.Native.AmsRegisterTpPortIn)">
            <summary>
            Creates the route information tag.
            </summary>
            <param name="amsRegisterTpPortIn">The ams register tp port in.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateRouteName(System.String)">
            <summary>
            Creates the route name tag for the UDPDiscoStruct
            </summary>
            <param name="routeName"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateNetId(TwinCAT.Ads.AmsNetId)">
            <summary>
            Creates the Ams AddressStr tag for the UDPDiscoStruct
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateIPAddress(System.Net.IPAddress)">
            <summary>
            Creates the tag for the best local IPAddress.
            </summary>
            <param name="bestLocalIP">The best local ip.</param>
            <returns>UdpDiscoTag.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateUserName(System.String,System.Boolean)">
            <summary>
            Creates the UserName tag for the UDPDiscoStruct
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">UserName</exception>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreatePassword(System.Security.SecureString,System.Boolean)">
            <summary>
            Creates the Password tag for the UDPDiscoStruct
            </summary>
            <param name="secPassword">The sec password.</param>
            <param name="encrypt">if set to <c>true</c> [encrypt].</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateComputerName(System.String)">
            <summary>
            Creates the Computer name tag for the UDPDiscoStruct
            </summary>
            <param name="computerName"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagFactory.CreateTemporary(System.Boolean)">
            <summary>
            Creates the Temporary tag for the UDPDiscoStruct
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryTagMarshaler">
            <summary>
            UdpDiscoTag Marshaler
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.UdpDiscoveryTag@)">
            <summary>
            Unmarshals the specified data to struct.
            </summary>
            <param name="data">The data.</param>
            <param name="tag">The tag.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagMarshaler.MarshalSize(TwinCAT.Ads.Native.UdpDiscoveryTag)">
            <summary>
            Gets the marshal size.
            </summary>
            <param name="tag">The tag.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryTagMarshaler.Marshal(TwinCAT.Ads.Native.UdpDiscoveryTag,System.Span{System.Byte})">
            <summary>
            Marshals the specified struct to byte buffer.
            </summary>
            <param name="tag">The tag.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryAddressed">
            <summary>
            Class UdpDiscoStructInfo.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryAddressed.IPAddress">
            <summary>
            The IPAddress
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryAddressed.Data">
            <summary>
            The discovery structure
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryAddressed.#ctor(System.Net.IPAddress,TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryAddressed"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="str">The string.</param>
        </member>
        <member name="T:TwinCAT.Ads.Native.OSVersionInfo">
            <summary>
            Class OSVERSIONINFO.
            </summary>
            <remarks>
            Use this when the unmanaged API expects the structure passed by-value, or 
            or if you want to pass it by-reference as a pointer to a structure
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.OSVersionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.OSVersionInfo"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.OSVersionInfo.#ctor(System.OperatingSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.OSVersionInfo"/> class.
            </summary>
            <param name="os">The os.</param>
        </member>
        <member name="P:TwinCAT.Ads.Native.OSVersionInfo.Empty">
            <summary>
            Gets an Empty <see cref="T:TwinCAT.Ads.Native.OSVersionInfo"/>.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="M:TwinCAT.Ads.Native.OSVersionInfo.GetCurrentOSVersion">
            <summary>
            Gets the OsVersion/Platform of the actual running local system.
            </summary>
            <returns>OSVERSIONINFO.</returns>
        </member>
        <member name="F:TwinCAT.Ads.Native.OSVersionInfo.dwOSVersionInfoSize">
            <summary>
            The Version Info Size
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.OSVersionInfo.dwMajorVersion">
            <summary>
            The major version
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.OSVersionInfo.dwMinorVersion">
            <summary>
            The Minor version
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.OSVersionInfo.dwBuildNumber">
            <summary>
            The Build number
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.OSVersionInfo.dwPlatformId">
            <summary>
            The platformId
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.OSVersionInfo.versionString">
            <summary>
            The version string
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryInfo">
            <summary>
            UdpDiscovery struct
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.UDPDISCO_PORT">
            <summary>
            The Discovery port
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.UDPDISCO_MAGIC_COOKIE">
            <summary>
            The discovery magic cookie
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.UDPDISCO_MAGIC_COOKIE2">
            <summary>
            The discovery magic cookie2
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.UDPDISCO_IPV6_MULTICAST">
            <summary>
            The IPV6 multicast address.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfo.#ctor(System.Int32,TwinCAT.Ads.Native.UdpDiscoveryServiceID,System.Boolean,TwinCAT.Ads.AmsAddress,System.Collections.Generic.IList{TwinCAT.Ads.Native.UdpDiscoveryTag},System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryInfo"/> class.
            </summary>
            <param name="invokeId">The invoke identifier.</param>
            <param name="serviceID">The service identifier.</param>
            <param name="response">if set to <c>true</c> [response].</param>
            <param name="address">The address.</param>
            <param name="tags">The tags.</param>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.magicCookie">
            <summary>
            Magic Cookie
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryInfo.MagicCookie">
            <summary>
            Gets the magic cookie.
            </summary>
            <value>The magic cookie.</value>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.invokeId">
            <summary>
            Invoke ID
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryInfo.InvokeId">
            <summary>
            Gets the invoke identifier.
            </summary>
            <value>The invoke identifier.</value>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.serviceId">
            <summary>
            Service ID and Response (union)
            </summary>
            <remarks>C++ definition:
            ULONG			serviceId	: 31;
            ULONG			response	: 1;
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryInfo.ServiceId">
            <summary>
            Service ID and Response (union)
            </summary>
            <remarks>C++ definition:
            ULONG			serviceId	: 31;
            ULONG			response	: 1;
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.response">
            <summary>
            Indicates the response
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryInfo.Response">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryInfo"/> is response.
            </summary>
            <value><c>true</c> if response; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.amsAddr">
            <summary>
            Ams AddressStr
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryInfo.Address">
            <summary>
            Gets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.tagCount">
            <summary>
            Number of tags
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.tags">
            <summary>
            Tags
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryInfo.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfo.GetNativeSizeOf">
            <summary>
            Gets the native (marshaled) size of the struct
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension">
            <summary>
            Extension class for <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryInfo"/> adding Methods to Create/Get <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryTag"/>s.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetUdpDiscoveryTag(TwinCAT.Ads.Native.UdpDiscoveryInfo,TwinCAT.Ads.Native.UdpDiscoveryTagID)">
            <summary>
            Gets the UDP discovery tag.
            </summary>
            <param name="disco">The discovery struct.</param>
            <param name="tagType">Type of the tag.</param>
            <returns>System.Nullable&lt;UdpDiscoveryTag&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagNetIdValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the Value of the <see cref="F:TwinCAT.Ads.Native.UdpDiscoveryTagID.NetId" /> tag.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.Nullable&lt;AmsNetId&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagTemporaryValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the temporary tag value.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns><c>true</c> if the temporary tag is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagComputerNameValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the name of the computer.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagRouteNameValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the name of the computer.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagDescriptionValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the computer description.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagTcVersionValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the TwinCAT Version from the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryInfo" />
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>Version object that represents the TwinCAT Version of the system.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagValueString(TwinCAT.Ads.Native.UdpDiscoveryInfo,TwinCAT.Ads.Native.UdpDiscoveryTagID)">
            <summary>
            Gets the specified <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryTag" /> type as string.
            </summary>
            <param name="disco">The discovery struct.</param>
            <param name="tagType">Type of the tag.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagValueUInt(TwinCAT.Ads.Native.UdpDiscoveryInfo,TwinCAT.Ads.Native.UdpDiscoveryTagID)">
            <summary>
            Gets the specified <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryTag" /> type as string.
            </summary>
            <param name="disco">The discovery struct.</param>
            <param name="tagType">Type of the tag.</param>
            <returns>System.Nullable&lt;System.String&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagValue(TwinCAT.Ads.Native.UdpDiscoveryInfo,TwinCAT.Ads.Native.UdpDiscoveryTagID)">
            <summary>
            Gets the tag value.
            </summary>
            <param name="disco">The discovery struct.</param>
            <param name="tagType">Type of the tag.</param>
            <returns>System.Nullable&lt;System.Byte&gt;[].</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagTargetOsValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the operating system.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>OperatingSystem2.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagResultValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the discovery result.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagFQDNNameValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the Fully qualified domain name
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagFingerprintValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the fingerprint ID
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagMaxFragmentValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the maximumum fragment value.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.Nullable&lt;System.UInt32&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.GetTagRouteIndexValue(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the route index value.
            </summary>
            <param name="disco">The discovery struct.</param>
            <returns>System.Nullable&lt;System.UInt32&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryInfoExtension.TryGetUserCredentials(TwinCAT.Ads.Native.UdpDiscoveryInfo,System.String@,System.Security.SecureString@)">
            <summary>
            Tries to get the User credentials from the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryInfo" /> tags.
            </summary>
            <param name="disco">The discovery struct.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns><c>true</c> if the UserName tag is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryMarshaler">
            <summary>
            UdpDiscoveryInfo marshaler
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryMarshaler.GetMagicCookie(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets the magic cookie.
            </summary>
            <remarks>Data must point to a 
            </remarks>
            <param name="data">The data.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.UdpDiscoveryInfo@)">
            <summary>
            Unmarshals the data.
            </summary>
            <param name="data">The data.</param>
            <param name="s">The s.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryMarshaler.MarshalSizeWithoutTags">
            <summary>
            Gets the marshal size without tags.
            </summary>
            <value>The marshal size without tags.</value>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryMarshaler.MarshalSize(TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Gets the marshal size of the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryInfo"/> including tags.
            </summary>
            <param name="s">The s.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryMarshaler.Marshal(TwinCAT.Ads.Native.UdpDiscoveryInfo,System.Span{System.Byte})">
            <summary>
            Marshals the struct to byte buffer.
            </summary>
            <param name="s">The s.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryRequest">
            <summary>
            Broadcast struct
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryRequest.OutAddress">
            <summary>
            Gets the socket IPAddress
            </summary>
            <value>The out address.</value>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryRequest.OutPort">
            <summary>
            Gets the socket out port.
            </summary>
            <value>The out port.</value>
        </member>
        <member name="F:TwinCAT.Ads.Native.UdpDiscoveryRequest.udp">
            <summary>
            Udp Discovery struct
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Native.UdpDiscoveryRequest.Udp">
            <summary>
            Gets the UDP DiscoveryStructure
            </summary>
            <value>The UDP.</value>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryRequest.#ctor(System.Net.IPAddress,TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryRequest"/> class with port <see cref="F:TwinCAT.Ads.Native.UdpDiscoveryInfo.UDPDISCO_PORT"/>
            </summary>
            <param name="outAddress">The out address.</param>
            <param name="udp">The UDP.</param>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryRequest.#ctor(System.Net.IPAddress,System.UInt16,TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryRequest"/> class.
            </summary>
            <param name="outAddress">The out address.</param>
            <param name="port">The port.</param>
            <param name="udp">The UDP.</param>
            <exception cref="T:System.ArgumentNullException">outAddress</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">outAddress - No valid InterNetwork address!</exception>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryRequest.#ctor(TwinCAT.Ads.Native.sockaddr_in,TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Constructor
            </summary>
            <param name="outAddr">The out addr.</param>
            <param name="udp">The UDP.</param>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryRequest.#ctor(TwinCAT.Ads.Native.sockaddr_in6,TwinCAT.Ads.Native.UdpDiscoveryInfo)">
            <summary>
            Constructor
            </summary>
            <param name="outAddr">The out addr.</param>
            <param name="udp">The UDP.</param>
        </member>
        <member name="T:TwinCAT.Ads.Native.UdpDiscoveryRequestMarshaler">
            <summary>
            Marshaler of the Broadcast struct
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryRequestMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ads.Native.UdpDiscoveryRequest@)">
            <summary>
            Marshals native memory to a managed object
            </summary>
            <param name="data">The data.</param>
            <param name="s">The Broadcast struct (out)</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryRequestMarshaler.MarshalSize(TwinCAT.Ads.Native.UdpDiscoveryRequest)">
            <summary>
            Gets the marshal size of the <see cref="T:TwinCAT.Ads.Native.UdpDiscoveryRequest"/> in bytes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Ads.Native.UdpDiscoveryRequestMarshaler.Marshal(TwinCAT.Ads.Native.UdpDiscoveryRequest,System.Span{System.Byte})">
            <summary>
            Marshals a managed object to native memory
            </summary>
            <param name="s">The s.</param>
            <param name="data">The data.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ads.RouteProtocolType">
            <summary>
            Transport medium (AMS_TRANSPORTID)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.None">
            <summary>
            None / Unspecified
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.TcpIP">
            <summary>
            TCP/IP
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.LightBus">
            <summary>
            Lightbus
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.ProfibusDP">
            <summary>
            Profibus DP
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.PciIsaBus">
            <summary>
            PCI/ISA bus
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.AdsUdp">
            <summary>
            Ads over UDP
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.FatpUdp">
            <summary>
            FatpUDP
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.ComPort">
            <summary>
            Comport
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.Usb">
            <summary>
            USB
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.CanOpen">
            <summary>
            CanOpen
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.DeviceNet">
            <summary>
            DeviceNet
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.SSB">
            <summary>
            SSB
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.Soap">
            <summary>
            Soap
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.EtherCAT">
            <summary>
            EtherCAT
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.RouteProtocolType.MQTT">
            <summary>
            MQTT
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.LocalNetIdResearcher">
            <summary>
            Class trying out some strategies to determine the local NetId of the system.
            </summary>
            <remarks>
            The AmsNetId is tried to determined in the following order:
            <list type="number">
            <item>From AppSettings (appSettings.json)</item>
            <item>From Environment variables</item>
            <item>Via ADS command from internal Loopback port</item>
            <item>If compiled for classic .NET from Windows registry.</item>
            <item></item>
            <item></item>
            </list>
            </remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.LocalNetIdResearcher.TryGetLocalNetId(TwinCAT.Ads.AmsNetId@)">
            <summary>
            Tries to get the Local NetId.
            </summary>
            <param name="local">The local <see cref="T:TwinCAT.Ads.AmsNetId"/></param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.LocalNetIdResearcher.TryGetNetIdFromAppSettings(TwinCAT.Ads.AmsNetId@)">
            <summary>
            Tries to get the Local NetId from Application Settings
            </summary>
            <param name="local">The local <see cref="T:TwinCAT.Ads.AmsNetId"/></param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.LocalNetIdResearcher.TryGetNetIdFromEnvironment(TwinCAT.Ads.AmsNetId@)">
            <summary>
            Tries to get the Local NetId from Environment Variable "$env:AmsNetId"
            </summary>
            <param name="local">The local <see cref="T:TwinCAT.Ads.AmsNetId"/></param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.LocalNetIdResearcher.TryGetNetIdFromTcp(TwinCAT.Ads.AmsNetId@)">
            <summary>
            Tries to get the Local NetId from TcpClient Loopback service.
            </summary>
            <param name="local">The local <see cref="T:TwinCAT.Ads.AmsNetId" /></param>
            <returns><c>true</c> if found, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.INotification">
            <summary>
            Common INotification interface
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.INotification.Handle">
            <summary>
            The notification handle
            </summary>
            <remarks>This can be the Client handle or the Server handle!</remarks>
            <value>The handle.</value>
        </member>
        <member name="P:TwinCAT.Ads.INotification.Data">
            <summary>
            The notification Data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:TwinCAT.Ads.INotification.TimeStamp">
            <summary>
            Gets the time stamp of the <see cref="T:TwinCAT.Ads.INotification"/>
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="P:TwinCAT.Ads.INotification.UserData">
            <summary>
            Attached UserData/Tag at the <see cref="T:TwinCAT.Ads.INotification"/>
            </summary>
            <value>The user data.</value>
        </member>
        <member name="T:TwinCAT.Ads.Notification">
            <summary>
            Class Notification.
            Implements the <see cref="T:TwinCAT.Ads.INotification" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.INotification" />
        </member>
        <member name="M:TwinCAT.Ads.Notification.#ctor(System.UInt32,System.DateTimeOffset,System.Object,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Notification"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="dateTime">The date time.</param>
            <param name="userData">The user data.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:TwinCAT.Ads.Notification.#ctor(TwinCAT.Ads.INotification)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.Notification"/> class.
            </summary>
            <param name="notification">The notification.</param>
        </member>
        <member name="F:TwinCAT.Ads.Notification.handle">
            <summary>
            Notification handle.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Notification.Handle">
            <summary>
            The notification handle
            </summary>
            <value>The handle.</value>
        </member>
        <member name="F:TwinCAT.Ads.Notification._timeStamp">
            <summary>
            The time stamp
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Notification.TimeStamp">
            <summary>
            Gets the time stamp of the <see cref="T:TwinCAT.Ads.INotification" />
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="F:TwinCAT.Ads.Notification._userData">
            <summary>
            The user data
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Notification.UserData">
            <summary>
            Attached UserData/Tag at the <see cref="T:TwinCAT.Ads.INotification" />
            </summary>
            <value>The user data.</value>
        </member>
        <member name="F:TwinCAT.Ads.Notification._notificationData">
            <summary>
            The notification data
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.Notification.Data">
            <summary>
            The notification Data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:TwinCAT.Ads.ValueNotification">
            <summary>
            Class ValueNotification.
            Implements the <see cref="T:TwinCAT.Ads.Notification" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.Notification" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.ValueNotification.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueNotification.#ctor(System.UInt32,System.DateTimeOffset,System.Object,System.ReadOnlyMemory{System.Byte},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ValueNotification"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="timeStamp">The time stamp.</param>
            <param name="userData">The user data.</param>
            <param name="data">The data.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueNotification.#ctor(TwinCAT.Ads.INotification,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ValueNotification"/> class.
            </summary>
            <param name="notification">The notification.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueNotification.OnCreateValue">
            <summary>
            Called when the Value has to be created (from raw data).
            </summary>
            <returns>the value</returns>
        </member>
        <member name="P:TwinCAT.Ads.ValueNotification.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:TwinCAT.Ads.ValueNotification`1">
            <summary>
            Class ValueNotification.
            Implements the <see cref="T:TwinCAT.Ads.Notification" />
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:TwinCAT.Ads.Notification" />
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.ValueNotification`1.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueNotification`1.#ctor(System.UInt32,System.DateTimeOffset,System.Object,System.ReadOnlyMemory{System.Byte},`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ValueNotification`1"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="timeStamp">The time stamp.</param>
            <param name="userData">The user data.</param>
            <param name="data">The data.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueNotification`1.#ctor(TwinCAT.Ads.INotification,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ValueNotification`1"/> class.
            </summary>
            <param name="notification">The notification.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.Ads.ValueNotification`1.OnGetValue">
            <summary>
            Called when [get value].
            </summary>
            <returns>T.</returns>
        </member>
        <member name="P:TwinCAT.Ads.ValueNotification`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:TwinCAT.Ads.AdsSumNotificationEventArgs">
            <summary>
            Class AdsSumNotificationEventArgs. This class cannot be inherited.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsSumNotificationEventArgs.TimeStamp">
            <summary>
            Gets the time stamp of the <see cref="P:TwinCAT.Ads.AdsSumNotificationEventArgs.Notifications"/>
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsSumNotificationEventArgs._notifications">
            <summary>
            The notifications
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsSumNotificationEventArgs.Notifications">
            <summary>
            Gets the notifications that occurred at a specific <see cref="P:TwinCAT.Ads.AdsSumNotificationEventArgs.TimeStamp"/>
            </summary>
            <value>The notifications.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsSumNotificationEventArgs.#ctor(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsSumNotificationEventArgs"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="notifications">The notifications.</param>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs">
            <summary>
            Class AdsNotificationsUnregisteredEventArgs. This class cannot be inherited.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs.TimeStamp">
            <summary>
            Gets the time stamp of the <see cref="P:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs.Notifications"/>
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="F:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs._notifications">
            <summary>
            The notifications
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs.Notifications">
            <summary>
            Gets the notifications that occurred at a specific <see cref="P:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs.TimeStamp"/>
            </summary>
            <value>The notifications.</value>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs.#ctor(System.DateTimeOffset,System.Collections.Generic.IList{TwinCAT.Ads.Notification})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsNotificationsInvalidatedEventArgs"/> class.
            </summary>
            <param name="dateTime">The date time.</param>
            <param name="notifications">The notifications.</param>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationEventArgs">
            <summary>
            Event argument class for <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotification"/> events.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsNotificationEventArgs._userData">
            <summary>
            User Data Tag
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsNotificationEventArgs._notificationHandle">
            <summary>
            The Notification Handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsNotificationEventArgs._buffer">
            <summary>
            The Notification Bound Memory
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationEventArgs.#ctor(TwinCAT.Ads.Notification)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="notification">The notification.</param>
            <remarks>The TwinCAT realtime target system (even when working locally) has its own TimeSystem which is synchronized with
            the Desktop/User time at TwinCAT Start. From this moment on the Desktop/User time can drift from the local Realtime/Target time.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.TimeStamp">
            <summary>
            Gets the time stamp of this Notification as <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.UserData">
            <summary>
            Gets the user object. This object is passed by to AddDeviceNotification and can
            be used to store data.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.Handle">
            <summary>
            Gets the Notification handle.
            </summary>
            <remarks>The Notification Handle is the handle that is created during
            ADS Notification registration (<see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotificationAsync"/>, <see cref="O:TwinCAT.Ads.IAdsNotifications.AddDeviceNotification"/>) and used for 
            deregistration (<see cref="O:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotificationAsync"/>,<see cref="O:TwinCAT.Ads.IAdsNotifications.DeleteDeviceNotification"/>).
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationEventArgs.Data">
            <summary>
            Memory object holding the Notification Data/Value.
            </summary>
            <remarks>This Memory object can be seen as binary 'View' to the value object. It represents exactly the data that 
            corresponds to the <see cref="P:TwinCAT.Ads.AdsNotificationEventArgs.Handle"/>.
            </remarks>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationExEventArgs">
            <summary>
            Arguments for <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/> events.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationExEventArgs.#ctor(TwinCAT.Ads.Notification,System.Object)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="notification">The notification.</param>
            <param name="value">Value of the ADS variable.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationExEventArgs.Value">
            <summary>
            Value of the ADS Notification.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.ValueNotificationEventArgs`1">
            <summary>
            Arguments for <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationEx"/> events.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.ValueNotificationEventArgs`1.#ctor(TwinCAT.Ads.Notification,`0)">
            <summary>
            Initializes a new instance of the AdsStream class AdsSyncNotificationEventArgs.
            </summary>
            <param name="notification">The notification.</param>
            <param name="value">Value of the ADS variable.</param>
        </member>
        <member name="P:TwinCAT.Ads.ValueNotificationEventArgs`1.Value">
            <summary>
            Value of the ADS Notification.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AmsRouterNotificationEventArgs">
            <summary>
            Arguments for the <see cref="T:TwinCAT.Ads.IRouterNotificationProvider"/> events.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AmsRouterNotificationEventArgs.#ctor(TwinCAT.Ads.AmsRouterState)">
            <summary>
            Initializes a new instance of the AmsRouterNotificationEventArgs class.
            </summary>
            <param name="value">Value of the ADS variable.</param>
        </member>
        <member name="P:TwinCAT.Ads.AmsRouterNotificationEventArgs.State">
            <summary>
            Current state of the AMS Router.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsNotificationErrorEventArgs">
            <summary>
            Arguments for the <see cref="E:TwinCAT.Ads.IAdsNotifications.AdsNotificationError"/> events.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsNotificationErrorEventArgs._exception">
            <summary>
            The Exception
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsNotificationErrorEventArgs.#ctor(System.Exception)">
            <summary>
               Initializes a new instance of the AdsNotificationErrorEventArgs class.
            </summary>
            <param name="e">Exception that was caught while handling notifications.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsNotificationErrorEventArgs.Exception">
            <summary>
            Exception that was caught while handling notifications.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsStateChangedEventArgs">
            <summary>
            Arguments for the <see cref="E:TwinCAT.Ads.IAdsStateProvider.AdsStateChanged"/> event.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsStateChangedEventArgs._state">
            <summary>
            The state
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsStateChangedEventArgs.#ctor(TwinCAT.Ads.StateInfo)">
            <summary>
            Initializes a new instance of the AdsStateChangedEventArgs class.
            </summary>
            <param name="value">Current state of the ADS device.</param>
        </member>
        <member name="P:TwinCAT.Ads.AdsStateChangedEventArgs.State">
            <summary>
            Current state of the ADS device.
            </summary>
            <value>The state.</value>
        </member>
        <member name="T:TwinCAT.Ads.AdsStateChangedEventArgs2">
            <summary>
            Event Arguments for AdsStateChanged events.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:TwinCAT.Ads.AdsStateChangedEventArgs2.#ctor(TwinCAT.Ads.StateInfo,TwinCAT.Ads.StateInfo,TwinCAT.ISession)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.AdsStateChangedEventArgs2"/> class.
            </summary>
            <param name="newState">The new state.</param>
            <param name="oldState">The old state.</param>
            <param name="session">The session.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsStateChangedEventArgs2.NewState">
            <summary>
            The new state
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsStateChangedEventArgs2.OldState">
            <summary>
            The old state
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsStateChangedEventArgs2.Session">
            <summary>
            The session
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.AdsStateChangedEventArgs2.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="T:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs">
            <summary>
            Arguments for the <see cref="E:TwinCAT.Ads.IAdsSymbolChangedProvider.AdsSymbolVersionChanged"/> event.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs._symbolVersion">
            <summary>
            The _symbol version
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the AdsSymbolVersionChangedEventArgs class.
            </summary>
            <param name="symbolVersion">Current symbol version.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.#ctor(TwinCAT.Ads.AdsSymbolVersionChangedEventArgs)">
            <summary>
            Initializes a new instance of the AdsSymbolVersionChangedEventArgs class.
            </summary>
            <param name="eventArgs">The <see cref="T:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs"/> instance containing the event data.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.AdsSymbolVersionChangedEventArgs.SymbolVersion">
            <summary>
            Current symbol version device.
            </summary>
            <value>The symbol version.</value>
        </member>
        <member name="T:TwinCAT.Ads.INotificationSettings">
            <summary>
            Interface for Notification Settings
            Implements the <see cref="T:System.IComparable`1" />
            </summary>
            <seealso cref="T:System.IComparable`1" />
        </member>
        <member name="T:TwinCAT.Ads.NotificationSettings">
            <summary>
            Notification communication settings
            </summary>
            <remarks>
            <list type="table">
            <listheader><term><see cref="T:TwinCAT.Ads.AdsTransMode"/></term><description>Parameter semantic</description></listheader>
            <item>
                <term><see cref="F:TwinCAT.Ads.AdsTransMode.CyclicInContext"/></term><description>Value of parameter CycleTime is interpreted as task context number IAdsSymbol.ContextMask/></description>
            </item>
            <item>
                <term><see cref="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext"/></term><description>Value of parameter CycleTime is interpreted as task context number IAdsSymbol.ContextMask/></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.NotificationSettings._default">
            <summary>
            Default
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.NotificationSettings.Default">
            <summary>
            Gets the default Settings (AdsTransMode.OnChange, CycleTime 200 ms, MaxDelay: off)
            </summary>
            <value>The default.</value>
        </member>
        <member name="P:TwinCAT.Ads.NotificationSettings.ImmediatelyOnChange">
            <summary>
            Gets the settings for a 'Immediate on change' notification.
            </summary>
            <remarks>
            AdsTransMode.OnChange, CycleTime: 0 ms, MaxDelay: off)
            </remarks>
            <value>The immediately on change.</value>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettings.#ctor(TwinCAT.Ads.AdsTransMode,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.NotificationSettings"/> class.
            </summary>
            <param name="mode">The ADS Transmission mode.</param>
            <param name="cycleTime">The cycle time in ms.</param>
            <param name="maxDelay">The maximum delay in ms</param>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettings.#ctor(TwinCAT.Ads.AdsTransMode,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.NotificationSettings"/> class.
            </summary>
            <param name="mode">The ADS Transmission mode.</param>
            <param name="cycleTime">The cycle time in ms.</param>
            <param name="maxDelay">The maximum delay in ms</param>
        </member>
        <member name="P:TwinCAT.Ads.NotificationSettings.NotificationMode">
            <summary>
            Gets the ADS Transmission mode.
            </summary>
            <value>The Transmission mode.</value>
        </member>
        <member name="P:TwinCAT.Ads.NotificationSettings.CycleTime">
            <summary>
            Gets the cycle time (in milliseconds) for AdsNotifications.
            </summary>
            <remarks>The ADS server checks if the value changes in this time slice. The unit is 1ms </remarks>
            <value>The cycle time.</value>
        </member>
        <member name="P:TwinCAT.Ads.NotificationSettings.MaxDelay">
            <summary>
            Gets the Maximum Delay Time (in milliseconds) for AdsNotifications.
            </summary>
            <value>The maximum Delay time for ADS Notifications.</value>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettings.CompareTo(TwinCAT.Ads.INotificationSettings)">
            <summary>
            Compares this <see cref="T:TwinCAT.Ads.NotificationSettings"/> in term of priorities to the other <see cref="T:TwinCAT.Ads.NotificationSettings"/>.
            </summary>
            <param name="other">The other.</param>
            <returns>1: this has higher priority (shorter times), 0: Equal, 1: Lower prioritiy</returns>
            <seealso cref="T:TwinCAT.Ads.NotificationSettingsPriorityComparer"/>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettings.op_Equality(TwinCAT.Ads.NotificationSettings,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Implements the == operator.
            </summary>
            <param name="settings1">The settings1.</param>
            <param name="settings2">The settings2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettings.op_Inequality(TwinCAT.Ads.NotificationSettings,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Implements the != operator.
            </summary>
            <param name="settings1">The settings1.</param>
            <param name="settings2">The settings2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettings.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:TwinCAT.Ads.NotificationSettingsPriorityComparer">
            <summary>
            Compares two <see cref="T:TwinCAT.Ads.NotificationSettings" /> for Priority.
            </summary>
            <remarks>Checks (prioritized):
            1. <see cref="P:TwinCAT.Ads.NotificationSettings.NotificationMode" />
            2. <see cref="P:TwinCAT.Ads.NotificationSettings.CycleTime" />
            3. <see cref="P:TwinCAT.Ads.NotificationSettings.MaxDelay" /></remarks>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettingsPriorityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.NotificationSettingsPriorityComparer"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.NotificationSettingsPriorityComparer.Compare(TwinCAT.Ads.NotificationSettings,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
        </member>
        <member name="T:TwinCAT.Ads.AdsCommandId">
            <summary>
            AdsCommandId Enumeration
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.ReadDeviceInfo">
            <summary>
            ReadDeviceInfo command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.Read">
            <summary>
            Read Command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.Write">
            <summary>
            Write Command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.ReadState">
            <summary>
            ReadState Command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.WriteControl">
            <summary>
            WriteControl Command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.AddNotification">
            <summary>
            AddNotification Command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.DeleteNotification">
            <summary>
            DeleteNotification Command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.Notification">
            <summary>
            Notification event.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsCommandId.ReadWrite">
            <summary>
            ReadWrite Command
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ISumCommand">
            <summary>
            Interface for SumCommands (Combined commands)
            </summary>
            <remarks>
            ADS offers powerful and fast communication to exchange any kind of information. It's possible to read single variables
            or complete arrays and structures with each one single ADS-API call.
            The <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand">ADS Sum Command</see> command offers to read with one singale ADS call multiple variables
            which are not structured within a linear memory.
            As a result the ADS caller application (like scada Systems etc.) can extremly speed up cyclic polling :
            Sample :
            <list type="bullet">
            <item><description>Until now : Polling 4000 single variables which are not in a linear area (like array / structure / fixed PLC address ) would cause 4000 single Ads-ReadReq with each 1-2 ms protocol time.
            As a result the scanning of these variables take 4000ms-8000ms.</description></item>
            <item><description>New Ads-Command allows to read multiple variables with one single ADS-ReadReq : 4000 single variables are handled with e.g. 8 single Ads-ReadReq (each call requesting 500 variables) with each 1-2 ms protocol time.
            As a result the scanning of these variables take just few 10ms.</description></item>
            </list>
            <b>REQUIREMENTS AND IMPORTANT LIMITATIONS:</b>
            Note that ADS is just a transport layer, but there could be important side effects. So read this requirements and take care on limitations:
            <list type="bullet">
            <item>
            <term><b>Version of target ADS Device</b></term>
            <description> - ADS itself is just the transport layer, but the requested ADS device has to support the ADS-Command.</description>
            </item>
            <item>
            <term><b>Bytes length of requested data</b></term>
            <description> - Requesting a large list of values from variables is fine, but the requested data of the Ads-response (the data-byte-length) have to pass the AMS Router (size by default a 2048kb)
            So the caller has to limit the requested variables based on calculation of requested data-byte-length.</description>
            </item>
            <item>
            <term><b>Number of Sub-ADS calls : Highly recommended to max. 500 !</b></term>
            <description> - If the PLC is processing one ADS request, it will completely work on this single ADS request BEFORE starting neyt PLC cycle.
            As a result one single ADS request with 200.000 sub-Ads-requests would cause that PLC would collect and copy 200.000 variables into one single ADS response, before starting next PLC.
            So this large number of ads-sub-commands will jitter the PLC execution !
            <b>We highly recommend to not request more than 500 Ads-Sub commands</b></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.Connection">
            <summary>
            The connection used for communication.
            </summary>
            <remarks>This can be the AdsConnection or AdsClient object.</remarks>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.Result">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AdsErrorCode"/> of the main SumCommandBase ADS Request
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.SubResults">
            <summary>
            Gets the sub results of the single Sub Requests.
            </summary>
            <value>The sub results.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.Executed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/> was already executed.
            </summary>
            <value><c>true</c> if executed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.Succeeded">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/> is succeeded.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.Failed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/> failed.
            </summary>
            <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.ErrorStrategy">
            <summary>
            Gets the error strategy of the <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            </summary>
            <value>The error strategy.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.SucceededCount">
            <summary>
            Gets the count of succeeded subcommands.
            </summary>
            <value>The succeeded count.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ISumCommand.FailedCount">
            <summary>
            Gets the count of failed subcommands.
            </summary>
            <value>The failed count.</value>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ISumCommandExtension">
            <summary>
            Extension class for <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/> derived classes.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumCommandExtension.FirstSubError(TwinCAT.Ads.SumCommand.ISumCommand)">
            <summary>
            Gets the first SubError that is not <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>
            </summary>
            <value>The first subError.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumCommandExtension.OverallError(TwinCAT.Ads.SumCommand.ISumCommand)">
            <summary>
            Gets the Overall (combined error) from SumCommand AND SubCommands.
            </summary>
            <remarks>This will return the ErrorCode of the Sumcommand (if failed) or the first failed subcommand.</remarks>
            <value>The combined error or <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/></value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumCommandExtension.OneSucceeded(TwinCAT.Ads.SumCommand.ISumCommand)">
            <summary>
            Gets a value indicating, whether the overall SumCommand succeeded (including all subcommands)
            </summary>
            <value><c>true</c> if [sub results succeeded]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumCommandExtension.OneFailed(TwinCAT.Ads.SumCommand.ISumCommand)">
            <summary>
            Gets a value indicating, whether the overall Sumcommand failed (checking all subcommand results).
            </summary>
            <value><c>true</c> if [overall failed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumCommandExtension.AllFailed(TwinCAT.Ads.SumCommand.ISumCommand)">
            <summary>
            Gets a value indicating, that all SubCommands failed.
            </summary>
            <param name="sumCommand">The sum command.</param>
            <returns><c>true</c> if the SumCommand and all SubCommands failed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumCommandExtension.AllSucceeded(TwinCAT.Ads.SumCommand.ISumCommand)">
            <summary>
            Gets a value indicating, that all SubCommands succeeded.
            </summary>
            <param name="sumCommand">The sum command.</param>
            <returns><c>true</c> if the SumCommand and all SubCommands succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ResultSumCommand">
            <summary>
            Result class for an asynchronous <see cref="N:TwinCAT.Ads.SumCommand"/>:
            </summary>
            <remarks>The result contains the overall ErrorCode of the SumComand <see cref="P:TwinCAT.Ads.SumCommand.ResultSumCommand.OverallError"/> and all the Suberrors of the SubRequests
            <see cref="P:TwinCAT.Ads.SumCommand.ResultSumCommand.SubErrors"/>.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.ResultSumCommand._subErrors">
            <summary>
            The <see cref="T:TwinCAT.Ads.AdsErrorCode">Error codes</see> for the single SumCommands.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumCommand.SubErrors">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AdsErrorCode">Error codes</see> for the single SumCommands.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ResultSumCommand.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsErrorCode[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.ResultSumCommand"/> class.
            </summary>
            <param name="complete">The overall ADS Error.</param>
            <param name="subErrors">The SubCommand errorCode.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumCommand.FirstSubError">
            <summary>
            Gets the first SubError that is not <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>
            </summary>
            <value>The first subError.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumCommand.OverallError">
            <summary>
            Gets the Overall (combined error) from SumCommand AND SubCommands.
            </summary>
            <remarks>This will return the ErrorCode of the Sumcommand (if failed) or the first failed subcommand.</remarks>
            <value>The combined error or <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/></value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumCommand.OverallSucceeded">
            <summary>
            Gets a value indicating, whether the overall SumCommand succeeded (including all subcommands)
            </summary>
            <value><c>true</c> if [sub results succeeded]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumCommand.OverallFailed">
            <summary>
            Gets a value indicating, whether the overall Sumcommand failed (checking all subcommand results).
            </summary>
            <value><c>true</c> if [overall failed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ResultSumReadRaw">
            <summary>
            Result class for an asynchronous SumRead that contains blocks of raw memory data (unmarshaled data).
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.ResultSumReadRaw._readBlocks">
            <summary>
            List of the read raw memory blocks read.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumReadRaw.ReadBlocks">
            <summary>
            List of the read raw memory blocks read.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ResultSumReadRaw.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsErrorCode[],System.Collections.Generic.IList{System.ReadOnlyMemory{System.Byte}})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.ResultSumReadRaw"/> class.
            </summary>
            <param name="complete">The overall ADS error code.</param>
            <param name="subErrors">The Sub-Error codes..</param>
            <param name="readBlocks">The read blocks.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ResultSumValues">
            <summary>
            Result class for an asynchronous <see cref="T:TwinCAT.Ads.SumCommand.ISumRead"/>. The Values are returned as objects.
            </summary>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ResultSumValues2`1"/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.ResultSumValues._values">
            <summary>
            The Read data as marshalled values
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumValues.Values">
            <summary>
            The Read data as marshalled values
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ResultSumValues.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsErrorCode[],System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues"/> class.
            </summary>
            <param name="complete">The complete.</param>
            <param name="subErrors">The sub errors.</param>
            <param name="values">The values.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ResultSumValues2`1">
            <summary>
            Extended result class for an asynchronous <see cref="T:TwinCAT.Ads.SumCommand.ISumRead2`1"/>.
            </summary>
            <remarks>This result class contains additional mapped <see cref="T:TwinCAT.TypeSystem.ISymbol"/> information foreach subResult of the the SumCommand.</remarks>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ResultSumValues"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ResultSumValues2`1.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.ResultValue2{`0,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues"/> class.
            </summary>
            <param name="complete">The complete.</param>
            <param name="results">The sub errors.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumValues2`1.ValueResults">
            <summary>
            Gets the values results (Values extended by the Symbol reference and error code).
            </summary>
            <value>The value results.</value>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ResultSumTypedValues`2">
            <summary>
            Generic typed result class for a <see cref="T:TwinCAT.Ads.SumCommand.ISumRead" />.
            </summary>
            <typeparam name="I">The ID of the symbol (or address) that produced a single subResult. Usually it is intended to be a <see cref="T:TwinCAT.TypeSystem.ISymbol"/> derived (but not limited to).</typeparam>
            <typeparam name="V">The Value type to be produced. Most commonly, this parameter should be defined as object, to support different
            return types.
            </typeparam>
            <remarks>This object contains all SumCommand subResults as Result object <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess2`2"/>.
            </remarks>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumTypedValues`2.ValueResults">
            <summary>
            Returns the SumCommand Values enriched by symbolId/Addressing information and type information.
            </summary>
            <value>The value results.</value>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ResultSumTypedValues`2.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.ValueAccess.ResultReadValueAccess2{`0,`1}[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues"/> class.
            </summary>
            <param name="complete">The complete.</param>
            <param name="results">The sub errors.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ResultSumHandles">
            <summary>
            Result class for an asynchronous SumCreateHandles>.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.ResultSumHandles._handles">
            <summary>
            The registered Symbol handles.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumHandles.Handles">
            <summary>
            The registered Symbol handles.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ResultSumHandles.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsErrorCode[],System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.ResultSumHandles"/> class.
            </summary>
            <param name="complete">The overall ADS Error code</param>
            <param name="subErrors">The sub-error codes.</param>
            <param name="handles">The registered handles.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ResultSumHandles2">
            <summary>
            Result class for an asynchronous SumCreateHandles.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.ResultSumHandles2._instancePaths">
            <summary>
            The symbol/instance paths belonging to the handles and the subErrors.
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.SumCommand.ResultSumHandles2.InstancePaths">
            <summary>
            The symbol/instance paths belonging to the handles and the subErrors.
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ResultSumHandles2.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsErrorCode[],System.UInt32[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.SumCommand.ResultSumHandles2"/> class.
            </summary>
            <param name="complete">The overall ADS error codes.</param>
            <param name="subErrors">The single ADS SubErrors.</param>
            <param name="handles">The registered handles.</param>
            <param name="instancePaths">The instance paths.</param>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumCommandMode">
            <summary>
            Indicates, which (extended) SumCommand to use.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandMode.Read">
            <summary>
            Sum Read command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandMode.Write">
            <summary>
            Sum Write command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandMode.ReadWrite">
            <summary>
            Sum ReadWrite command
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandMode.ReadEx">
            <summary>
            ReadEx (not used yet)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandMode.ReadEx2">
            <summary>
            ReadEx (not used yet)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandMode.AddDeviceNotification">
            <summary>
            Add Device Notification as SumCommandBase (not used yet)
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandMode.DeleteDeviceNotification">
            <summary>
            Delete Device Notification as SumCommandBase (not used yet)
            </summary>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumAccessMode">
            <summary>
            Indicates how to handle each single sub-sum-command (IGIO, ByHandle, ByName)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumAccessMode.IndexGroupIndexOffset">
            <summary>
            Access by IndexGroup / IndexOffset
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumAccessMode.ValueByHandle">
            <summary>
            Accesses a value by handle
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumAccessMode.ValueByName">
            <summary>
            Access a value by name
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumAccessMode.AcquireHandleByName">
            <summary>
            Acquire handle by name
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumAccessMode.ReleaseHandle">
            <summary>
            Release handle
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy">
            <summary>
            The Error strategy for <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand"/>
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.None">
            <summary>
            Errors are ignored
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Relaxed">
            <summary>
            Whole SumCommand fails if the Main Request fails or all subCommands indicate errors.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.SumCommand.SumCommandErrorStrategy.Strict">
            <summary>
            The SumCommand succeeds only if all Sub-Requests succeeded.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ISumRead">
            <summary>
            Interface ISumRead
            Implements the <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand" />
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumRead2`1"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)">
            <summary>
            Reads the specified symbols.
            </summary>
            <remarks>The returned values are automatically marshalled to their appropriate .NET types.
            </remarks>
            <param name="values">The values.</param>
            <param name="returnCodes">The return codes.</param>
            <returns>AdsErrorCode.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.Read"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.ReadAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumRead.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Reads Symbol values as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'Read' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.Read"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumRead.Read">
            <summary>
            Reads the combined (Sum) Symbols and returns them as value array.
            </summary>
            <remarks>The return values are automatically marshalled to their appropriate .NET types.
            This method throws Exceptions, when the Read access fails.
            </remarks>
            <returns>The value array.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.TryRead(System.Object[]@,TwinCAT.Ads.AdsErrorCode[]@)"/>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead.ReadAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumRead.ReadAsResult">
            <summary>
            Reads the combined (Sum) Symbols and returns them as <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues">Result</see> object.
            </summary>
            <returns>The Result object.</returns>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ISumRead2`1">
            <summary>
            Interface ISumRead2 (supports extended Sum SubResults)
            Implements the <see cref="T:TwinCAT.Ads.SumCommand.ISumCommand" />
            </summary>
            <remarks>Implementations of this interface return enriched SubResults on SumCommand Reads, that include the original sourceId in its result to backtrace.</remarks>
            <seealso cref="T:TwinCAT.Ads.SumCommand.ISumCommand" />
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumRead2`1.Read2Async(System.Threading.CancellationToken)">
            <summary>
            Reads Symbol values as an asynchronous operation.
            </summary>
            <param name="cancel">The cancellation token.</param>
            <returns>An asynchronous task that represents the 'Read' operation and returns a <see cref="T:TwinCAT.Ads.SumCommand.ResultSumValues" />. The overall error return code
            is contained in the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> property.</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2`1.Read2"/>
        </member>
        <member name="M:TwinCAT.Ads.SumCommand.ISumRead2`1.Read2">
            <summary>
            Reads the Values.
            </summary>
            <remarks>The return values are automatically marshalled to their appropriate .NET types.
            </remarks>
            <returns>System.Object[].</returns>
            <seealso cref="M:TwinCAT.Ads.SumCommand.ISumRead2`1.Read2Async(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ISumSymbolRead">
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.SumCommand.ISumSymbolRead2">
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.IHandleCache">
            <summary>
            Interface IHandleTable
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IHandleCache.TryCreateVariableHandle(System.String,System.Int32,System.UInt32@)">
            <summary>
            Creates the client handle.
            </summary>
            <param name="variableName">Name of the variable / Symbol.</param>
            <param name="timeout">The timeout.</param>
            <param name="clientHandle">The client/variable/symbol handle.</param>
            <returns>AdsErrorCode.</returns>
            <remarks></remarks>
        </member>
        <member name="M:TwinCAT.Ads.IHandleCache.CreateVariableHandleAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates the client handle
            </summary>
            <param name="variableName">Name of the variable.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ResultHandle&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IHandleCache.TryDeleteVariableHandle(System.UInt32,System.Int32)">
            <summary>
            Deletes the client/variable handle handle
            </summary>
            <param name="variableHandle">The client handle of the Symbol / Variable.</param>
            <param name="timeout">The timeout.</param>
            <returns>AdsErrorCode.</returns>
        </member>
        <member name="M:TwinCAT.Ads.IHandleCache.DeleteVariableHandleAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Deletes the client/variable handle asynchronously
            </summary>
            <param name="variableHandle">The client/variable/symbol handle.</param>
            <param name="cancel">The cancel token.</param>
            <returns>Task&lt;TaskResult&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.IAdsDataTypeArrayInfo">
            <summary>
            Interface IAdsDataTypeArrayInfo
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.IAdsDataTypeArrayInfo.LowerBound">
            <summary>
            Gets the lower bound of an Dimension
            </summary>
            <value>The lower bound.</value>
        </member>
        <member name="P:TwinCAT.Ads.IAdsDataTypeArrayInfo.Elements">
            <summary>
            Gets the number of Elements within a dimension
            </summary>
            <value>The elements.</value>
        </member>
        <member name="T:TwinCAT.Ads.IAdsRpcInvoke">
            <summary>
            Interface IAdsRpcInvoke
            </summary>
            <remarks>
            This interface is used to invoke ADS RPC Method calls. This can be done 'symbolic' via the
            Method name or the MethodID of the method on the specified symbol.
            To activate the RPC Access within the PLC environment, its dataType (Structure, FB) must be marked with the PlcAttribute 'TcRpcEnable' to enable RpcMethods.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.InvokeRpcMethod(System.String,System.String,System.Object[])">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>This method only supports primitive data types as <paramref name="inParameters"/>. Any available outparameters will be ignored.
            Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.InvokeRpcMethod(System.String,System.String,System.Object[],System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The input parameters or NULL</param>
            <param name="outParameters">The output parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.InvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retSpecifier">The ret specifier (specifiying the return value) or NULL.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters"/>, <paramref name="retSpecifier"/>
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameter (<paramref name="retSpecifier"/>) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.InvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifiying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifiying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The return value of the Method (as object).</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters"/>, <paramref name="outParameters"/>, <paramref name="outSpecifiers"/>, <paramref name="retSpecifier"/>
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers"/> and <paramref name="retSpecifier"/>) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.TryInvokeRpcMethod(System.String,System.String,System.Object[],System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <returns>The ADS Error Code.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.TryInvokeRpcMethod(System.String,System.String,System.Object[],System.Object[]@,System.Object@)">
            <summary>
            Invokes the specified RPC Method
            </summary>
            <param name="symbolPath">The symbol path.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="retValue">The return value of the RPC method as object.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>The ADS Error Code.</returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.TryInvokeRpcMethod(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the rpc method.
            </summary>
            <param name="symbolPath">The symbol.</param>
            <param name="methodName">Name of the method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.TryInvokeRpcMethod(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@)">
            <summary>
            Invokes the rpc method.
            </summary>
            <param name="symbol">The RPC callable symbol</param>
            <param name="method">The method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="retValue">The return value of the RPC method./&gt;</param>
            <returns>AdsErrorCode.</returns>
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outParameters" />,
            are allowed to be empty or NULL.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.InvokeRpcMethodAsync(System.String,System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbolPath">The symbol/Instance path of the symbol.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains
            the return value together with the output parameters.
            </returns>
            <remarks>
            Because this overload doesn't provide any <see cref="T:TwinCAT.TypeSystem.AnyTypeSpecifier"/> specifications, only primitive datatypes will be correctly marshalled
            by this method. Complex types will fall back to byte[] arrays.
            </remarks>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.InvokeRpcMethodAsync(System.String,System.String,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbolPath">The symbol/Instance path of the symbol.</param>
            <param name="methodName">The method name.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="M:TwinCAT.Ads.IAdsRpcInvoke.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IRpcCallableInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the specified RPC Method asynchronously
            </summary>
            <param name="symbol">The RPC callable symbol."</param>
            <param name="method">The method.</param>
            <param name="inParameters">The parameters.</param>
            <param name="outSpecifiers">The out specifiers (specifying the out types) or NULL.</param>
            <param name="retSpecifier">The ret specifier (specifying the return value) or NULL.</param>
            <param name="cancel">The cancellation token</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> results contains the return value together with the output parameters.
            <remarks>The RpcMethod optionally support In-Parameters, Out-Parameters and Return values. Therefore the parameters <paramref name="inParameters" />, <paramref name="outSpecifiers" />, <paramref name="retSpecifier" />
            are allowed to be empty or NULL.
            In case of using primitive datatypes, the type specifier parameters (<paramref name="outSpecifiers" /> and <paramref name="retSpecifier" />) are not necessary and should not be set.
            </remarks><see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue" /> and the <see cref="P:TwinCAT.Ads.ResultAds.ErrorCode" /> of the ADS communication after execution.</returns>
            <example>
            The following sample shows how to call (Remote Procedures / Methods) within the PLC.
            <code language="C#" title="Dynamic Tree Mode" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2VirtualTree.cs" region="CODE_SAMPLE_RPCCALL" />
            </example>
        </member>
        <member name="T:TwinCAT.Ads.TaskExtensions">
            <summary>
            TaskExtensions for Task Cancellation and Timeout
            </summary>
        </member>
        <member name="M:TwinCAT.Ads.TaskExtensions.WithCancellation``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Extends a worker Task with cancellation.
            </summary>
            <typeparam name="T">The Task Result</typeparam>
            <param name="worker">The worker task.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;T&gt;.</returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TaskExtensions.WithCancellationAndTimeout(System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Extends a worker task with timeout and Cancellation
            </summary>
            <param name="worker">The worker task.</param>
            <param name="timeout">The timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
            <exception cref="T:System.OperationCanceledException"></exception>
        </member>
        <member name="M:TwinCAT.Ads.TaskExtensions.WithTimeout(System.Threading.Tasks.Task{TwinCAT.Ads.AdsErrorCode},System.TimeSpan)">
            <summary>
            Extends a worker task with a timeout.
            </summary>
            <param name="worker">The worker task</param>
            <param name="timeout">The timeout.</param>
            <returns>Task&lt;AdsErrorCode&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultAds">
            <summary>
            Base class for an (asynchronous) ADS Task Result
            </summary>
            <remarks>The base class is used whenever an asynchronous task communicates via ADS and should return its <see cref="T:TwinCAT.Ads.AdsErrorCode"/> within its
            tasks result.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.#ctor(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultAds"/> class.
            </summary>
            <param name="errorCode">The Ads ErrorCode</param>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultAds"/> class.
            </summary>
            <param name="errorCode">The Ads ErrorCode</param>
            <param name="invokeId">The ADS request invoke identifier or 0</param>
            
        </member>
        <member name="F:TwinCAT.Ads.ResultAds.s_empty">
            <summary>
            Empty result
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultAds.Empty">
            <summary>
            Gets an empty <see cref="T:TwinCAT.Ads.ResultAds"/> initialized to <see cref="F:TwinCAT.Ads.AdsErrorCode.None"/>.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="F:TwinCAT.Ads.ResultAds._errorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultAds.ErrorCode">
            <summary>
            Gets the ADS Error code bound to this <see cref="T:TwinCAT.Ads.ResultAds">Result</see> object.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:TwinCAT.Ads.ResultAds.InvokeId">
            <summary>
            Gets the ADS requests invoke identifier (or 0 if not supported)
            </summary>
            <value>The invoke identifier.</value>
        </member>
        <member name="P:TwinCAT.Ads.ResultAds.Succeeded">
            <summary>
            Gets a value indicating whether the <see cref="T:TwinCAT.Ads.ResultAds"/> state is succeeded.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ads.ResultAds.Failed">
            <summary>
            Gets a value indicating whether the <see cref="T:TwinCAT.Ads.ResultAds"/> state is failed.
            </summary>
            <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.SetError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Sets the error state of this <see cref="T:TwinCAT.Ads.ResultAds"/>
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.CreateError(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="invokeId">The ADS request invoke identifier or 0</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.CreateSuccess">
            <summary>
            Creates a success result.
            </summary>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.CreateSuccess(System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.CreateSuccess``1(``0)">
            <summary>
            Creates a success result.
            </summary>
            <param name="value">The value.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.CreateSuccess``1(``0,System.UInt32)">
            <summary>
            Creates a success result.
            </summary>
            <param name="value">The value.</param>
            <param name="invokeId">The ADS request invoke identifier or 0</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultAds.op_Implicit(TwinCAT.Ads.ResultAds)~TwinCAT.ValueAccess.ResultAccess">
            <summary>
            Performs an implicit conversion from <see cref="T:TwinCAT.Ads.ResultAds"/> to <see cref="T:TwinCAT.ValueAccess.ResultAccess"/>.
            </summary>
            <param name="resultAds">The ADS result.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultValue`1">
            <summary>
            ADS Result object returning a generic value result (<typeparamref name="TValue"/>) (asynchronous read).
            Implements the <see cref="T:TwinCAT.Ads.ResultAds" />
            </summary>
            <typeparam name="TValue">The type of the result value.</typeparam>
            <seealso cref="T:TwinCAT.Ads.ResultAds" />
            <remarks>The <see cref="T:TwinCAT.Ads.ResultValue`1"/> type is used in generic ADS read operations, where a value is returned.
            </remarks>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue`1.#ctor(`0)">
            <summary>
            Initializes a new 'Succeeded' instance of the <see cref="T:TwinCAT.Ads.ResultValue`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue`1.#ctor(`0,System.UInt32)">
            <summary>
            Initializes a new 'Succeeded' instance of the <see cref="T:TwinCAT.Ads.ResultValue`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude></exclude>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue`1.#ctor(TwinCAT.Ads.AdsErrorCode,`0)">
            <summary>
            Initializes a new instance of the ResultValue class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue`1.#ctor(TwinCAT.Ads.AdsErrorCode,`0,System.UInt32)">
            <summary>
            Initializes a new instance of the ResultValue class.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="value">The value.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ads.ResultValue`1.Value">
            <summary>
            The value object.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultValue`1.s_empty">
            <summary>
            Empty result
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultValue`1.Empty">
            <summary>
            Gets the Empty result initialized to <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/> and the default of <typeparamref name="TValue"/>.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue`1.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an Error Result.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue`1.CreateSuccess(`0)">
            <summary>
            Creates a success result.
            </summary>
            <param name="value">The value.</param>
            <returns>ResultValue&lt;T&gt;.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultRpcMethod">
            <summary>
            Class representing a result of an asynchronous RpcMethod call.
            Implements the <see cref="T:TwinCAT.Ads.ResultAds" />
            </summary>
            <remarks>Optionally this Result holds an <see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue"/> if the RpcCall is not void.</remarks>
            <seealso cref="T:TwinCAT.Ads.ResultAds" />
        </member>
        <member name="M:TwinCAT.Ads.ResultRpcMethod.#ctor(TwinCAT.Ads.AdsErrorCode,System.Object,System.Object[],System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> struct.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="returnValue">The value.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="invokeId">The ADS request invoke identifier or 0</param>
        </member>
        <member name="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue">
            <summary>
            The (optional) return value of the RPC Method.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultRpcMethod.s_empty">
            <summary>
            Empty Result
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultRpcMethod.Empty">
            <summary>
            Gets the Empty Result (initialized to <see cref="F:TwinCAT.Ads.AdsErrorCode.None"/> and default <see cref="P:TwinCAT.Ads.ResultRpcMethod.ReturnValue"/> (NULL).
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:TwinCAT.Ads.ResultRpcMethod.OutValues">
            <summary>
            Gets the output parameter values.
            </summary>
            <value>The output parameters.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultRpcMethod.CreateSuccess(System.Object,System.Object[])">
            <summary>
            Creates a success result
            </summary>
            <param name="returnValue">The return value.</param>
            <param name="outParameters">The out parameters.</param>
            <returns>ResultRpcMethod.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultRpcMethod.CreateError(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Creates an error result.
            </summary>
            <param name="error">The error.</param>
            <returns>ResultRpcMethod.</returns>
        </member>
        <member name="T:TwinCAT.Ads.ResultValue2`2">
            <summary>
            Result object of an asynchronous read.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultAccess" />
            </summary>
            <typeparam name="I">The SymbolID / AddressInformation bound to the value.</typeparam>
            <typeparam name="V">The type of the read Value.</typeparam>
            <seealso cref="T:TwinCAT.ValueAccess.ResultAccess" />
        </member>
        <member name="P:TwinCAT.Ads.ResultValue2`2.Source">
            <summary>
            Gets the source of the value (symbolic specifier/Address).
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:TwinCAT.Ads.ResultValue2`2.Timestamp">
            <summary>
            Gets the Timestamp of the Result.
            </summary>
            <value>The timestamp.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue2`2.#ctor(`0,TwinCAT.Ads.AdsErrorCode,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> struct.
            </summary>
            <param name="source">The source identifier.</param>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue2`2.#ctor(`0,TwinCAT.Ads.AdsErrorCode,`1,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> struct.
            </summary>
            <param name="source">The source identifier.</param>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="timestamp">The read time stamp.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ads.ResultValue2`2.#ctor(`0,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1"/> class.
            </summary>
            <param name="source">The source identifier.</param>
            <param name="errorResult">The error result.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.Ads.ResultWriteControl">
            <summary>
            Class ResultWriteControl.
            Implements the <see cref="T:TwinCAT.Ads.ResultAds" />
            </summary>
            <seealso cref="T:TwinCAT.Ads.ResultAds" />
        </member>
        <member name="M:TwinCAT.Ads.ResultWriteControl.#ctor(TwinCAT.Ads.AmsAddress,System.Boolean,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsStateCommand,TwinCAT.Ads.AdsState,TwinCAT.Ads.AdsState,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultWriteControl"/> class.
            </summary>
            <param name="address">The address.</param>
            <param name="succeeded">if set to <c>true</c> the Write control succeeded overall (Complete result).</param>
            <param name="errorCode">The error code.</param>
            <param name="requested">The requested.</param>
            <param name="original">The original.</param>
            <param name="reached">The reached.</param>
            <param name="latency">The latency.</param>
        </member>
        <member name="M:TwinCAT.Ads.ResultWriteControl.#ctor(TwinCAT.Ads.ResultWriteControl)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultWriteControl"/> class.
            </summary>
            <param name="copy">The copy.</param>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.s_empty">
            <summary>
            The empty object
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.ResultWriteControl.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultWriteControl"/>
            </summary>
            <value>The empty.</value>
        </member>
        <member name="M:TwinCAT.Ads.ResultWriteControl.Create(TwinCAT.Ads.AmsAddress,System.Boolean,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsStateCommand,TwinCAT.Ads.AdsState,TwinCAT.Ads.AdsState,System.TimeSpan)">
            <summary>
            Creates an <see cref="T:TwinCAT.Ads.ResultWriteControl"/> object.
            </summary>
            <param name="address">The address.</param>
            <param name="succeeded">if set to <c>true</c> [succeeded].</param>
            <param name="errorCode">The error code.</param>
            <param name="requested">The requested.</param>
            <param name="original">The original.</param>
            <param name="reached">The reached.</param>
            <param name="latency">The latency.</param>
            <returns>ResultWriteControl.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultWriteControl.CreateSucceeded(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AdsStateCommand,TwinCAT.Ads.AdsState,TwinCAT.Ads.AdsState,System.TimeSpan)">
            <summary>
            Creates a succeeding <see cref="T:TwinCAT.Ads.ResultWriteControl"/> object.
            </summary>
            <param name="address">The address.</param>
            <param name="requested">The requested.</param>
            <param name="original">The original.</param>
            <param name="reached">The reached.</param>
            <param name="latency">The latency.</param>
            <returns>ResultWriteControl.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultWriteControl.CreateFailed(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsStateCommand,TwinCAT.Ads.AdsState,TwinCAT.Ads.AdsState)">
            <summary>
            Creates a failed <see cref="T:TwinCAT.Ads.ResultWriteControl"/> object.
            </summary>
            <param name="address">The address.</param>
            <param name="errorCode">The error code.</param>
            <param name="requested">The requested.</param>
            <param name="original">The original.</param>
            <param name="reached">The reached.</param>
            <returns>ResultWriteControl.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultWriteControl.CreateFailed(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsStateCommand,TwinCAT.Ads.AdsState)">
            <summary>
            Creates a failed <see cref="T:TwinCAT.Ads.ResultWriteControl"/> object.
            </summary>
            <param name="address">The address.</param>
            <param name="errorCode">The error code.</param>
            <param name="requested">The requested.</param>
            <param name="original">The original.</param>
            <returns>ResultWriteControl.</returns>
        </member>
        <member name="M:TwinCAT.Ads.ResultWriteControl.CreateFailed(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AdsStateCommand)">
            <summary>
            Creates a failed <see cref="T:TwinCAT.Ads.ResultWriteControl"/> object.
            </summary>
            <param name="address">The address.</param>
            <param name="errorCode">The error code.</param>
            <param name="requested">The requested.</param>
            <returns>ResultWriteControl.</returns>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.Succeeded">
            <summary>
            Gets an indication if the WriteControl request has been succeeded overall.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.Address">
            <summary>
            The address
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.Requested">
            <summary>
            The <see cref="T:TwinCAT.Ads.AdsStateCommand"/> (Request)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.Original">
            <summary>
            The original state before the request is sent.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.AdsErrorCode">
            <summary>
            The <see cref="T:TwinCAT.Ads.AdsErrorCode"/> that was produced with the WriteControl/ReadStates.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.Reached">
            <summary>
            The reached <see cref="T:TwinCAT.Ads.AdsState"/> after the <see cref="T:TwinCAT.Ads.AdsStateCommand"/> request has been sent (Resulting state)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.ResultWriteControl.Latency">
            <summary>
            The latency/duration until the Result state has been reached.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.AdsDataTypeId">
            <summary>
            ADS data types.
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_VOID">
            <summary>
            Empty Type (0)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_INT8">
            <summary>
            Integer 8 Bit (16)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_UINT8">
            <summary>
            Unsigned integer 8 Bit (17)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_INT16">
            <summary>
            Integer 16 Bit (2)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_UINT16">
            <summary>
            Unsigned integer 16 Bit (18)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_INT32">
            <summary>
            Integer 32 Bit (3)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_UINT32">
            <summary>
            Unsigned Integer 32 Bit (19)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_INT64">
            <summary>
            LONG Integer 64 Bit (20)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_UINT64">
            <summary>
            Unsigned Long integer 64 Bit (21)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_REAL32">
            <summary>
            Real (32 Bit) (4)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_REAL64">
            <summary>
            Real 64 Bit (5)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_BIGTYPE">
            <summary>
            Blob (65)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_STRING">
            <summary>
            STRING (30)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_WSTRING">
            <summary>
            WSTRING (31)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_REAL80">
            <summary>
            ADS REAL80 (32)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_BIT">
            <summary>
            ADS BIT (33)
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_VARIANT">
            <summary>
            ADS VARIANT (12) 
            </summary>
        </member>
        <member name="F:TwinCAT.Ads.AdsDataTypeId.ADST_MAXTYPES">
            <summary>
            Internal Only
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader">
            <summary>
            Symbol Loader interface
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader.DefaultNotificationSettings">
            <summary>
            Gets/Sets the default notification settings for this SymbolLoader
            </summary>
            <value>The default notification settings.</value>
            <remarks>The Default notification Settings can be set on the SymbolLoader and is used as default
            on the different Symbols. On the symbol itself the <see cref="T:TwinCAT.Ads.NotificationSettings"/> can be overridden.</remarks>
            <example>
            Setting the DefaultNotificationSettings on the <see cref="T:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader"/> object:
            <code language="C#" title="Set DefaultNotificationSettings" source="..\..\Samples\Sample.Ads.AdsClientCore\SymbolBrowserV2Notifications.cs" region="DEFAULTNOTIFICATON_SAMPLE"/>
            </example>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader.ImageBaseAddress">
            <summary>
            Gets the image base address.
            </summary>
            <value>The image base address.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IAdsSymbolLoader.PlatformPointerSize">
            <summary>
            Gets the (byte) size of Pointers on the attached platform system.
            </summary>
            <value>The size of the platform pointer.</value>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.IContextMaskProvider">
            <summary>
            Interface IContextMaskProvider
            </summary>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IContextMaskProvider.ContextMask">
            <summary>
            Gets the ContextMask of the symbol, indicating the task the variable belongs to.
            If ContextMask is not zero use <see cref="F:TwinCAT.Ads.AdsTransMode.CyclicInContext"/> or <see cref="F:TwinCAT.Ads.AdsTransMode.OnChangeInContext"/> to add notifications.
            </summary>
        </member>
        <member name="T:TwinCAT.Ads.TypeSystem.IAdsSymbol">
            <summary>
            Interface IAdsSymbol
            </summary>
            <seealso cref="T:TwinCAT.TypeSystem.ISymbol" />
            <seealso cref="T:TwinCAT.TypeSystem.IProcessImageAddress" />
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IAdsSymbol.ImageBaseAddress">
            <summary>
            Gets the <see cref="T:TwinCAT.Ads.AmsAddress"/> of the Process Image
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:TwinCAT.Ads.TypeSystem.IAdsSymbol.DataTypeId">
            <summary>
            DataType identifier of the Symbol <see cref="T:TwinCAT.Ads.AdsDataTypeId"/>
            </summary>
            <value>Data type of the symbol.</value>
        </member>
        <member name="T:TwinCAT.Ams.AmsConfiguration">
            <summary>
            Static configuration of the Ams Router system.
            </summary>
            <remarks>If the router is intended to run seperately of the (virtual) system that instantiates the AdsClient or AdsServer (e.g. in UnitTests), some
            global static settings must be adopted to enable different network scenarious.
            In the default case the AdsServers and AdsClients uses the <see cref="F:System.Net.IPAddress.Loopback"/> TCP port <strong>0xBF02</strong> to communicate internally. If the systems of AdsServer/AdsClient is
            split from the router (e.g. running the router isolated in a virtual machine), the Router Endpoint must be set via <see cref="P:TwinCAT.Ams.AmsConfiguration.RouterEndPoint"/> setter.
            </remarks>
        </member>
        <member name="F:TwinCAT.Ams.AmsConfiguration.DEFAULT_TCP_PORT">
            <summary>
            The default TCP port (0xBF02, 48898), unsecured
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsConfiguration.DEFAULT_TCP_PORT_ADSSECURE">
            <summary>
            The default ADSSecure Port (0x1f50, 8016), secured
            </summary>
        </member>
        <member name="P:TwinCAT.Ams.AmsConfiguration.DefaultRouterEndPoint">
            <summary>
            Gets the default router end point (IPAddress.Loopback, Port 0xBF02)
            </summary>
            <value>The default router end point.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsConfiguration.RouterEndPoint">
            <summary>Gets or sets the default router <see cref="T:System.Net.IPEndPoint"/>.</summary>
            <value>The <see cref="T:System.Net.IPEndPoint"/> used by Ams Clients/Servers.</value>
            <remarks>
            <para>This setting allows to change the Router Endpoint - which listens by default on <strong>IPAddress 127.0.0.1, Port 0xBF02</strong>.
            An application for this could be to move the router to a different (virtual) system, separated from the system running
            the <strong>AdsServer</strong> or <strong>AdsClient</strong>.
            This endpoint can only be changed process wide and should be done before the first access to the Router occurs (e.g. getting the
            local NetId).</para>
            <para><strong>ATTENTION: Bending this Endpoint is not possible with the standard TwinCAT Router. As security feature the TwinCAT Router only
            accepts Loopback connections to 127.0.0.1, connection requests from the outside will be closed immediately.</strong></para>
            <para>
            The simplistic .NET Core Router implementation in class 'TwinCAT.Ads.AdsRouter.AmsTcpIpRouter' from nuget package
            <see href="https://www.nuget.org/packages/Beckhoff.TwinCAT.Ads.TcpRouter">'Beckhoff.TwinCAT.Ads.TcpRouter'</see> or the
            <see href="https://www.nuget.org/packages/Beckhoff.TwinCAT.Ads.AdsRouterConsole">'Beckhoff.TwinCAT.Ads.AdsRouterConsole'</see>
            doesn't have that restriction and can be used more flexible for use with virtual environments like VirtualMachines or Docker.
            flexible.</para>
            <para> The following sample demonstrates how to configure the (internal) RouterEndPoint to IPAddress 1.2.3.4:42 . This must be done before AdsServer or AdsClient are instantiated.
            <code>
            AmsConfiguration.RouterEndPoint = new IPEndpoint(IPAddress.Parse("1.2.3.4"),42);
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:TwinCAT.Ams.AmsConfiguration.RouterAddress">
            <summary>
            Gets the actually configured router address.
            </summary>
            <value>The router address.</value>
            <seealso cref="P:TwinCAT.Ams.AmsConfiguration.RouterEndPoint"/>
        </member>
        <member name="P:TwinCAT.Ams.AmsConfiguration.RouterPort">
            <summary>
            Gets actually configured router port.
            </summary>
            <value>The router port.</value>
            <seealso cref="P:TwinCAT.Ams.AmsConfiguration.RouterEndPoint"/>
        </member>
        <member name="T:TwinCAT.Ams.IRouterNotificationReceiver">
            <summary>
            Interface IRouterNotificationReceiver
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.IRouterNotificationReceiver.OnRouterNotification(TwinCAT.Ads.AmsRouterState)">
            <summary>
            Handler Function for a Router Notification.
            </summary>
            <param name="state">The route state.</param>
        </member>
        <member name="T:TwinCAT.Ams.ITcAdsHeader">
            <summary>
            Interface for marshalling a ADS Header object.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.ITcAdsHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
        </member>
        <member name="P:TwinCAT.Ams.ITcAdsHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ams.IAdsHeaderDump">
            <summary>
            Interface IAdsHeaderDump
            </summary>
        </member>
        <member name="M:TwinCAT.Ams.IAdsHeaderDump.Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsHeaderMarshaller">
            <summary>
            Class AdsHeaderMarshaller.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsHeaderMarshaller.Marshal(TwinCAT.Ams.ITcAdsHeader,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Marshals specified AdsHeader + Ads payload into a memory location.
            </summary>
            <param name="header">The ADS Header</param>
            <param name="dataPayload">The ADS Data payload.</param>
            <param name="destination">The destination memory (Full ADS Frame)</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:TwinCAT.Ams.EmptyAdsHeader">
            <summary>
            Class EmptyAdsHeader.
            Implements the <see cref="T:TwinCAT.Ams.ITcAdsHeader" />
            Implements the <see cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.ITcAdsHeader" />
            <seealso cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.EmptyAdsHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.EmptyAdsHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsReadRequestHeader">
            <summary>
            Class AdsReadRequestHeader.
            Implements the <see cref="T:TwinCAT.Ams.ITcAdsHeader" />
            Implements the <see cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.ITcAdsHeader" />
            <seealso cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadRequestHeader.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsReadRequestHeader"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadRequestHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsReadRequestHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadRequestHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsWriteRequestHeader">
            <summary>
            Class AdsWriteRequestHeader.
            Implements the <see cref="T:TwinCAT.Ams.ITcAdsHeader" />
            Implements the <see cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.ITcAdsHeader" />
            <seealso cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteRequestHeader.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsWriteRequestHeader"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteRequestHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsWriteRequestHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteRequestHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsWriteControlRequestHeader">
            <summary>
            Class AdsWriteControlRequestHeader.
            Implements the <see cref="T:TwinCAT.Ams.ITcAdsHeader" />
            Implements the <see cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.ITcAdsHeader" />
            <seealso cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteControlRequestHeader.#ctor(TwinCAT.Ads.AdsState,System.UInt16,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsWriteControlRequestHeader"/> class.
            </summary>
            <param name="state">The state.</param>
            <param name="deviceState">State of the device.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteControlRequestHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsWriteControlRequestHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteControlRequestHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsAddDeviceNotificationRequestHeader">
            <summary>
            Class AdsAddDeviceNotificationRequestHeader.
            Implements the <see cref="T:TwinCAT.Ams.ITcAdsHeader" />
            Implements the <see cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.ITcAdsHeader" />
            <seealso cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsAddDeviceNotificationRequestHeader.#ctor(System.UInt32,System.UInt32,System.Int32,TwinCAT.Ads.NotificationSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsAddDeviceNotificationRequestHeader"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="cbLength">Length of the cb.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsAddDeviceNotificationRequestHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsAddDeviceNotificationRequestHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsAddDeviceNotificationRequestHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsDeleteDeviceNotificationRequestHeader">
            <summary>
            Class AdsDeleteDeviceNotificationRequestHeader.
            Implements the <see cref="T:TwinCAT.Ams.ITcAdsHeader" />
            Implements the <see cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.ITcAdsHeader" />
            <seealso cref="T:TwinCAT.Ams.IAdsHeaderDump" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeleteDeviceNotificationRequestHeader.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsDeleteDeviceNotificationRequestHeader"/> class.
            </summary>
            <param name="notificationHandle">The notification handle.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeleteDeviceNotificationRequestHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsDeleteDeviceNotificationRequestHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeleteDeviceNotificationRequestHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsDeviceNotificationRequestHeader">
            <summary>
            Device notification request header
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeviceNotificationRequestHeader.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsDeviceNotificationRequestHeader"/> class.
            </summary>
            <param name="dataLength">Length of the data.</param>
            <param name="numStamps">The number stamps.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeviceNotificationRequestHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsDeviceNotificationRequestHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsReadWriteRequestHeader">
            <summary>
            ReadWrite Request header.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadWriteRequestHeader.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsReadWriteRequestHeader"/> class.
            </summary>
            <param name="indexGroup">The index group.</param>
            <param name="indexOffset">The index offset.</param>
            <param name="readLength">Length of the read.</param>
            <param name="writeLength">Length of the write.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadWriteRequestHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsReadWriteRequestHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadWriteRequestHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsReadDeviceInfoResponseHeader">
             <summary>
            ReadDeviceInfo Response header.
             </summary>
             <seealso cref="T:TwinCAT.Ams.ITcAdsHeader" />
             <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadDeviceInfoResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode,System.Byte,System.Byte,System.UInt16,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsReadDeviceInfoResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="majorVersion">The major version.</param>
            <param name="minorVersion">The minor version.</param>
            <param name="versionBuild">The version build.</param>
            <param name="deviceName">Name of the device (16 bytes max, ANSI)</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadDeviceInfoResponseHeader.Marshal(System.IO.BinaryWriter)">
            <summary>
            Marshals the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadDeviceInfoResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsReadDeviceInfoResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadDeviceInfoResponseHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsReadResponseHeader">
            <summary>
            Read response header.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsReadResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadResponseHeader.Marshal(System.IO.BinaryWriter)">
            <summary>
            Marshals the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsReadResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadResponseHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsWriteResponseHeader">
            <summary>
            Write response header.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsWriteResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteResponseHeader.Marshal(System.IO.BinaryWriter)">
            <summary>
            Marshals the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsWriteResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsReadStateResponseHeader">
            <summary>
            ReadState Response header.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadStateResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsReadStateResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="adsState">State of the ads.</param>
            <param name="deviceState">State of the device.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadStateResponseHeader.Marshal(System.IO.BinaryWriter)">
            <summary>
            Marshals the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadStateResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsReadStateResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsReadStateResponseHeader.StaticMarshalSize">
            <summary>
            Gets the MarshalSize of the <see cref="T:TwinCAT.Ams.AdsReadStateResponseHeader"/> without counting the payload data of the AdsFrame.
            </summary>
            <value>The size of the static marshal.</value>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadStateResponseHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsWriteControlResponseHeader">
            <summary>
            Write control Response header.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteControlResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsWriteControlResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteControlResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsWriteControlResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsWriteControlResponseHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsAddDeviceNotificationResponseHeader">
            <summary>
            Add Device Notification Response header.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsAddDeviceNotificationResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsAddDeviceNotificationResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="notificationHandle">The notification handle.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsAddDeviceNotificationResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsAddDeviceNotificationResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsAddDeviceNotificationResponseHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsDeleteDeviceNotificationResponseHeader">
            <summary>
            Delete DeviceNotification Response Header
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeleteDeviceNotificationResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsDeleteDeviceNotificationResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeleteDeviceNotificationResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsDeleteDeviceNotificationResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsDeleteDeviceNotificationResponseHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AdsReadWriteResponseHeader">
            <summary>
            ReadWrite response header.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadWriteResponseHeader.#ctor(TwinCAT.Ads.AdsErrorCode,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AdsReadWriteResponseHeader"/> class.
            </summary>
            <param name="result">The result.</param>
            <param name="dataLength">Length of the data.</param>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadWriteResponseHeader.Marshal(System.Span{System.Byte})">
            <summary>
            Marshals the Header (without payload data) to specified memory location.
            </summary>
            <param name="destination">The writer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.Ams.AdsReadWriteResponseHeader.MarshalSize">
            <summary>
            Gets the Marshal Size of the header in bytes (without counting the payload data of the AdsFrame)
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AdsReadWriteResponseHeader.TwinCAT#Ams#IAdsHeaderDump#Dump">
            <summary>
            Dumps the Header (only for internal debug purposes)
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AmsTcpHeaderFlags">
            <summary>
            Enum AmsTcpHeaderFlags
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ams.AmsTcpHeaderFlags.Command">
            <summary>
            AmsCommand (AMS_TCP_PORT_AMS_CMD, 0x0000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsTcpHeaderFlags.PortClose">
            <summary>
            Port Close command (AMS_TCP_PORT_CLOSE,	0x0001)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsTcpHeaderFlags.PortConnect">
            <summary>
            Port connect command (AMS_TCP_PORT_CONNECT, 0x1000)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsTcpHeaderFlags.RouterNotification">
            <summary>
            Router Notification (AMS_TCP_PORT_ROUTER_NOTE, 0x1001)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsTcpHeaderFlags.GetLocalNetId">
            <summary>
            Get LocalNetId header
            </summary>
        </member>
        <member name="T:TwinCAT.Ams.TcpHeader">
            <summary>
            Struct TcpHeader
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Ams.TcpHeader.bClose">
            <summary>
            Reserved / Not used
            </summary>
        </member>
        <member name="P:TwinCAT.Ams.TcpHeader.cbSize">
            <summary>
            Size of the Data
            </summary>
        </member>
        <member name="P:TwinCAT.Ams.TcpHeader.MarshalSize">
            <summary>
            Gets the size of the TcpHeader (6 Bytes)
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:TwinCAT.Ams.TcpHeader.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpHeader"/> struct.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpHeader.#ctor(TwinCAT.Ams.AmsTcpHeaderFlags,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpHeader"/> struct.
            </summary>
            <param name="flags">The flags.</param>
            <param name="size">The size.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpHeader.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpHeader"/> struct.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:TwinCAT.Ams.TcpHeader.Empty">
            <summary>
            Gets an empty, uninitialized <see cref="T:TwinCAT.Ams.TcpHeader"/>.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpFrame">
            <summary>
            Class TcpFrame.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ams.TcpFrame.flags">
            <summary>
            The Header flags.
            </summary>
        </member>
        <member name="P:TwinCAT.Ams.TcpFrame.Flags">
            <summary>
            Gets the <see cref="T:TwinCAT.Ams.AmsTcpHeaderFlags"/>.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="F:TwinCAT.Ams.TcpFrame.dataSize">
            <summary>
            Size of the Data
            </summary>
        </member>
        <member name="P:TwinCAT.Ams.TcpFrame.DataSize">
            <summary>
            Gets the size of the data.
            </summary>
            <value>The size of the data.</value>
        </member>
        <member name="F:TwinCAT.Ams.TcpFrame.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="P:TwinCAT.Ams.TcpFrame.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:TwinCAT.Ams.TcpFrame.MarshalSize">
            <summary>
            Gets the (marshalling) size of the <see cref="T:TwinCAT.Ams.TcpFrame"/>
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpFrame"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.#ctor(TwinCAT.Ams.AmsTcpHeaderFlags,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpFrame"/> class.
            </summary>
            <param name="flags">The flags.</param>
            <param name="tcpData">The data (not including the header)</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.#ctor(TwinCAT.Ams.TcpHeader,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="data">The data (not including the Header)</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpFrame"/> class.
            </summary>
            <param name="bufferIncludingHeader">The Data buffer (including the Header)</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="tcpData">Memory containing the data without header.</param>
        </member>
        <member name="P:TwinCAT.Ams.TcpFrame.Empty">
            <summary>
            Gets an Empty / Uninitialized frame.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.Dump">
            <summary>
            Dumps this instance.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.GetBytes">
            <summary>
            Gets a Bytes array from this <see cref="T:TwinCAT.Ams.TcpFrame"/>.
            </summary>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrame.TryWriteBytes(System.Span{System.Byte})">
            <summary>
            Writes the Raw bytes of this <see cref="T:TwinCAT.Ams.TcpFrame"/> into the specified memory location.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns><c>true</c> if succeeded, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.Ams.TcpAmsCommandFrame">
            <summary>
            TcpFrame class for AmsCommands.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpAmsCommandFrame.#ctor(TwinCAT.Ams.AmsCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpAmsCommandFrame"/> class.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpAmsCommandFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpAmsCommandFrame"/> class.
            </summary>
            <param name="buffer">The memory location.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpAmsCommandFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpAmsCommandFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">header</exception>
        </member>
        <member name="P:TwinCAT.Ams.TcpAmsCommandFrame.Command">
            <summary>
            Gets the <see cref="T:TwinCAT.Ams.AmsCommand"/> from this <see cref="T:TwinCAT.Ams.TcpAmsCommandFrame"/>
            </summary>
            <value>The command.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpGetNetIdRequestFrame">
            <summary>
            TcpFrame class for GetNetIdRequest.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpGetNetIdRequestFrame.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpGetNetIdRequestFrame"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.Ams.TcpGetNetIdRequestFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpGetNetIdRequestFrame"/> class.
            </summary>
            <param name="buffer">The memory location.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpGetNetIdRequestFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpGetNetIdRequestFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">header</exception>
        </member>
        <member name="P:TwinCAT.Ams.TcpGetNetIdRequestFrame.Reserved">
            <summary>
            Reserved / DoNotUse!
            </summary>
            <value>The reserved.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpGetNetIdResponseFrame">
            <summary>
            TcpFrame for GetNetIdResponse.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpGetNetIdResponseFrame.#ctor(TwinCAT.Ads.AmsNetId)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpGetNetIdResponseFrame"/> class.
            </summary>
            <param name="netId">The net identifier.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpGetNetIdResponseFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpGetNetIdResponseFrame"/> class.
            </summary>
            <param name="buffer">The memory location.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpGetNetIdResponseFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpGetNetIdResponseFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">header</exception>
        </member>
        <member name="P:TwinCAT.Ams.TcpGetNetIdResponseFrame.NetId">
            <summary>
            Gets the net embedded in this <see cref="T:TwinCAT.Ams.TcpGetNetIdResponseFrame"/>.
            </summary>
            <value>The net identifier.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpPortConnectRequestFrame">
            <summary>
            TcpFrame for PortConnectRequest.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpPortConnectRequestFrame.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortConnectRequestFrame"/> class.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpPortConnectRequestFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortConnectRequestFrame"/> class.
            </summary>
            <param name="buffer">The memory location.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpPortConnectRequestFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortConnectRequestFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">header</exception>
        </member>
        <member name="P:TwinCAT.Ams.TcpPortConnectRequestFrame.Port">
            <summary>
            Gets the embedded port of this <see cref="T:TwinCAT.Ams.TcpPortConnectRequestFrame"/>
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpPortConnectResponseFrame">
            <summary>
            <see cref="T:TwinCAT.Ams.TcpFrame"/> for PortConnectResponse.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpPortConnectResponseFrame.#ctor(TwinCAT.Ads.AdsErrorCode,TwinCAT.Ads.AmsAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortConnectResponseFrame"/> class.
            </summary>
            <param name="errorCode">The error.</param>
            <param name="address">The address.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpPortConnectResponseFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortConnectResponseFrame"/> class.
            </summary>
            <param name="buffer">The memory location.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpPortConnectResponseFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortConnectResponseFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">header</exception>
        </member>
        <member name="P:TwinCAT.Ams.TcpPortConnectResponseFrame.Address">
            <summary>
            Gets the in the <see cref="T:TwinCAT.Ams.TcpPortConnectResponseFrame"/> embedded <see cref="T:TwinCAT.Ads.AmsAddress"/>.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:TwinCAT.Ams.TcpPortConnectResponseFrame.ErrorCode">
            <summary>
            Gets the error code embedded in the <see cref="T:TwinCAT.Ams.TcpPortConnectResponseFrame"/>.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpPortCloseRequestFrame">
            <summary>
            TcpFrame for PortCloseRequest.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpPortCloseRequestFrame.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortCloseRequestFrame"/> class.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpPortCloseRequestFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortCloseRequestFrame"/> class.
            </summary>
            <param name="buffer">The memory location.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpPortCloseRequestFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortCloseRequestFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">header</exception>
        </member>
        <member name="P:TwinCAT.Ams.TcpPortCloseRequestFrame.Port">
            <summary>
            Gets the embedded port number embedded in the <see cref="T:TwinCAT.Ams.TcpPortCloseRequestFrame"/>.
            </summary>
            <value>The port.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpPortCloseResponseFrame">
            <summary>
            TcpFrame for PortCloseResponse.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpPortCloseResponseFrame.#ctor(TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortCloseResponseFrame"/> class.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpPortCloseResponseFrame.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpPortCloseResponseFrame"/> class.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="P:TwinCAT.Ams.TcpPortCloseResponseFrame.ErrorCode">
            <summary>
            Gets the embedded <see cref="T:TwinCAT.Ads.AdsErrorCode"/> in the frame.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:TwinCAT.Ams.TcpRouterNotificationFrame">
            <summary>
            TcpFrame embedding an RouterNotification.
            Implements the <see cref="T:TwinCAT.Ams.TcpFrame" />
            </summary>
            <exclude/>
            <seealso cref="T:TwinCAT.Ams.TcpFrame" />
        </member>
        <member name="M:TwinCAT.Ams.TcpRouterNotificationFrame.#ctor(TwinCAT.Ads.AmsRouterState)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpRouterNotificationFrame"/> class.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpRouterNotificationFrame.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpRouterNotificationFrame"/> class.
            </summary>
            <param name="buffer">The memory location.</param>
        </member>
        <member name="M:TwinCAT.Ams.TcpRouterNotificationFrame.#ctor(TwinCAT.Ams.TcpHeader,System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.TcpRouterNotificationFrame"/> class.
            </summary>
            <param name="header">The header.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">header</exception>
        </member>
        <member name="T:TwinCAT.Ams.AmsHeaderMarshaller">
            <summary>
            Marshalling class for AmsHeader
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeaderMarshaller.Marshal(System.Span{System.Byte},TwinCAT.Ams.AmsHeader)">
            <summary>
            Marshals the specified header to the buffer span.
            </summary>
            <param name="data">The data.</param>
            <param name="header">The header.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeaderMarshaller.MarshalSize">
            <summary>
            Gets Marshall size of the <see cref="T:TwinCAT.Ams.AmsHeader"/>
            </summary>
            <value>The size of.</value>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeaderMarshaller.Unmarshal(System.IO.BinaryReader,TwinCAT.Ams.AmsHeader@)">
            <summary>
            Unmarshals a <see cref="T:TwinCAT.Ams.AmsHeader"/> from the reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="header">The header.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeaderMarshaller.Unmarshal(System.Byte[],TwinCAT.Ams.AmsHeader@)">
            <summary>
            Unmarshals the header from the specified byte array.
            </summary>
            <param name="data">The data.</param>
            <param name="header">The header.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeaderMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ams.AmsHeader@)">
            <summary>
            Unmarshals the <see cref="T:TwinCAT.Ams.AmsHeader"/> from memory.
            </summary>
            <param name="memory">The memory localtion</param>
            <param name="header">The Ams Header</param>
            <returns>Number of unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AmsCommandFrameMarshaller">
            <summary>
            Class AmsCommandFrameMarshaller.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommandFrameMarshaller.Marshal(TwinCAT.Ams.AmsCommand)">
            <summary>
            Marshals the the <see cref="T:TwinCAT.Ams.AmsCommand"/> to a new created byte array.
            </summary>
            <param name="command">The AMS Command."/></param>
            <returns>The created byte array.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommandFrameMarshaller.MarshalSize(TwinCAT.Ams.AmsCommand)">
            <summary>
            Gets the marshalling size of the <see cref="T:TwinCAT.Ams.AmsCommand"/>.
            </summary>
            <param name="command">The AMS Command.</param>
            <returns>The number of necessary bytes for marshalling.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommandFrameMarshaller.Marshal(TwinCAT.Ams.AmsCommand,System.Span{System.Byte})">
            <summary>
            Marshals the <see cref="T:TwinCAT.Ams.AmsCommand"/> to the specified Memory location
            </summary>
            <param name="command">The command.</param>
            <param name="destinationData">The memory location</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommandFrameMarshaller.Unmarshal(System.IntPtr,TwinCAT.Ams.AmsCommand@)">
            <summary>
            Unmarshals the specified memory to an <see cref="T:TwinCAT.Ams.AmsCommand"/>
            </summary>
            <param name="pAmsCmd">Pointer to memory that contains raw representation of the <see cref="T:TwinCAT.Ams.AmsCommand"/></param>
            <param name="command">The AMS Command.</param>
            <returns>Number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommandFrameMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ams.AmsCommand@)">
            <summary>
            Unmarshals the content of the specified buffer to an <see cref="T:TwinCAT.Ams.AmsCommand" />
            </summary>
            <param name="buffer">The memory location</param>
            <param name="command">The AMS Command.</param>
            <returns>The number of unmarshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.Ams.TcpHeaderMarshaller">
            <summary>
            Marshalling class for TcpHeaders (without TcAmsCommand load).
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.TcpHeaderMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ams.TcpHeader@)">
            <summary>
            Unmarshals a <see cref="T:TwinCAT.Ams.TcpHeader"/> object from specified memory
            </summary>
            <param name="buffer">The memory location / buffer.</param>
            <param name="header">The TCP header.</param>
            <returns>Number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpHeaderMarshaller.Unmarshal(System.Byte[],System.Int32,TwinCAT.Ams.TcpHeader@)">
            <summary>
            Unmarshals the <see cref="T:TwinCAT.Ams.TcpHeader"/> from byte array.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="header">The header.</param>
            <returns>The Number of unmarshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpHeaderMarshaller.Marshal(TwinCAT.Ams.TcpHeader,System.Span{System.Byte})">
            <summary>
            Marshals the the <see cref="T:TwinCAT.Ams.TcpHeader"/> to the specified memory location.
            </summary>
            <param name="header">The header.</param>
            <param name="data">The data.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="T:TwinCAT.Ams.TcpFrameMarshaller">
            <summary>
            Marshaller class marshalling the complete TcpFrame with included AmsCommandFrame
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrameMarshaller.MarshalSize(TwinCAT.Ams.AmsCommand)">
            <summary>
            Gets the marshal size in bytes of the <see cref="T:TwinCAT.Ams.AmsCommand"/> when its packaged into an <see cref="T:TwinCAT.Ams.TcpFrame"/>.
            </summary>
            <param name="command">The command.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrameMarshaller.Marshal(TwinCAT.Ams.AmsCommand,System.Span{System.Byte})">
            <summary>
            Marshals the <see cref="T:TwinCAT.Ams.AmsCommand"/> into bytes, that represent a <see cref="T:TwinCAT.Ams.TcpFrame"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="destination">TcpFrame in bytes.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrameMarshaller.Marshal(TwinCAT.Ams.AmsCommand)">
            <summary>
            Marshals the specified command into an byte array representing a full <see cref="T:TwinCAT.Ams.TcpFrame"/>,
            </summary>
            <param name="command">The command.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrameMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Ams.TcpFrame@)">
            <summary>
            Unmarshals the data in the buffer to its appropriate <see cref="T:TwinCAT.Ams.TcpFrame"/>.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="frame">The frame.</param>
            <returns>The number of unmarshalled bytes.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrameMarshaller.Marshal(TwinCAT.Ams.TcpFrame,System.Span{System.Byte})">
            <summary>
            Marshals the <see cref="T:TwinCAT.Ams.TcpFrame"/> to the specified memory location.
            </summary>
            <param name="frame">The frame.</param>
            <param name="destination">The buffer.</param>
            <returns>The number of marshalled bytes.</returns>
        </member>
        <member name="M:TwinCAT.Ams.TcpFrameMarshaller.MarshalSize(TwinCAT.Ams.TcpFrame)">
            <summary>
            Gets the marshal size of the frame (in bytes).
            </summary>
            <param name="frame">The frame.</param>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentNullException">frame</exception>
        </member>
        <member name="T:TwinCAT.Ams.AmsHeader">
            <summary>
            Class AmsHeader.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ams.AmsHeader._target">
            <summary>
            The target address
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsHeader._sender">
            <summary>
            The sender address
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsHeader._commandId">
            <summary>
            The command identifier
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsHeader._stateFlags">
            <summary>
            The state flags
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsHeader._cbData">
            <summary>
            Number of bytes as data.
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsHeader._errCode">
            <summary>
            The error code
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsHeader._hUser">
            <summary>
            User information.
            </summary>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeader.#ctor(TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AmsAddress,TwinCAT.Ads.AdsCommandId,TwinCAT.Ams.AmsStateFlags,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AmsHeader"/> class.
            </summary>
            <param name="target">The target address.</param>
            <param name="sender">The sender address.</param>
            <param name="commandId">The command identifier.</param>
            <param name="stateFlags">The state flags.</param>
            <param name="cbData">Amount of data bytes.</param>
            <param name="errCode">The error code.</param>
            <param name="hUser">User tag.</param>
            <exception cref="T:System.ArgumentNullException">
            target
            or
            sender
            </exception>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AmsHeader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeader.#ctor(TwinCAT.Ams.AmsHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AmsHeader"/> class.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.MarshalSize">
            <summary>
            Gets the marshalling size of this <see cref="T:TwinCAT.Ams.AmsHeader"/>.
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeader.Dump">
            <summary>
            Dumps this instance.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeader.ReverseTargets">
            <summary>
            Exchanges Sender and Target
            </summary>
        </member>
        <member name="M:TwinCAT.Ams.AmsHeader.Reverse">
            <summary>
            Reverses Request --&gt; Response and turns Targets.
            </summary>
            <returns>TcAmsHeader.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.IsRequest">
            <summary>
            Gets a value indicating whether this instance is an ADS Request
            </summary>
            <value><c>true</c> if ADS Request; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.IsResponse">
            <summary>
            Gets a value indicating whether this instance is an ADS Response.
            </summary>
            <value><c>true</c> if ADS Response; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.Target">
            <summary>
            Gets or sets the target address.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.Sender">
            <summary>
            Gets or sets the Sender address
            </summary>
            <value>The sender.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.CommandId">
            <summary>
            Gets the command identifier.
            </summary>
            <value>The command identifier.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.StateFlags">
            <summary>
            Gets the state flags.
            </summary>
            <value>The state flags.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.CbData">
            <summary>
            Gets the number of embedded data bytes.
            </summary>
            <value>Number of data bytes.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.ErrCode">
            <summary>
            Gets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsHeader.HUser">
            <summary>
            Gets the UserId / Tag
            </summary>
            <value>The h user.</value>
        </member>
        <member name="T:TwinCAT.Ams.AmsCommand">
            <summary>
            Class AmsCommand.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ams.AmsCommand.amsHeader">
            <summary>
            The AMS HEader
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsCommand._data">
            <summary>
            The Data bound in the <see cref="T:TwinCAT.Ams.AmsCommand"/>
            </summary>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommand.#ctor(TwinCAT.Ams.AmsHeader,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AmsCommand"/> class.
            </summary>
            <param name="amsHeader">The ams header.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AmsCommand"/> class.
            </summary>
        </member>
        <member name="P:TwinCAT.Ams.AmsCommand.IsRequest">
            <summary>
            Gets a value indicating whether this command is an ADS Request
            </summary>
            <value><c>true</c> if this instance is request; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsCommand.IsResponse">
            <summary>
            Gets a value indicating whether this command is an ADS Response
            </summary>
            <value><c>true</c> if this instance is response; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsCommand.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:TwinCAT.Ams.AmsCommand.Data">
            <summary>
            Gets or sets the data of the command.
            </summary>
            <value>The data.</value>
        </member>
        <member name="M:TwinCAT.Ams.AmsCommand.Dump">
            <summary>
            Dumps this instance.
            </summary>
            <returns>System.String.</returns>   
        </member>
        <member name="T:TwinCAT.Ams.AmsErrorResponse">
            <summary>
            Class AmsErrorResponse.
            Implements the <see cref="T:TwinCAT.Ams.AmsCommand" />
            </summary>
            <seealso cref="T:TwinCAT.Ams.AmsCommand" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Ams.AmsErrorResponse.#ctor(TwinCAT.Ams.AmsHeader,TwinCAT.Ads.AdsErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ams.AmsErrorResponse"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="error">The error.</param>
            <exception cref="T:System.ArgumentNullException">request</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TwinCAT.Ams.AmsErrorResponse.Dump">
            <summary>
            Dumps this instance.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwinCAT.Ams.AmsStateFlags">
            <summary>
            The AmsStateFlags enumeration
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.Response">
            <summary>
            The response (AMSCMDSF_RESPONSE)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.NoReturn">
            <summary>
            (AMSCMDSF_NORETURN)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.AdsCommand">
            <summary>
            AdsCommand
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.SysCommand">
            <summary>
            Internal generated cmds (AMSCMDSF_SYSCMD)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.HighPriority">
            <summary>
            High Priority (R0 to R0 checked at task begin, AMSCMDSF_HIGHPRIO)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.TimeStampAdded">
            <summary>
            (cbData um 8 Byte vergrößert, AMSCMDSF_TIMESTAMPADDED)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.Udp">
            <summary>
            (UDP instead of TCP, AMSCMDSF_UDP)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.InitCmd">
            <summary>
            (command during init phase of TwinCAT, AMSCMDSF_INITCMD)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.Broadcast">
            <summary>
            (AMSCMDSF_BROADCAST)
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.MaskAdsRequest">
            <summary>
            Mask Ads Request
            </summary>
        </member>
        <member name="F:TwinCAT.Ams.AmsStateFlags.MaskAdsResponse">
            <summary>
            Mask Ads Response
            </summary>
        </member>
        <member name="T:TwinCAT.ISymbolServerProvider">
            <summary>
            Interface ISymbolServerProvider
            </summary>
        </member>
        <member name="P:TwinCAT.ISymbolServerProvider.SymbolServer">
            <summary>
            Gets the symbol server.
            </summary>
            <value>The symbol server.
            To initially create this information the connection must be established.
            </value>
        </member>
        <member name="T:TwinCAT.IConnectionStateProvider">
            <summary>
            Interface IConnectionStateProvider
            </summary>
        </member>
        <member name="P:TwinCAT.IConnectionStateProvider.ConnectionState">
            <summary>
            Gets the current Connection state of the <see cref="T:TwinCAT.IConnectionStateProvider" />
            </summary>
            <value>The state of the connection.</value>
            <remarks>The Connection state changes only if the <see cref="T:TwinCAT.IConnection"/> is established / shut down
            or active communication is triggered by the User of the <see cref="T:TwinCAT.IConnection"/> object.
            </remarks>
            <example>
            The following sample shows how to keep the <see cref="P:TwinCAT.IConnectionStateProvider.ConnectionState"/> updated by triggering ADS Communication.
            <code language="C#" title="Trigger ConnectionState changes in WPF Applications" source="..\..\Samples\TwinCAT.ADS.NET_Samples\40_ADS.NET_WPFConnectionObserver\MainWindow.xaml.cs" region="CODE_SAMPLE" />
            </example>   
            <seealso cref="E:TwinCAT.IConnectionStateProvider.ConnectionStateChanged"/>
        </member>
        <member name="E:TwinCAT.IConnectionStateProvider.ConnectionStateChanged">
            <summary>
            Occurs when connection status of the <see cref="T:TwinCAT.IConnectionStateProvider"/> has been changed.
            </summary>
            <remarks>The Connection state changes only if the <see cref="T:TwinCAT.IConnection"/> is established / shut down
            or active communication is triggered by the User of the <see cref="T:TwinCAT.IConnection"/> object.
            </remarks>
            <example>
            The following sample shows how to keep the <see cref="P:TwinCAT.IConnectionStateProvider.ConnectionState"/> updated by triggering ADS Communication.
            <code language="C#" title="Trigger ConnectionState changes in WPF Applications" source="..\..\Samples\TwinCAT.ADS.NET_Samples\40_ADS.NET_WPFConnectionObserver\MainWindow.xaml.cs" region="CODE_SAMPLE" />
            </example>   
            <seealso cref="P:TwinCAT.IConnectionStateProvider.ConnectionState"/>
        </member>
        <member name="T:TwinCAT.ConnectionStatisticsInfo">
            <summary>
            Struct ConnectionStatisticsInfo
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ConnectionStatisticsInfo.#ctor(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ConnectionStatisticsInfo"/> struct.
            </summary>
            <param name="totalCycles">The total cycles.</param>
            <param name="totalSucceeded">The total succeeded.</param>
            <param name="totalErrors">The total errors.</param>
            <param name="timeToLastSucceed">The time to last succeed.</param>
        </member>
        <member name="F:TwinCAT.ConnectionStatisticsInfo.TotalCycles">
            <summary>
            The total cycles
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStatisticsInfo.TotalSucceeded">
            <summary>
            The total succeeded cycles
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStatisticsInfo.TotalCommunicationErrors">
            <summary>
            The total communication errors
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStatisticsInfo.TimeToLastSucceed">
            <summary>
            The time to last succeed
            </summary>
        </member>
        <member name="T:TwinCAT.IConnectionStateObserver">
            <summary>
            Interface for a Connection state watcher (observer)
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.LastAccessAt">
            <summary>
            Gets the DateTime of the last read/write access
            </summary>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.LastSucceededAt">
            <summary>
            Gets the Date/Time of the last succeeded ADS communication/Roundtrip.
            </summary>
            <value>The Date/Time value.</value>
            <remarks>A successful communication is also a negative ADS response (not  <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>) that is not classified as communication/tripping error (TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors).
            </remarks>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.LastErrorAt">
            <summary>
            Gets the last error (negative response) time
            </summary>
            <value>The last error time.</value>
            <remarks>This is the Date/Time of the last ADS request that was responded <b>not</b> with <see cref="F:TwinCAT.Ads.AdsErrorCode.NoError"/>.
            This can mean simply a negative response.
            </remarks>
            <seealso cref="P:TwinCAT.IConnectionStateObserver.LastCommunicationErrorAt"/>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.LastCommunicationErrorAt">
            <summary>
            Gets the last communication error date/time.
            </summary>
            <value>The last communication error date/time.
            </value>
            <remarks>The communication errors are the errors that are classified as communication tripping errors (Network communication problems e.g. device not reachable,TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors)</remarks>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.TotalCycles">
            <summary>
            Gets the total number of ADS Accesses (Succeeded or Failed)
            </summary>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.TotalSucceded">
            <summary>
            Gets the number of succeeded Accesses.
            </summary>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.TotalErrors">
            <summary>
            Gets the total number of negative ADS responses.
            </summary>
            <value>The total number of negative ADS responses.
            </value>
            <remarks>This number includes all communication/tripping errors and succeeded negative ADS responses.</remarks>ast succeeded
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.TotalCommunicationErrors">
            <summary>
            Gets the communication error count.
            </summary>
            <value>The communication error count.</value>
            <remarks>The communication errors are the errors that are classified as communication tripping errors (Network communication problems e.g. device not reachable, TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors)</remarks>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.CommunicationErrorsSinceLastSucceeded">
            <summary>
            Gets the number of communication errors since the last successful access
            </summary>
            <value></value>
            <remarks>Only communication (tripping, TwinCAT.Ads.FailFastHandlerInterceptor.TrippingErrors) errors count here. A succeeded roundtrip (non tripping)
            sets this value to zero.
            </remarks>
        </member>
        <member name="P:TwinCAT.IConnectionStateObserver.TimeToLastSucceed">
            <summary>
            Gets the age of the last succeeded access.
            </summary>
            <remarks>Returns the TimeSpan to the time with the last succeeded Access. This Information can be used to get a measure of the Quality of the current
            connection - at least when frequent communication is done over the connection.
            </remarks>
        </member>
        <member name="M:TwinCAT.IConnectionStateObserver.GetConnectionStatistics">
            <summary>
            Get statistics
            </summary>
            <returns>ConnectionStatisticsInfo.</returns>
        </member>
        <member name="T:TwinCAT.ILoggerProvider">
            <summary>
            Interface ILoggerProvider
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.ILoggerProvider.Logger">
            <summary>
            Gets the logger interface
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:TwinCAT.IConnection">
            <summary>
            Interface IConnection
            </summary>
        </member>
        <member name="P:TwinCAT.IConnection.Id">
            <summary>
            Gets the Connection Identifier .
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TwinCAT.IConnection.IsConnected">
            <summary>
            Gets a value indicating whether the local ADS port was opened successfully. It
            does not indicate if the target port is available. Use the method ReadState to
            determine if the target port is available.
            </summary>
        </member>
        <member name="M:TwinCAT.IConnection.Close">
            <summary>
            Closes this <see cref="T:TwinCAT.IConnection"/>
            </summary>
        </member>
        <member name="M:TwinCAT.IConnection.Connect">
            <summary>
            (Re)Connects the <see cref="T:TwinCAT.IConnection" /> when disconnected.
            </summary>
            <returns><c>true</c> if connected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.IConnection.Disconnect">
            <summary>
            Disconnects this <see cref="T:TwinCAT.IConnection" />.
            </summary>
            <returns><c>true</c> if disconnected, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:TwinCAT.IConnection.Timeout">
            <summary>
            Gets the timeout (in milliseconds)
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:TwinCAT.IConnection.Session">
            <summary>
            Gets the session that initiated this <see cref="T:TwinCAT.IConnection"/>
            </summary>
            <remarks>The Session can be null on standalone connections.</remarks>
            <value>The session or NULL</value>
        </member>
        <member name="P:TwinCAT.IConnection.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="T:TwinCAT.SymbolsLoadMode">
            <summary>
            Enum SymbolsLoadMode
            </summary>
        </member>
        <member name="F:TwinCAT.SymbolsLoadMode.Flat">
            <summary>
            Loads the Symbols organized as Flat List
            </summary>
        </member>
        <member name="F:TwinCAT.SymbolsLoadMode.VirtualTree">
            <summary>
            Loads the Symbols organized as Virtual tree (Symbol Parent - Child relationships)
            </summary>
        </member>
        <member name="F:TwinCAT.SymbolsLoadMode.DynamicTree">
            <summary>
            Loads the Symbols as a Virtual tree with Dynamic Symbols (Only available within versions > 4.X of this ADS Api)
            </summary>
        </member>
        <member name="T:TwinCAT.IValueFactorySettings">
            <summary>
            Interface IValueFactorySettings
            </summary>
        </member>
        <member name="P:TwinCAT.IValueFactorySettings.ValueAccessMode">
            <summary>
            Gets or sets the value access mode.
            </summary>
            <value>The value access mode.</value>
        </member>
        <member name="P:TwinCAT.IValueFactorySettings.NonCachedArrayElements">
            <summary>
            Gets or sets the setting to create ArrayElements "On-The-Fly" (Default True)
            </summary>
            <value>The value access mode.</value>
        </member>
        <member name="P:TwinCAT.IValueFactorySettings.ExpandArrayValues">
            <summary>
            Gets or sets a value indicating whether the Value Factory automatically expands ArrayValues to its Elements (Default: true)
            </summary>
            <remarks>Actually, this takes place when DynamicSymbols are created. Array Elements are created on-access to the Array, so that they can be accessed by
            a JSON Serializer without further expanding. If this property is set to false, then an array element is only created on access!</remarks>
            <value><c>true</c> if [create array elements]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.IValueFactorySettings.ValueCreation">
            <summary>
            Gets or sets the value creation mode.
            </summary>
            <value>The dynamic value mode.</value>
        </member>
        <member name="P:TwinCAT.IValueFactorySettings.ValueUpdateMode">
            <summary>
            Gets or sets the value update mode.
            </summary>
            <remarks>
            <list type="table">
            <listheader><term>Mode</term><description>Description</description></listheader>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Immediately"/></term><description>Writes the values of this DynamicValue instantly when setting its value or the value
            of its child members/elements.</description></item>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Triggered"/></term><description>Caches internally the value of this DynamicValue until the DynamicValue.Write method is called. This reduces
            ADS rountrips, if one or more member/element values should be changed. Furthermore the write on the destination system happens
            consistently in one ADS Write operation, which could be important for dependent properties/members/elements.</description></item>
            </list>
            </remarks>
            <value>The value update mode.</value>
        </member>
        <member name="T:TwinCAT.ISymbolLoaderSettings">
            <summary>
            Interface ISymbolLoaderSettings
            </summary>
        </member>
        <member name="P:TwinCAT.ISymbolLoaderSettings.SymbolsLoadMode">
            <summary>
            Gets or sets the symbols load mode.
            </summary>
            <value>The symbols load mode.</value>
        </member>
        <member name="T:TwinCAT.IAdsClientSettings">
            <summary>
            Settings for the Ads client
            </summary>
        </member>
        <member name="P:TwinCAT.IAdsClientSettings.AutomaticReconnection">
            <summary>
            Gets or sets a value indicating whether Disconnect connections can be reconnected.
            </summary>
            <value><c>true</c> if Disconnect connections can be reconnected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.ConnectionState">
            <summary>
            Connection state enumeration
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionState.None">
            <summary>
            Unknown / Uninitialized
            </summary>
            <remarks>The connection is in Unknown / Uninitialized state. This state can only be shown if no connection was
            established yet.</remarks>
        </member>
        <member name="F:TwinCAT.ConnectionState.Disconnected">
            <summary>
            Disconnected
            </summary>
            <remarks>The connection was explicitly disconnected and is now in disconnected state.</remarks>
        </member>
        <member name="F:TwinCAT.ConnectionState.Connected">
            <summary>
            Connected
            </summary>
            <remarks>The connection is established and active.</remarks>
        </member>
        <member name="F:TwinCAT.ConnectionState.Lost">
            <summary>
            Connection lost
            <para>The connection is (temporarily) lost and can be reestablished / resurrected after a (resurrection) timeout.</para>
            <para>
            During ADS communication, specific <see cref="T:TwinCAT.Ads.AdsErrorCode"/> responses lead to so called 'Tripping Errors' that triggers
            the change from <see cref="F:TwinCAT.ConnectionState.Connected"/> to <see cref="F:TwinCAT.ConnectionState.Lost"/>. This is a behavior of the 
            internal ConnectionStateInterceptor that observes the condition of the actual connection and can be configured via the session settings.
            So called tripping errors are the following:
            <list type="table">
            <listheader>
            <term><see cref="T:TwinCAT.Ads.AdsErrorCode"/></term>
            <term>Description</term>
            </listheader>
            <item><term><see cref="F:TwinCAT.Ads.AdsErrorCode.WSA_ConnRefused"/></term><term>The target computer actively refused the socket connection.</term></item>
            <item><term><see cref="F:TwinCAT.Ads.AdsErrorCode.PortDisabled"/></term><term>The target port is disabled.</term></item>
            <item><term><see cref="F:TwinCAT.Ads.AdsErrorCode.PortNotConnected"/></term><term>The target port is not connected.</term></item>
            <item><term><see cref="F:TwinCAT.Ads.AdsErrorCode.ClientSyncTimeOut"/></term><term>The target system didn't answer within the configured timeout timespan.</term></item>
            <item><term><see cref="F:TwinCAT.Ads.AdsErrorCode.TargetMachineNotFound"/></term><term>The target machine was not found.</term></item>
            <item><term><see cref="F:TwinCAT.Ads.AdsErrorCode.TargetPortNotFound"/></term><term>The ADS target port couldn't be found on the target address.</term></item>
            <item><term><see cref="F:TwinCAT.Ads.AdsErrorCode.ClientPortNotOpen"/></term><term>The ADS target port on the target address is not open.</term></item>
            </list>
            </para>
            <para>All theses described ADS error lead to lost connection state. Depending on the configured communication interceptor / or Session settings
            the <see cref="T:TwinCAT.ConnectionState"/> returns to <see cref="F:TwinCAT.ConnectionState.Connected"/> under the following conditions:
            <list type="bullet">
            <item>An ADS communication is triggered (Read/Write/ReadWrite) is triggered by the application.</item>
            <item>The resurrection time is elapsed (21 Seconds, if the Default Session settings / Interceptors are used)</item>
            </list>
            </para>
            <para>
            A setting of TwinCAT.Ads.SessionSettings.FastWriteThrough is switching off this behaviour.
            </para>
            </summary>
        </member>
        <member name="T:TwinCAT.ConnectionStateChangedReason">
            <summary>
            Reason for the Connection status changed event.
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStateChangedReason.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStateChangedReason.Established">
            <summary>
            The connection to the target has been established
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStateChangedReason.Closed">
            <summary>
            The Connection was closed
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStateChangedReason.Lost">
            <summary>
            The connection to the target has been lost
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStateChangedReason.Error">
            <summary>
            Communication error to the target (the connection is not shutting down)
            </summary>
        </member>
        <member name="F:TwinCAT.ConnectionStateChangedReason.Resurrected">
            <summary>
            Communication was resurrected (available again)
            </summary>
        </member>
        <member name="T:TwinCAT.ConnectionStateChangedEventArgs">
            <summary>
            Event arguments for the Connection status changed event.
            </summary>
        </member>
        <member name="P:TwinCAT.ConnectionStateChangedEventArgs.Reason">
            <summary>
            Reason for the event
            </summary>
        </member>
        <member name="P:TwinCAT.ConnectionStateChangedEventArgs.Exception">
            <summary>
            Exception, (only for <see cref="F:TwinCAT.ConnectionStateChangedReason.Error"/>
            </summary>
        </member>
        <member name="P:TwinCAT.ConnectionStateChangedEventArgs.OldState">
            <summary>
            Old connection state
            </summary>
        </member>
        <member name="P:TwinCAT.ConnectionStateChangedEventArgs.NewState">
            <summary>
            New connection state
            </summary>
        </member>
        <member name="M:TwinCAT.ConnectionStateChangedEventArgs.#ctor(TwinCAT.ConnectionStateChangedReason,TwinCAT.ConnectionState,TwinCAT.ConnectionState,System.Exception)">
            <summary>
            Constructs the <see cref="T:TwinCAT.ConnectionStateChangedEventArgs" /> arguments.
            </summary>
            <param name="reason">The reason.</param>
            <param name="newState">The new state.</param>
            <param name="oldState">The old state.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:TwinCAT.ConnectionStateChangedEventArgs.#ctor(TwinCAT.ConnectionStateChangedReason,TwinCAT.ConnectionState,TwinCAT.ConnectionState)">
            <summary>
            Constructs the <see cref="T:TwinCAT.ConnectionStateChangedEventArgs" /> arguments.
            </summary>
            <param name="reason">The reason.</param>
            <param name="newState">The new state.</param>
            <param name="oldState">The old state.</param>
        </member>
        <member name="T:TwinCAT.SystemService.SystemServiceIndexGroup">
            <summary>
            System Service Index Groups.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.OPENCREATE">
            <summary>
            Open Create
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.OPENREAD">
            <summary>
            Open read
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.OPENWRITE">
            <summary>
            Open write
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.CREATEFILE">
            <summary>
            Create file
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.CLOSEHANDLE">
            <summary>
            Close handle
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.DEVICENAMESBYCLASS">
            <summary>
            Device names by class
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FOPEN">
            <summary>
            File open
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FCLOSE">
            <summary>
            File closeReader
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FREAD">
            <summary>
            File read
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FWRITE">
            <summary>
            File write
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FSEEK">
            <summary>
            File seek
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FTELL">
            <summary>
            File tell
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FGETS">
            <summary>
            File gets
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FPUTS">
            <summary>
            File puts
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FSCANF">
            <summary>
            File scanf
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FPRINTF">
            <summary>
            File printf
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FEOF">
            <summary>
            End of file
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FDELETE">
            <summary>
            File delete
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FRENAME">
            <summary>
            File rename
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FFILEFIND">
            <summary>
            File find
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FGETSTATUS">
            <summary>
            SYSTEMSERVICE_FGETSTATUS (134)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.FGETSIZE_BY_HANDLE">
            <summary>
            SYSTEMSERVICE_FGETSIZE_BY_HANDLE (135)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.MKDIR">
            <summary>
            SYSTEMSERVICE_MKDIR (138)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.RMDIR">
            <summary>
            SYSTEMSERVICE_RMDIR (139),
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.UdpSocket">
            <summary>
            UDP Socket (SYSTEMSERVICE_UDP_SOCKET)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.UdpDiscovery">
            <summary>
            UDP Discovery (SYSTEMSERVICE_UDP_DISCOVERY, 141)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.CpDiscovery">
            <summary>
            CP Discovery
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.XML_CREATEWRITER">
            <summary>
            SYSTEMSERVICE_XML_CREATEWRITER (150)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.XML_STARTELEMENT">
            <summary>
            SYSTEMSERVICE_XML_STARTELEMENT (151)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.XML_ENDELEMENT">
            <summary>
            SYSTEMSERVICE_XML_ENDELEMENT (152)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.XML_ADDATTRIBUTE">
            <summary>
            SYSTEMSERVICE_XML_ADDATTRIBUTE (153)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.XML_FILLCHARELEMENT">
            <summary>
            SYSTEMSERVICE_XML_FILLCHARELEMENT (154)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.XML_MULTIWRITE">
            <summary>
            SYSTEMSERVICE_XML_MULTIWRITE (155)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.XML_CLOSEWRITER">
            <summary>
            SYSTEMSERVICE_XML_CLOSEWRITER (156)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.PRODUCT_VERSION">
            <summary>
            SYSTEMSERVICE_PRODUCT_VERSION (160)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.ADD_INITCMD">
            <summary>
            SYSTEMSERVICE_ADD_INITCMD (170)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.DEL_INITCMD">
            <summary>
            SYSTEMSERVICE_DEL_INITCMD (171)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.DEL_ALLADDEDINITCMDS">
            <summary>
            SYSTEMSERVICE_DEL_ALLADDEDINITCMDS (172)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REG_HKEYLOCALMACHINE">
            <summary>
            Registry Key LOCAL MACHINE
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REG_HKEYCURRENTUSER">
            <summary>
            Registry Key CURRENT USER
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REG_HKEYCLASSESROOT">
            <summary>
            Registry Key CLASSES ROOT
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REG_FLUSHLOCALMACHINE">
            <summary>
            Flush LOCAL MACHINE
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REG_FLUSHCURRENTUSER">
            <summary>
            Flush current user
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REG_FLUSHCLASSESROOT">
            <summary>
            Flush classes root
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.SYS_CONTROL">
            <summary>
            Sys Control (SYSTEMSERVICE_SYS_CONTROL, 220)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.SYS_LOAD_SERVER">
            <summary>
            (SYSTEMSERVICE_SYS_LOAD_SERVER = 230)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.SYSSERV_STATE">
            <summary>
            Reads the System Service State (AdsSysServState, SYSTEMSERVICE_SYSSERV_STATE = 240)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.SENDEMAIL">
            <summary>
            Send E-Mail
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.TIMESERVICES">
            <summary>
            Timer services
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.STARTPROCESS">
            <summary>
            Start process
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.CHANGENETID">
            <summary>
            Change net ID
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.QUERYNETID">
            <summary>
            Query net ID
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.TARGETINFO">
            <summary>
            TargetInfo
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.IPHELPERAPI">
            <summary>
            IPHElper API
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.IPHOSTNAME">
            <summary>
            IP Hostname
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.IPADDRINFO">
            <summary>
            IP AddressStr Info
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.ADDREMOTE">
            <summary>
            Add remote Route (SYSTEMSERVICE_ADDREMOTE, 801)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.DELREMOTE">
            <summary>
            Delete remote Route (SYSTEMSERVICE_DELREMOTE, 802)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.ENUMREMOTE">
            <summary>
            Enumerate remote (SYSTEMSERVICE_ENUMREMOTE, 803)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.TEST_CONNECTION">
            <summary>
            Test connection (SYSTEMSERVICE_TEST_CONNECTION, 804)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.CHANGEREMOTEFILE">
            <summary>
            Change Remote File (SYSTEMSERVICE_CHANGEREMOTEFILE, 805)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.ADDSUBROUTE">
            <summary>
            Add SubRoute (SYSTEMSERVICE_ADDSUBROUTE, 806)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REMOTE_FINGERPRINT">
            <summary>
            Remote Fingerprint (SYSTEMSERVICE_REMOTE_FINGERPRINT,807),
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.REMOVE_AUTOINSTALL_DRIVER">
            <summary>
            Autoinstall Driver (SYSTEMSERVICE_REMOVE_AUTOINSTALL_DRIVER, 821)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.SCREENRES">
            <summary>
            Screen resolution (SYSTEMSERVICE_SCREENRES, 900)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.SCREENRESMODES">
            <summary>
            Screen Resolution Modes (SYSTEMSERVICE_SCREENRESMODES, 901)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.CSMI">
            <summary>
            CSMI (SYSTEMSERVICE_CSMI, 1000)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.BIOSAPI">
            <summary>
            BiosApi (SYSTEMSERVICE_BIOSAPI, 1100)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.SETNUMPROC">
            <summary>
            Sets the number of processors (WinCores, IsolatedCores) (SYSTEMSERVICE_SETNUMPROC, 1200)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.NETCFG">
            <summary>
            NetCfg (SYSTEMSERVICE_NETCFG, 1300),
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.ENV_VARS">
            <summary>
            Gets the Environment Variables (SYSTEMSERVICE_ENV_VARS,1400)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.LICENSE">
            <summary>
            License (SYSTEMSERVICE_LICENSE, 1500)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.DEFAULTPWD_ENCRYPTED">
            <summary>
            Default Password Encrypted (SYSTEMSERVICE_DEFAULTPWD_ENCRYPTED, 1510)
            </summary>
            <remarks>
            Use LsaStorePrivateData to store AutoAdminLogon password (pwd in ADS data is encrypted when ioffs == 1)
            </remarks>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.CREATE_GUID">
            <summary>
            Create Guid (SYSTEMSERVICE_CREATE_GUID, 1600)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.SystemServiceIndexGroup.VIRTUALMP">
            <summary>
            VirtualMP (SYSTEMSERVICE_VIRTUALMP,1700)
            </summary>
        </member>
        <member name="T:TwinCAT.SystemService.TargetInfoOffset">
            <summary>
            Enum TargetInfoOffset
            </summary>
            <remarks>IndexOffsets for <see cref="F:TwinCAT.SystemService.SystemServiceIndexGroup.TARGETINFO" /></remarks>
            <exlude/>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.CompatGlitchLoadTPSState">
            <summary>
            COMPATGLITCH_LOADTPSSTATE = 0,  // used for backward compatibility to TC 2.8
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.QueryXmlInfo">
            <summary>
            Queries for XML Information (TARGETINFO_QUERYXMLINFO)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.TargetType">
            <summary>
            The target type (TARGETINFO_TARGETTYPE)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.FileVersion">
            <summary>
            The file version (TARGETINFO_FILEVERSION)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.Platform">
            <summary>
            The platform (TARGETINFO_PLATFORM, string like "TwinCAT RT (x86)")
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.ProjectGuid">
            <summary>
            The project Guid (TARGETINFO_PROJECTGUID, cbRead >= 32 returns projectGuid + projectVersionGuid)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.ProjectVersionGuid">
            <summary>
            The Project Version Guid (TARGETINFO_PROJECTVERSIONGUID)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.ProjectName">
            <summary>
            The project name (TARGETINFO_PROJECTNAME)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.QueryXmlInfoVerb">
            <summary>
            Queries for the XmlInfoVerb (TARGETINFO_QUERYXMLINFOVERB)
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.TargetInfoOffset.SelfSignedCertFP">
            <summary>
            The self-signed certification Fingerprint (TARGETINFO_SELFSIGNEDCERTFP)
            </summary>
        </member>
        <member name="T:TwinCAT.SystemService.AdsSysServStateFlags">
            <summary>
            Enum AdsSysServStateFlags
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.RouterModeOnly">
            <summary>
            The router mode only
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.RedundancySystem">
            <summary>
            System is part of a controller redundancy
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.RedundancyPrimary">
            <summary>
            System is the primary controller
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.RedundancyActive">
            <summary>
            System is currently active -> controling the machine
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.DataFolderSupport">
            <summary>
            The data folder support
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.RedundancyInOp">
            <summary>
            Redundancy is currently down -> not syncronized
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.RedundancySuspended">
            <summary>
            Standby system is currently suspended - e.g. while online change
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServStateFlags.NewCurrentConfig">
            <summary>
            Creates new currentconfig.
            </summary>
        </member>
        <member name="T:TwinCAT.SystemService.AdsSysServState">
            <summary>
            Class AdsSysServState.
            </summary>
            <remarks>
            see TwinCAT.SystemService.SystemServiceIndexGroup.SYSTEMSERVICE_SYSSERV_STATE
            </remarks>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.AdsState">
            <summary>
            The AdsState
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.DeviceState">
            <summary>
            The device state
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.RestartIndex">
            <summary>
            The restart index
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.Version">
            <summary>
            The major version of the target system.
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.Revision">
            <summary>
            The revision of the target system.
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.Build">
            <summary>
            The build number of the target system.
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.Platform">
            <summary>
            The platform ID of the target system.
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.OsType">
            <summary>
            The Operation System ID of the target system.
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.Flags">
            <summary>
            The System Service flags.
            </summary>
        </member>
        <member name="F:TwinCAT.SystemService.AdsSysServState.Reserved">
            <summary>
            Reserved data
            </summary>
        </member>
        <member name="T:TwinCAT.SystemService.AdsSysServStateMarshaler">
            <summary>
            SystemService State Marshaler
            </summary>
            <seealso cref="T:TwinCAT.SystemService.AdsSysServState"/>
            <exclude/>
        </member>
        <member name="M:TwinCAT.SystemService.AdsSysServStateMarshaler.Marshal(TwinCAT.SystemService.AdsSysServState,System.Span{System.Byte})">
            <summary>
            Marshals the <see cref="T:TwinCAT.SystemService.AdsSysServState"/> to memory.
            </summary>
            <param name="str">The string.</param>
            <param name="span">The span.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.SystemService.AdsSysServStateMarshaler.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.SystemService.AdsSysServState@)">
            <summary>
            Unmarshals the <see cref="T:TwinCAT.SystemService.AdsSysServState"/> from memory.
            </summary>
            <param name="span">The span.</param>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="P:TwinCAT.SystemService.AdsSysServStateMarshaler.MarshalSize">
            <summary>
            Gets the Marshal size of <see cref="T:TwinCAT.SystemService.AdsSysServState"/>
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="T:TwinCAT.RouteAccessType">
            <summary>
            Specifies the method to determine the Remote routes list.
            </summary>
        </member>
        <member name="F:TwinCAT.RouteAccessType.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.RouteAccessType.Actual">
            <summary>
            Gets the actual Remote Routes used by the TwinCAT Router. This can contain all 'virtual' Routes
            that are superimposed by a valid MQTT Publisher configuration. This list doesn't contain configuration
            data of the single routes.
            </summary>
        </member>
        <member name="F:TwinCAT.RouteAccessType.Registry">
            <summary>
            The static routes are the Route configurations stored in the Registry (TC2 and Windows Platform only), Obsolete
            </summary>
        </member>
        <member name="F:TwinCAT.RouteAccessType.Configured">
            <summary>
            Gets the configured Routes from the TwinCAT System Server. These Routes contain all the standard Routes, the configured AdsSecure Routes
            and the MQTT Provider (only the root). Configuration data of the Route objects are available.
            </summary>
        </member>
        <member name="F:TwinCAT.RouteAccessType.Merged">
            <summary>
            Produces a merged list of all available RouteTargets with configuration data (merged from <see cref="F:TwinCAT.RouteAccessType.Actual"/> and <see cref="F:TwinCAT.RouteAccessType.Configured"/>.
            </summary>
        </member>
        <member name="F:TwinCAT.RouteAccessType.Default">
            <summary>
            The default (actually <see cref="F:TwinCAT.RouteAccessType.Merged"/>)
            </summary>
        </member>
        <member name="T:TwinCAT.RoutePersistanceType">
            <summary>
            Route persistance type (Static or Temporary)
            </summary>
        </member>
        <member name="F:TwinCAT.RoutePersistanceType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:TwinCAT.RoutePersistanceType.Server">
            <summary>
            Server
            </summary>
        </member>
        <member name="F:TwinCAT.RoutePersistanceType.Temporary">
            <summary>
            Temporary route
            </summary>
        </member>
        <member name="F:TwinCAT.RoutePersistanceType.Static">
            <summary>
            Static route
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.IndexGroup">
            <summary>
            Router index group
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.SystemData">
            <summary>
            System Data
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.PortData">
            <summary>
            Port data
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.Remotes">
            <summary>
            Remotes
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.AllocFreeOsMem">
            <summary>
            AllocFreeOsMem
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.AccessHardware">
            <summary>
            Access hardware
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.AccessPhysicalMemory">
            <summary>
            Access physical memory
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.Delay">
            <summary>
            router delay function (for test purpose only) indexOffset is delay in ms
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.PortByNetId">
            <summary>
            router delay function (for test purpose only) ADSRW: W: netId R: port
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.LocalNetIds">
            <summary>
            Local net IDs
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.PortCfgStart">
            <summary>
            router configuration per port
            </summary>
            <remarks>LOWORD contains port number (port 0 only for AdsWrite and starts with AmsNetId)</remarks>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexGroup.PortCfgEnd">
            <summary>
            Port Configuration end
            </summary>
            <remarks>(port 0 only for AdsWrite and starts with AmsNetId)
            </remarks>
        </member>
        <member name="T:TwinCAT.Router.Native.IndexOffsetIORemotes">
            <summary>
            Index offsets for <see cref="F:TwinCAT.Router.Native.IndexGroup.Remotes"/>
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexOffsetIORemotes.All">
            <summary>
            returns the description of all remote computers
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexOffsetIORemotes.Count">
            <summary>
            returns the number of remote computers
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.IndexOffsetRouterSystemDataGroups">
            <summary>
            Index offsets for <see cref="F:TwinCAT.Router.Native.IndexGroup.SystemData"/>
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexOffsetRouterSystemDataGroups.StatusInfo">
            <summary>
            Gives status info about the Router
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.IndexOffsetRoutePortDataGroups">
            <summary>
            Index offsets for <see cref="F:TwinCAT.Router.Native.IndexGroup.PortData"/>
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.IndexOffsetRoutePortDataGroups.AllPorts">
            <summary>
            Lists all Ports
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.ObjectId">
            <summary>
            Router Object IDs
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ObjectId.Ctrl">
            <summary>
            OID_TCROUTER_CTRL = 0x01000000
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ObjectId.DrvLdr">
            <summary>
            OID_TCROUTER_DRVLDR = 0x01000001;
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ObjectId.Task">
            <summary>
            OID_TCROUTER_TASK = 0x01000010;
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ObjectId.DebuggerPort">
            <summary>
            OID_TCROUTER_DEBUGGERPORT = 0x01000020;
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ObjectId.DebuggerBp">
            <summary>
            OID_TCROUTER_DEBUGGERBP = 0x01000021;
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ObjectId.DebuggerBpPool">
            <summary>
            OID_TCROUTER_DEBUGGERBPPOOL= 0x01000022;
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ObjectId.TcEventLogger">
            <summary>
            OID_TCEVENTLOGGER = 0x01000070;
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.CategoryId">
            <summary>
            Router Category IDs
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.CategoryId.EarlyShutdown">
            <summary>
            CATID_TComServer_EarlyShutdown = 0x01000001
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.CategoryId.LateShutdown">
            <summary>
            CATID_TComServer_LateShutdown = 0x01000002
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.CategoryId.NotifyBeforeShutdown">
            <summary>
            CATID_TComServer_NotifyBeforeShutdown = 0x01000003
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.CategoryId.CodeAreaProvider">
            <summary>
            CATID_TComServer_CodeAreaProvider = 0x01000004
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.CategoryId.AdsSymbolServer">
            <summary>
            CATID_TComServer_AdsSymbolServer = 0x01000005
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.ParamterId">
            <summary>
            Parameter IDs
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ParamterId.AmsPortInitData">
            <summary>
            PID_AmsPortInitData = 0x01000001
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ParamterId.NotificationBeforeShutdown">
            <summary>
            PID_NotificationBeforeShutdown = 0x01000002
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.ParamterId.ShutdownActive">
            <summary>
            PID_ShutdownActive = 0x01001000
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.EventId">
            <summary>
            Event IDs
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.EventId.ObjectAdded">
            <summary>
            EVTID_TComServer_ObjAdded = 0x01008001
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.EventId.ObjectRemoved">
            <summary>
            EVTID_TComServer_ObjRemoved = 0x01008002
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.EventId.ServerShutdown">
            <summary>
            EVTID_TComServer_EvtSrvShutdown = 0x01008010
            </summary>
        </member>
        <member name="F:TwinCAT.Router.Native.EventId.ServerSignalStopping">
            <summary>
            EVTID_TComServer_EvtSrvSignalStopping = 0x01008011
            </summary>
        </member>
        <member name="T:TwinCAT.Router.Native.RouterStatusInfo">
            <summary>
            Helper struct for marshalling Router status info via ADS
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.Router.Native.RouterStatusInfo.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Router.Native.RouterStatusInfo"/> class.
            </summary>
            <param name="span">The span.</param>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.MarshalSize">
            <summary>
            Gets the MarshalSize of the <see cref="T:TwinCAT.Router.Native.RouterStatusInfo"/> struct.
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.RouterMemory">
            <summary>
            Gets the router memory.
            </summary>
            <value>The router memory.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.AvailableMemory">
            <summary>
            Gets the available memory.
            </summary>
            <value>The available memory.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.RegisteredPorts">
            <summary>
            Gets the number of registered ports.
            </summary>
            <value>The registered ports.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.RegisteredDrivers">
            <summary>
            Gets the number of the registered drivers.
            </summary>
            <value>The registered drivers.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.RegisteredTransports">
            <summary>
            Gets the number of registered transports.
            </summary>
            <value>The registered transports.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.MailDebugging">
            <summary>
            Gets a value indicating whether mailbox debugging is switched on.
            </summary>
            <value><c>true</c> if [mail debugging]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.MailboxSize">
            <summary>
            Gets the Mailbox size.
            </summary>
            <value>The size of the mailbox.</value>
        </member>
        <member name="P:TwinCAT.Router.Native.RouterStatusInfo.MailboxUsedEntries">
            <summary>
            Gets actually used entries within the Mailbox.
            </summary>
            <value>The mailbox used entries.</value>
        </member>
        <member name="T:TwinCAT.Router.Native.AmsRegisterPort">
            <summary>
            Helper struct for marshalling Port information data
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterPort.m_bFixedPort">
            Fixed Port, if not bFixedPort the router will choose a port
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterPort.m_port">
            Port
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterPort.m_queueSize">
            Queue size
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterPort.m_portType">
            Port type
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterPort.m_dwPortAttrib">
            Port attributes
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterPort.m_szPortName">
            Port name (max 32 chars)
        </member>
        <member name="T:TwinCAT.Router.Native.AmsRegisterPortMarshaller">
            <summary>
            Class AmsRegisterPortMarshaller.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Router.Native.AmsRegisterPortMarshaller.MarshalSize">
            <summary>
            Gets the size of the marshal.
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="M:TwinCAT.Router.Native.AmsRegisterPortMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Router.Native.AmsRegisterPort@)">
            <summary>
            Unmarshals the specified data.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Router.Native.AmsRegisterTpPortIn">
            <summary>
            Summary description for AmsRegisterTpPortIn.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterTpPortIn.m_bUnRegister">
            Unregister
        </member>
        <member name="F:TwinCAT.Router.Native.AmsRegisterTpPortIn.m_netId">
            Net Id (6 bytes)
        </member>
        <member name="T:TwinCAT.Router.Native.AmsRegisterTpPortInMarshaller">
            <summary>
            Class AmsRegisterTpPortInMarshaller.
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.Router.Native.AmsRegisterTpPortInMarshaller.MarshalSize">
            <summary>
            Gets the size of the marshal.
            </summary>
            <value>The size of the marshal.</value>
        </member>
        <member name="M:TwinCAT.Router.Native.AmsRegisterTpPortInMarshaller.Unmarshal(System.ReadOnlySpan{System.Byte},TwinCAT.Router.Native.AmsRegisterTpPortIn@)">
            <summary>
            Unmarshals the specified data.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="str">The string.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.Router.Native.AmsRegisterTpPortInMarshaller.Marshal(TwinCAT.Router.Native.AmsRegisterTpPortIn,System.Span{System.Byte})">
            <summary>
            Marshals the specified structure to the buffer
            </summary>
            <param name="str">The string.</param>
            <param name="buffer">The buffer.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:TwinCAT.Router.AmsPortType">
            <summary>
            Enumation specifying different types of Router port objects.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.Invalid">
            <summary>
            Port type invalid
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.Router">
            <summary>
            Port type router
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R3Port">
            <summary>
            Port type Ring3 (Application Layer)
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R0CtrlPort">
            <summary>
            Ring 0 Control port
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R0TaskPort">
            <summary>
            ring 0 Task port
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R0IOPort">
            <summary>
            Ring 0 IO port
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.TpPort">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R3PortITF">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R0CtrlPortITF">
            <summary>
            
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R0TaskPortITF">
            <summary>
            
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.R0IoPortITF">
             <summary>
            
             </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortType.TPPortITF">
            <summary>
            
            </summary>
        </member>
        <member name="T:TwinCAT.Router.AmsPortAttributes">
            <summary>
            Flagset specifying further attributes to the Router port.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.Undefined">
            <summary>
            Undefined / Uninitialized (PORTATTRIB_UNDEF)
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.Ads">
            <summary>
            ADS (PORTATTRIB_ADS)
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.Server">
            <summary>
            Server port (PORTATTRIB_SERVER)
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.Client">
            <summary>
            Client port (PORTATTRIB_CLIENT)
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.HasSymbols">
            <summary>
            Port has symbols (PORTATTRIB_HASSYMBOLS)
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.IsSync">
            <summary>
            Port is Synchronized (PORTATTRIB_ISSYNC)
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.AsyncReceiver">
            <summary>
            PORTATTRIB_ASYNC_RECV
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.IdleCall">
            <summary>
            PORTATTRIB_IDLECALL
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.AdsSecure">
            <summary>
            Ads Secure Port
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.NoAdsChange">
            <summary>
            PORTATTRIB_NOADSCHANGE
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.Win32Port">
            <summary>
            PORTATTRIB_WIN32PORT
            </summary>
        </member>
        <member name="F:TwinCAT.Router.AmsPortAttributes.R3FileObject">
            <summary>
            Ring 3 file object
            </summary>
        </member>
        <member name="T:TwinCAT.Router.RouterPortInfo">
            <summary>
            Class RouterPortInfo.
            </summary>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Router.RouterPortInfo"/> class.
            </summary>
            <param name="port">The port.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Router.RouterPortInfo"/> class.
            </summary>
        </member>
        <member name="F:TwinCAT.Router.RouterPortInfo.portName">
            <summary>
            Port name
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPortInfo.Name">
            <summary>
            Gets the Name of the Port
            </summary>
        </member>
        <member name="F:TwinCAT.Router.RouterPortInfo.port">
            <summary>
            Port Number
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPortInfo.PortID">
            <summary>
            Gets the PortNumber
            </summary>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.TryParse(System.String,TwinCAT.Router.RouterPortInfo@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.Router.RouterPortInfo"/> object.
            </summary>
            <param name="value">The value.</param>
            <param name="info">The information.</param>
            <returns><c>true</c> if parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.Equals(System.Object)">
            <summary>
            Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.op_Equality(TwinCAT.Router.RouterPortInfo,TwinCAT.Router.RouterPortInfo)">
            <summary>
            Operator==
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.op_Inequality(TwinCAT.Router.RouterPortInfo,TwinCAT.Router.RouterPortInfo)">
            <summary>
            Operator-=
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.Router.RouterPortInfo.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.Router.RouterPort">
            <summary>
            Class represents a Router Port
            </summary>
        </member>
        <member name="M:TwinCAT.Router.RouterPort.#ctor">
            <summary>
            Constructs the <see cref="T:TwinCAT.Router.RouterPort"/> object
            </summary>
        </member>
        <member name="M:TwinCAT.Router.RouterPort.#ctor(TwinCAT.Router.Native.AmsRegisterPort)">
            <summary>
            Constructs the <see cref="T:TwinCAT.Router.RouterPort"/> object
            </summary>
            <param name="intPort">Internal port representation (Marshal object)</param>
        </member>
        <member name="F:TwinCAT.Router.RouterPort.fixedPort">
            <summary>
            Fixed port
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.IsFixedPort">
            <summary>
            Gets, whether the Port is fixed
            </summary>
        </member>
        <member name="F:TwinCAT.Router.RouterPort.portQueueSize">
            <summary>
            Port Queue size.
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.QueueSize">
            <summary>
            Gets the current Queue size
            </summary>
        </member>
        <member name="F:TwinCAT.Router.RouterPort.portType">
            <summary>
            Port Type
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.PortType">
            <summary>
            Gets the type of the Port
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.Type">
            <exclude/>
        </member>
        <member name="F:TwinCAT.Router.RouterPort.portAttributes">
            <summary>
            Port Attributes.
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.Attributes">
            <summary>
            Gets additional attributes of the Port
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.HasSymbols">
            <summary>
            Gets, whether the Port contains Symbol informations
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.IsSynchronized">
            <summary>
            Gets, whether the Port is Synchronized
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.IsClientPort">
            <summary>
            Gets, whether the port is an Client port
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.IsServerPort">
            <summary>
            Gets, whether the port is an Server port
            </summary>
        </member>
        <member name="P:TwinCAT.Router.RouterPort.IsAdsSecurePort">
            <summary>
            Gets a value indicating whether this instance is ads secure port.
            </summary>
            <value><c>true</c> if this instance is ads secure port; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:TwinCAT.Router.RouterPort.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:TwinCAT.Router.RouterTpPortIn">
            <summary>
            Class RouterTpPortIn.
            Implements the <see cref="T:TwinCAT.Router.RouterPort" /></summary>
            <seealso cref="T:TwinCAT.Router.RouterPort" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.Router.RouterTpPortIn.#ctor(TwinCAT.Router.Native.AmsRegisterTpPortIn)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Router.RouterTpPortIn" /> class.
            </summary>
            <param name="intPort">The int port.</param>
        </member>
        <member name="P:TwinCAT.Router.RouterTpPortIn.NetId">
            <summary>
            Gets the ADS Net ID
            </summary>
            <value>The net identifier.</value>
        </member>
        <member name="P:TwinCAT.Router.RouterTpPortIn.Unregister">
            <summary>
            Gets the Unregister flag.
            </summary>
            <value><c>true</c> if unregister; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.SecureStringExtension">
            <summary>
            SecureString Extension to Crypt/Decrypt SecureStrings
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.SecureStringExtension.UseDecryptedSecureString``1(System.Security.SecureString,System.Func{System.String,``0})">
            <summary>
            Allows a decrypted secure string to be used whilst minimising the exposure of the
            unencrypted string.
            </summary>
            <typeparam name="T">Generic type returned by Func delegate.</typeparam>
            <param name="secureString">The string to decrypt.</param>
            <param name="action">
            Func delegate which will receive the decrypted password as a string object
            </param>
            <returns>Result of Func delegate</returns>
            <remarks>
            This method creates an empty managed string and pins it so that the garbage collector
            cannot move it around and create copies. An unmanaged copy of the the secure string is
            then created and copied into the managed string. The action is then called using the
            managed string. Both the managed and unmanaged strings are then zeroed to erase their
            contents. The managed string is unpinned so that the garbage collector can resume normal
            behaviour and the unmanaged string is freed.
            </remarks>
        </member>
        <member name="M:TwinCAT.SecureStringExtension.UseDecryptedSecureString(System.Security.SecureString,System.Action{System.String})">
            <summary>
            Allows a decrypted secure string to be used whilst minimising the exposure of the
            unencrypted string.
            </summary>
            <param name="secureString">The string to decrypt.</param>
            <param name="action">
            Func delegate which will receive the decrypted password as a string object
            </param>
            <returns>Result of Func delegate</returns>
            <remarks>
            This method creates an empty managed string and pins it so that the garbage collector
            cannot move it around and create copies. An unmanaged copy of the the secure string is
            then created and copied into the managed string. The action is then called using the
            managed string. Both the managed and unmanaged strings are then zeroed to erase their
            contents. The managed string is unpinned so that the garbage collector can resume normal
            behaviour and the unmanaged string is freed.
            ATTENTION: please be aware that the string only exist only during delegate call time. After the
            end, the string will be explicitly zeroed. So Clone the String if it is needed for longer!
            </remarks>
        </member>
        <member name="T:TwinCAT.LogProviderExtension">
            <summary>
            Class LogProviderExtension.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.LogProviderExtension.LogInformation(TwinCAT.ILoggerProvider,System.String,System.Object[])">
            <summary>
            Logs an Informational Entry
            </summary>
            <param name="router">The router.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.LogProviderExtension.LogError(TwinCAT.ILoggerProvider,System.String,System.Object[])">
            <summary>
            Logs an Error Entry
            </summary>
            <param name="router">The router.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.LogProviderExtension.LogDebug(TwinCAT.ILoggerProvider,System.String,System.Object[])">
            <summary>
            Logs an Debug Entry
            </summary>
            <param name="router">The router.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.LogProviderExtension.LogTrace(TwinCAT.ILoggerProvider,System.String,System.Object[])">
            <summary>
            Logs an Trace Entry
            </summary>
            <param name="router">The router.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.LogProviderExtension.LogWarning(TwinCAT.ILoggerProvider,System.String,System.Object[])">
            <summary>
            Logs a warning Entry
            </summary>
            <param name="router">The router.</param>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwinCAT.LogProviderExtension.LogIsEnabled(TwinCAT.ILoggerProvider,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Check if a LogLevel is enabled.
            </summary>
            <param name="router">The router.</param>
            <param name="level">The level.</param>
            <returns><c>true</c> if the level is enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.PlcOpen.TimeBase">
            <summary>
            Base class for PlcOpen Time types.
            </summary>
        </member>
        <member name="F:TwinCAT.PlcOpen.TimeBase.internalTimeValue">
            <summary>
            The internal time value
            </summary>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.InternalTimeValue">
            <summary>
            Gets the internal time value.
            </summary>
            <value>The internal time value.</value>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TimeBase"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TimeBase"/> class.
            </summary>
            <param name="timeValue">The time value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TimeBase"/> class.
            </summary>
            <param name="timeValue">The time value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.MarshalSize">
            <summary>
            Gets the marshal size in bytes.
            </summary>
            <value>Marshal size in bytes.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.Time">
            <summary>
            Gets the time value.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.Value">
            <summary>
            Returns the value of this <see cref="T:TwinCAT.PlcOpen.TimeBase" /> as Managed base type (DateTime or Timespan)
            </summary>
            <value>The value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.Ticks">
            <summary>
            Returns the number of ticks that represent the value of this <see cref="T:TwinCAT.PlcOpen.TimeBase" /> (uint32 or uint64).
            </summary>
            <value>The ticks (in 100ns).</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.TicksValueType">
            <summary>
            Gets the type of the underlying ticks resolution (uint32 or uint64)
            </summary>
            <value>The type of the ticks value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.ManagedValueType">
            <summary>
            Gets the type of the underlying human readable type (DateTime or Timespan)
            </summary>
            <value>The type of the managed value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.TimeBase.UntypedValue">
            <summary>
            Returns the 'Value' as object type.
            </summary>
            <value>The untyped value.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.TimeToValue(System.TimeSpan)">
            <summary>
            Converts the Timespan to PlcOpen ticks.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.ValueToTime(System.UInt32)">
            <summary>
            Converts the timeValue (PlcOpen ticks) to TimeSpan
            </summary>
            <param name="timeValue">The time value.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.ValueToTime(System.Int64)">
            <summary>
            Converts the timeValue (PlcOpen ticks) to TimeSpan
            </summary>
            <param name="timeValue">The time value.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TimeBase.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.PlcOpen.IPlcOpenTimeBase">
            <summary>
            Interface IPlcOpenType
            </summary>
        </member>
        <member name="P:TwinCAT.PlcOpen.IPlcOpenTimeBase.ManagedValueType">
            <summary>
            Gets the type of the underlying human readable type (DateTime or Timespan)
            </summary>
            <value>The type of the managed value.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.IPlcOpenTimeBase.TicksValueType">
            <summary>
            Gets the type of the underlying ticks resolution (uint32 or uint64)
            </summary>
            <value>The type of the ticks value.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.IPlcOpenTimeBase.UntypedValue">
            <summary>
            Returns the 'Value' as object type.
            </summary>
            <value>The untyped value.</value>
        </member>
        <member name="T:TwinCAT.PlcOpen.IPlcOpenTimeBase`2">
            <summary>
            Interface IPlcOpenType
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <typeparam name="T2">The type of the t2.</typeparam>
            <seealso cref="T:TwinCAT.PlcOpen.IPlcOpenTimeBase" />
        </member>
        <member name="P:TwinCAT.PlcOpen.IPlcOpenTimeBase`2.Value">
            <summary>
            Returns the value of this <see cref="T:TwinCAT.PlcOpen.IPlcOpenTimeBase`2"/> as Managed base type (DateTime or Timespan)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.IPlcOpenTimeBase`2.Ticks">
            <summary>
            Returns the number of ticks that represent the value of this <see cref="T:TwinCAT.PlcOpen.IPlcOpenTimeBase`2"/> (uint32 or uint64).
            </summary>
            <value>The ticks.</value>
        </member>
        <member name="T:TwinCAT.PlcOpen.LTimeBase">
            <summary>
            Time base class
            </summary>
        </member>
        <member name="F:TwinCAT.PlcOpen.LTimeBase.internalTimeValue">
            <summary>
            The internal time value 
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTimeBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TimeBase"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTimeBase.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TimeBase"/> class.
            </summary>
            <param name="timeValue">The time value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="P:TwinCAT.PlcOpen.LTimeBase.MarshalSize">
            <summary>
            Gets the marshal size in bytes.
            </summary>
            <value>Marshal size in bytes.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.LTimeBase.Time">
            <summary>
            Gets or the time value.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:TwinCAT.PlcOpen.LTimeBase.Value">
            <summary>
            Returns the value of this <see cref="T:TwinCAT.PlcOpen.LTimeBase" /> as Managed base type (DateTime or Timespan)
            </summary>
            <value>The value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.LTimeBase.Ticks">
            <summary>
            Returns the number of ticks that represent the value of this <see cref="T:TwinCAT.PlcOpen.LTimeBase" />.
            </summary>
            <value>The ticks.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.LTimeBase.TicksValueType">
            <summary>
            Gets the type of the underlying ticks resolution (uint32 or uint64)
            </summary>
            <value>The type of the ticks value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.LTimeBase.ManagedValueType">
            <summary>
            Gets the type of the underlying human readable type (DateTime or Timespan)
            </summary>
            <value>The type of the managed value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.LTimeBase.UntypedValue">
            <summary>
            Returns the 'Value' as object type.
            </summary>
            <value>The untyped value.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTimeBase.TimeToValue(System.TimeSpan)">
            <summary>
            Converts the Timespan to PlcOpen ticks.
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTimeBase.ValueToTime(System.UInt64)">
            <summary>
            Converts the timeValue (PlcOpen ticks) to TimeSpan
            </summary>
            <param name="nanoseconds">The time value.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTimeBase.ValueToTime(System.Int64)">
            <summary>
            Converts the timeValue (PlcOpen ticks) to TimeSpan
            </summary>
            <param name="nanoseconds">The time value.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTimeBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTimeBase.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.PlcOpen.TIME">
            <summary>
            PlcOpen TIME class
            </summary>
            <remarks>This class has an internal representation of an UINT32 (4 bytes).</remarks>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="timeValue">The time value.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="timeValue">The time value.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="days">The days.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.TryParse(System.String,TwinCAT.PlcOpen.TIME@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.PlcOpen.TIME"/> object from string.
            </summary>
            <param name="str">The string.</param>
            <param name="ret">The ret.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.TIME"/> object could be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TIME.Parse(System.String)">
            <summary>
            Parses the specified string to a <see cref="T:TwinCAT.PlcOpen.TIME"/> object.
            </summary>
            <param name="str">The string.</param>
            <returns>TIME.</returns>
            <exception cref="T:System.FormatException">Cannot create TIME DataType!</exception>
        </member>
        <member name="T:TwinCAT.PlcOpen.LTIME">
            <summary>
            PlcOpen LTIME class
            </summary>
            <remarks>This class has an internal requesentation of an UINT64 (8 Bytes)</remarks>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="timeValue">The time value.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="timeValue">The time value.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TIME"/> class.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.LTIME"/> class.
            </summary>
            <param name="days">The days.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
            <param name="microseconds">The microseconds.</param>
            <param name="nanoseconds">The nanoseconds.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.LTIME"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
            <param name="microseconds">The microseconds.</param>
            <param name="nanoseconds">The nanoseconds.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.LTIME"/> class.
            </summary>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
            <param name="microseconds">The microseconds.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.TryParse(System.String,TwinCAT.PlcOpen.LTIME@)">
            <summary>
            Tries to parse the string to a <see cref="T:TwinCAT.PlcOpen.LTIME"/> object.
            </summary>
            <param name="str">The string.</param>
            <param name="ret">The ret.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.LTIME"/> object could be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.LTIME.Parse(System.String)">
            <summary>
            Parses the specified string to a <see cref="T:TwinCAT.PlcOpen.LTIME"/> object.
            </summary>
            <param name="str">The string.</param>
            <returns>LTIME.</returns>
            <exception cref="T:System.FormatException">Cannot create TIME DataType!</exception>
        </member>
        <member name="T:TwinCAT.PlcOpen.TOD">
            <summary>
            PLCOpen TimeOfDay class (32-Bit)
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TOD"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TOD"/> class.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TOD"/> class.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TOD"/> class.
            </summary>
            <param name="timeSpan">The time span.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.TOD"/> class.
            </summary>
            <param name="days">The days.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.TryParse(System.String,TwinCAT.PlcOpen.TOD@)">
            <summary>
            Tries to parse the string to a <see cref="T:TwinCAT.PlcOpen.TOD"/> object.
            </summary>
            <param name="str">The string.</param>
            <param name="ret">The ret.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.TOD"/> object could be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.TOD.Parse(System.String)">
            <summary>
            Parses the specified string to a <see cref="T:TwinCAT.PlcOpen.TOD"/> object.
            </summary>
            <param name="str">The string.</param>
            <returns>TOD.</returns>
            <exception cref="T:System.FormatException">Cannot parse TOD object!</exception>
        </member>
        <member name="T:TwinCAT.PlcOpen.DateBase">
            <summary>
            PlcOpen Date base class (32-Bit)
            </summary>
        </member>
        <member name="F:TwinCAT.PlcOpen.DateBase.plcTimeSeconds">
            <summary>
            PlcTime Seconds (Ticks)
            </summary>
            <remarks>
            Seconds from 1/1/1970 in Local Time Zone (different from UnixTimeSeconds which is UTC!).
            The is exactly the same value and layout, like it is stored in PlcControl for the DATE and DT
            type!.
            </remarks>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DateBase"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DateBase"/> class.
            </summary>
            <param name="plcTicks">The date value in PlcOpen Ticks / Seconds from 1/1190 in Local Time Zone.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DateBase"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="P:TwinCAT.PlcOpen.DateBase.IsDate">
            <summary>
            Gets a value indicating whether this instance is representig a date (despite date and time)
            </summary>
            <value><c>true</c> if this instance is date; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.DateBase.MarshalSize">
            <summary>
            Gets the marshal size in bytes.
            </summary>
            <value>Marshal size in bytes.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.DateBase.Value">
            <summary>
            Returns the value of this <see cref="T:TwinCAT.PlcOpen.DateBase" /> as Managed base type (DateTime or Timespan)
            </summary>
            <value>The value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.DateBase.Ticks">
            <summary>
            Returns the number of ticks that represent the value of this <see cref="T:TwinCAT.PlcOpen.DateBase" />.
            </summary>
            <value>The ticks.</value>
        </member>
        <member name="P:TwinCAT.PlcOpen.DateBase.TicksValueType">
            <summary>
            Gets the type of the underlying ticks resolution (uint32 or uint64)
            </summary>
            <value>The type of the ticks value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.DateBase.ManagedValueType">
            <summary>
            Gets the type of the underlying human readable type (DateTime or Timespan)
            </summary>
            <value>The type of the managed value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.DateBase.UntypedValue">
            <summary>
            Returns the 'Value' as object type.
            </summary>
            <value>The untyped value.</value>
            <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.DateToValue(System.DateTime,System.Boolean)">
            <summary>
            Converts the specified DateTime value to PlcOpen Ticks (local seconds from 1.1.1970)
            </summary>
            <param name="date">The date.</param>
            <param name="dateOnly">if set to <c>true</c> [date only].</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.ValueToDate(System.UInt32)">
            <summary>
            Converts the specified PlcOpen dateValue in ticks to a DateTime Object
            </summary>
            <param name="dateValue">The date value.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.ParseToTicks(System.String)">
            <summary>
            Parses the specified PlcOpen Date string to PlcOpen ticks.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DateBase.GetHashCode">
            <summary>
            Gets the HashCode of the Address
            </summary>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.PlcOpen.PlcOpenDateConverter">
            <summary>
            Converter class for PlcOPen DATE data type
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.Create(System.DateTimeOffset)">
            <summary>
            Creates the <see cref="T:TwinCAT.PlcOpen.DATE"/> object
            </summary>
            <param name="value">The value.</param>
            <returns>DATE.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.Create(System.UInt32)">
            <summary>
            Creates the <see cref="T:TwinCAT.PlcOpen.DATE"/> object
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>DATE.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.Create(System.Int64)">
            <summary>
            Creates the <see cref="T:TwinCAT.PlcOpen.DATE"/> object
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>DATE.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.TryConvert(System.Object,TwinCAT.PlcOpen.DATE@)">
            <summary>
            Tries to convert the source object to a <see cref="T:TwinCAT.PlcOpen.DATE"/> object.
            </summary>
            <param name="source">The source.</param>
            <param name="timeOfDay">The time of day.</param>
            <returns><c>true</c> if the source object could be converted to <see cref="T:TwinCAT.PlcOpen.DATE"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.TryConvert(TwinCAT.PlcOpen.DateBase,System.Type,System.Object@)">
            <summary>
            Tries to convert the <see cref="T:TwinCAT.PlcOpen.DATE"/> object to the specified target type.
            </summary>
            <param name="date">The date.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.DateBase"/> could be converted to the target type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.ToString(System.UInt32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.ObjectToTicks(System.Object)">
            <summary>
            Converts one of the PlcOpen classes to internal Ticks (32-Bit)
            </summary>
            <param name="val">The value.</param>
            <returns>System.UInt32.</returns>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.ToString(System.DateTimeOffset)">
            <summary>
            Converts the DateTime object to the appropriate PlcOpen Date string representation.
            </summary>
            <param name="date">The date.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.TryParseToTicks(System.String,System.UInt32@)">
            <summary>
            Parses the specified string to Ticks.
            </summary>
            <param name="s">The s.</param>
            <param name="ticks">The ticks.</param>
            <returns><c>true</c> if the string could be parsed to ticks, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.TryParse(System.String,TwinCAT.PlcOpen.DATE@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.PlcOpen.DATE"/> type.
            </summary>
            <param name="str">The string.</param>
            <param name="date">The date.</param>
            <returns><c>true</c> if the string could be parsed to <see cref="T:TwinCAT.PlcOpen.DATE"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.GetBytes(TwinCAT.PlcOpen.DATE)">
            <summary>
            Gets the bytes representation of the <see cref="T:TwinCAT.PlcOpen.DATE"/> type.
            </summary>
            <param name="dt">The dt.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.ToTicks(System.DateTime)">
            <summary>
            Converts the DateTime into PlcOpen ticks (Seconds since 1970-01-01). The Time part will be ignored!
            </summary>
            <param name="date">The date.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverter.GetBytes(System.DateTime)">
            <summary>
            Convert to byte array.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:TwinCAT.PlcOpen.DATE">
            <summary>
            PlcOpen DATE class (32-bit)
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DATE"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DATE"/> class.
            </summary>
            <param name="dateValue">The date value in PlcOpen Ticks.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DATE"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DATE"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DATE"/> class.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.ParseToTicks(System.String)">
            <summary>
            Parses the specified PlcOpen Date string to PlcOpen ticks.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.TryParse(System.String,TwinCAT.PlcOpen.DATE@)">
            <summary>
            Tries to parse the specified string to a <see cref="T:TwinCAT.PlcOpen.DATE"/> object.
            </summary>
            <param name="s">The s.</param>
            <param name="date">The date.</param>
            <returns><c>true</c> if the string could be parsed to <see cref="T:TwinCAT.PlcOpen.DATE"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DATE.Parse(System.String)">
            <summary>
            Parses the specified string to a <see cref="T:TwinCAT.PlcOpen.DATE"/> object.
            </summary>
            <param name="s">The s.</param>
            <returns>DATE.</returns>
            <exception cref="T:System.FormatException">Cannot parse DATE object!</exception>
        </member>
        <member name="P:TwinCAT.PlcOpen.DATE.Date">
            <summary>
            Gets or the date value (only the Date part of the DateTime)
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:TwinCAT.PlcOpen.DATE.Value">
            <summary>
            Returns the value of this <see cref="T:TwinCAT.PlcOpen.DateBase" /> as Managed base type (DateTime or Timespan)
            </summary>
            <value>The value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.DATE.IsDate">
            <summary>
            Gets a value indicating whether this instance is a date.
            </summary>
            <value><c>true</c> if this instance is date; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.PlcOpen.PlcOpenDTConverter">
            <summary>
            PlcOpen DateTime Converter class.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.Create(System.DateTime)">
            <summary>
            Creates the <see cref="T:TwinCAT.PlcOpen.DT"/> object.
            </summary>
            <param name="value">The value.</param>
            <returns>DT.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.Create(System.UInt32)">
            <summary>
            Creates the <see cref="T:TwinCAT.PlcOpen.DT"/> object.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>DT.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.Create(System.Int64)">
            <summary>
            Creates the <see cref="T:TwinCAT.PlcOpen.DT"/> object.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>DT.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.TryConvert(System.Object,TwinCAT.PlcOpen.DT@)">
            <summary>
            Tries to convert the source object to a <see cref="T:TwinCAT.PlcOpen.DT"/> object.
            </summary>
            <param name="source">The source.</param>
            <param name="timeOfDay">The time of day.</param>
            <returns><c>true</c> if the source object could be converted to <see cref="T:TwinCAT.PlcOpen.DT"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.TryConvert(TwinCAT.PlcOpen.DT,System.Type,System.Object@)">
            <summary>
            Tries to convert the <see cref="T:TwinCAT.PlcOpen.DT"/> object to the specified targetType.
            </summary>
            <param name="date">The date.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.DT"/> could be converted to the target type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.TicksToString(System.UInt32)">
            <summary>
            Converts the ticks to a DateTime string.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.ObjectToTicks(System.Object)">
            <summary>
            Objects to ticks.
            </summary>
            <param name="val">The value.</param>
            <returns>System.UInt32.</returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.DateTimeToString(System.DateTimeOffset)">
            <summary>
            Converts the DateTime value to the appropriate PlcOpen string.
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.TryParseToTicks(System.String,System.UInt32@)">
            <summary>
            Strings to ticks.
            </summary>
            <param name="s">The s.</param>
            <param name="ticks">The ticks.</param>
            <returns>System.UInt32.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.TryParse(System.String,TwinCAT.PlcOpen.DT@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.PlcOpen.DT"/> type.
            </summary>
            <param name="s">The s.</param>
            <param name="dt">The dt.</param>
            <returns><c>true</c> if the string could be parsed to <see cref="T:TwinCAT.PlcOpen.DT"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.GetBytes(TwinCAT.PlcOpen.DT)">
            <summary>
            Gets the bytes representation of the <see cref="T:TwinCAT.PlcOpen.DT"/> dataType.
            </summary>
            <param name="dt">The dt.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.ToTicks(System.DateTime)">
            <summary>
            Converts the DateTime into PlcOpen ticks (Seconds since 1970-01-01)
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDTConverter.GetBytes(System.DateTime)">
            <summary>
            Convert to byte array.
            </summary>
            <param name="dateTime">The date time.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="T:TwinCAT.PlcOpen.DT">
            <summary>
            PlcOpen DT (DATE_AND_TIME) datatype.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DT"/> class.
            </summary>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DT"/> class.
            </summary>
            <param name="dateValue">The date value in PlcOpen Ticks.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DT"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DT"/> class.
            </summary>
            <param name="date">The date.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.PlcOpen.DT"/> class.
            </summary>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="hour">The hour.</param>
            <param name="minute">The minute.</param>
            <param name="second">The second.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.ParseToTicks(System.String)">
            <summary>
            Parses the specified PlcOpen Date string to PlcOpen ticks.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.TryParse(System.String,TwinCAT.PlcOpen.DT@)">
            <summary>
            Tries to parse the specified string to a <see cref="T:TwinCAT.PlcOpen.DT"/> object.
            </summary>
            <param name="s">The s.</param>
            <param name="dt">The dt.</param>
            <returns><c>true</c> if the string could be parsed to <see cref="T:TwinCAT.PlcOpen.DT"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.DT.Parse(System.String)">
            <summary>
            Parses the specified string to the <see cref="T:TwinCAT.PlcOpen.DT"/> object.
            </summary>
            <param name="s">The s.</param>
            <returns>DT.</returns>
            <exception cref="T:System.FormatException">Cannot parse DT object!</exception>
        </member>
        <member name="P:TwinCAT.PlcOpen.DT.DateTime">
            <summary>
            Gets or the date value (only the Date part of the DateTime)
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:TwinCAT.PlcOpen.DT.Value">
            <summary>
            Returns the value of this <see cref="T:TwinCAT.PlcOpen.DateBase" /> as Managed base type (DateTime or Timespan)
            </summary>
            <value>The value.</value>
            <exclude/>
        </member>
        <member name="P:TwinCAT.PlcOpen.DT.IsDate">
            <summary>
            Gets a value indicating whether this instance is a date.
            </summary>
            <value><c>true</c> if this instance is date; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.PlcOpen.PlcOpenTODConverter">
            <summary>
            Converter class for the PLCOpen TOD (TimeOfDay) Data type.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.Create(System.TimeSpan)">
            <summary>
            Creates a <see cref="T:TwinCAT.PlcOpen.TOD"/> object.
            </summary>
            <param name="value">The value.</param>
            <returns>TOD.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.Create(System.UInt32)">
            <summary>
            Creates a <see cref="T:TwinCAT.PlcOpen.TOD"/> object.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>TOD.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.Create(System.Int64)">
            <summary>
            Creates a <see cref="T:TwinCAT.PlcOpen.TOD"/> object.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>TOD.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.TryConvert(System.Object,TwinCAT.PlcOpen.TOD@)">
            <summary>
            Tries to convert the source to a <see cref="T:TwinCAT.PlcOpen.TOD"/> object.
            </summary>
            <param name="source">The source.</param>
            <param name="timeOfDay">The time of day.</param>
            <returns><c>true</c> if the source object could be converted to <see cref="T:TwinCAT.PlcOpen.TOD"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.TryConvert(TwinCAT.PlcOpen.TOD,System.Type,System.Object@)">
            <summary>
            Tries to convert the <see cref="T:TwinCAT.PlcOpen.TOD"/> to the specified target type.
            </summary>
            <param name="date">The date.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.TOD"/> could be converted to the target type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.ToTimeSpan(System.UInt32)">
            <summary>
            Converts ticks to timespan
            </summary>
            <param name="ticks">The ticks.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.ToString(System.UInt32)">
            <summary>
            Converts the ticks to string
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.ToString(System.TimeSpan)">
            <summary>
            Converts the Timespan to string within the specific PlcOpen format.
            </summary>
            <param name="time">The time.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.ToTicks(System.TimeSpan)">
            <summary>
            Converts the specified TimeSpan to system ticks.
            </summary>
            <param name="span">The span.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.TryParseToTicks(System.String,System.UInt32@)">
            <summary>
            Converts the specified string TimeSpan representation (PlcOpen notation) to system Ticks.
            </summary>
            <param name="s">The s.</param>
            <param name="ticks">The ticks.</param>
            <returns>System.UInt32.</returns>
            <exception cref="T:System.FormatException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.TryParse(System.String,TwinCAT.PlcOpen.TOD@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.PlcOpen.TOD"/> type.
            </summary>
            <param name="s">The s.</param>
            <param name="tod">The tod.</param>
            <returns><c>true</c> if the string could be parsed to <see cref="T:TwinCAT.PlcOpen.TOD"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTODConverter.GetBytes(TwinCAT.PlcOpen.TOD)">
            <summary>
            Gets the bytes representation of the <see cref="T:TwinCAT.PlcOpen.TOD" /> dataType
            </summary>
            <param name="tod">The tod.</param>
            <returns>System.Byte[].</returns>
            <exclude/>
        </member>
        <member name="T:TwinCAT.PlcOpen.PlcOpenTimeConverter">
            <summary>
            Converter class for the PLC Open TIME Data Type
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.CreateTime(System.TimeSpan)">
            <summary>
            Creates a <see cref="T:TwinCAT.PlcOpen.TIME"/> object.
            </summary>
            <param name="value">The value.</param>
            <returns>TIME.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.CreateTime(System.UInt32)">
            <summary>
            Creates a <see cref="T:TwinCAT.PlcOpen.TIME"/> object.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>TIME.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.CreateLTime(System.UInt64)">
            <summary>
            Creates a <see cref="T:TwinCAT.PlcOpen.TIME"/> object.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>TIME.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.CreateLTime(System.TimeSpan)">
            <summary>
            Creates a <see cref="T:TwinCAT.PlcOpen.LTIME"/> object.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>LTIME.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.TryConvert(System.Object,TwinCAT.PlcOpen.TIME@)">
            <summary>
            Tries to convert the source object to <see cref="T:TwinCAT.PlcOpen.TIME"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="time">The time.</param>
            <returns><c>true</c> if the source object could be converted to <see cref="T:TwinCAT.PlcOpen.TIME"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.TryConvert(System.Object,TwinCAT.PlcOpen.LTIME@)">
            <summary>
            Tries to convert the source object to <see cref="T:TwinCAT.PlcOpen.TIME"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="time">The time.</param>
            <returns><c>true</c> if the source object could be converted to <see cref="T:TwinCAT.PlcOpen.LTIME"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.TryConvert(TwinCAT.PlcOpen.TimeBase,System.Type,System.Object@)">
            <summary>
            Tries to convert the <see cref="T:TwinCAT.PlcOpen.TIME"/> object to the specified targetType.
            </summary>
            <param name="time">The time.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.TimeBase"/> object could be converted to the targetType, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.TryConvert(TwinCAT.PlcOpen.LTimeBase,System.Type,System.Object@)">
            <summary>
            Tries to convert the <see cref="T:TwinCAT.PlcOpen.TIME"/> object to the specified targetType.
            </summary>
            <param name="time">The time.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetValue">The target value.</param>
            <returns><c>true</c> if the <see cref="T:TwinCAT.PlcOpen.LTimeBase"/> can be converted to the target type, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.ToMilliseconds(System.TimeSpan)">
            <summary>
            Converts Timespan to ticks (long) in PlcOpen format.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.GetBytes(TwinCAT.PlcOpen.TIME)">
            <summary>
            Convert to Bytes.
            </summary>
            <param name="time">The time.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.GetBytes(TwinCAT.PlcOpen.LTIME)">
            <summary>
            Convert to Bytes.
            </summary>
            <param name="time">The time.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.MillisecondsToTimeSpan(System.UInt32)">
            <summary>
            Converts PlcOpen ticks to TimeSpan
            </summary>
            <param name="milliseconds">Number of Milliseconds coded in an UInt32</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.NanosecondsToTimeSpan(System.UInt64)">
            <summary>
            Converts PlcOpen ticks to TimeSpan
            </summary>
            <param name="nanoseconds">The ticks.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.FromNanoseconds(System.UInt64,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Split the amount of nanoseconds to days, hours ....
            </summary>
            <param name="totalNanoseconds">The nanoseconds.</param>
            <param name="days">The days.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="msec">The milliseconds.</param>
            <param name="usec">The microseconds.</param>
            <param name="nsec">The nanoseconds.</param>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.ToTimeSpan(System.String)">
            <summary>
            Converts PlcOpen TIME string to .NET TimeSpan
            </summary>
            <param name="str">PlcOpen TIME string.</param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.TryParse(System.String,TwinCAT.PlcOpen.TIME@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.PlcOpen.TIME"/> type.
            </summary>
            <param name="s">The s.</param>
            <param name="time">The time.</param>
            <returns><c>true</c> if the string could be parsed to <see cref="T:TwinCAT.PlcOpen.TIME"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.TryParse(System.String,TwinCAT.PlcOpen.LTIME@)">
            <summary>
            Tries to parse the <see cref="T:TwinCAT.PlcOpen.TIME"/> type.
            </summary>
            <param name="s">The s.</param>
            <param name="time">The time.</param>
            <returns><c>true</c> if the string could be parsed to <see cref="T:TwinCAT.PlcOpen.LTIME"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.ToNanoseconds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the specified time to amount of total passed nanoseconds.
            </summary>
            <param name="days">The days.</param>
            <param name="hours">The hours.</param>
            <param name="minutes">The minutes.</param>
            <param name="seconds">The seconds.</param>
            <param name="milliseconds">The milliseconds.</param>
            <param name="microseconds">The microseconds.</param>
            <param name="nanoseconds">The nanoseconds.</param>
            <returns>Amount of total nanoseconds passed in that specified time.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenTimeConverter.ToNanoseconds(System.TimeSpan)">
            <summary>
            Converts Timespan to ticks (long) in PlcOpen format.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns></returns>
        </member>
        <member name="T:TwinCAT.PlcOpen.PlcOpenDateConverterBase">
            <summary>
            Converter class base for PLCOpen DT and DATE types.
            </summary>    /// <exclude/>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverterBase.ToTicks(System.DateTime,System.Boolean)">
            <summary>
            Converts DateTime to PlcOpen ticks.
            </summary>
            <param name="dateTime">The date.</param>
            <param name="dateOnly">if set to <c>true</c> [date only].</param>
            <returns>System.UInt32.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">dateTime</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">date - Date '{date}' is out ouf range!</exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverterBase.GetMarshalSize">
            <summary>
            Gets the Marshal Size of the <see cref="T:TwinCAT.PlcOpen.DATE"/> dataType.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverterBase.IsGapYear(System.UInt32)">
            <summary>
            Determines whether the specified year is a gap year.
            </summary>
            <param name="year">The year.</param>
            <returns><c>true</c> if is gap year otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverterBase.CountGapYears(System.UInt32,System.UInt32)">
            <summary>
            Counts the gap years between startYear and year (year not included)
            </summary>
            <param name="startYear">The start year.</param>
            <param name="year">The year.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverterBase.calcDateTime(System.UInt32)">
            <summary>
            Calculates the datetime form plcTicks.
            </summary>
            <param name="plcTicks">The date value.</param>
            <returns>DateTime.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">dateValue</exception>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverterBase.calcYearFromDays(System.UInt32,System.UInt32@)">
            <summary>
            Calculates the year from amount of days since 1970-1-1
            </summary>
            <param name="daysFrom1970">The days from1970.</param>
            <param name="daysLeft">The days left.</param>
            <returns>System.UInt32.</returns>
        </member>
        <member name="M:TwinCAT.PlcOpen.PlcOpenDateConverterBase.ToDateTime(System.UInt32)">
            <summary>
            Converts a PlcOpen Date to .NET DateTime
            </summary>
            <param name="plcTimeTicks">The Plc time Ticks (Ticks from 1/1/1970 in local time zone, Unix Time Seconds from 1.1.1970 in Local Time Zone).
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:TwinCAT.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TwinCAT.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TwinCAT.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TwinCAT.Resource.RpcMethodNotSupported_Message">
            <summary>
              Looks up a localized string similar to The RPC method &apos;{0}&apos; is not supported on symbol &apos;{1}!.
            </summary>
        </member>
        <member name="P:TwinCAT.Resource.RpcMethodNotSupported_Message2">
            <summary>
              Looks up a localized string similar to The RPC method with index &apos;{0}&apos; is not supported on symbol &apos;{1}!.
            </summary>
        </member>
        <member name="T:TwinCAT.RTPlatform">
            <summary>
            Describes the Realtime platform in the TwinCAT context.
            </summary>
            <exclude/>
        </member>
        <member name="F:TwinCAT.RTPlatform.Unknown">
            <summary>
            Unknown / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.Beckhoff">
            <summary>
            Beckhoff BC or Beckhoff BX (low end platforms without Windows)
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.WinCE">
            <summary>
            Windows CE Platform with TwinCAT realtime extensions
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.WinNT">
            <summary>
            Windows NT Derived platform with TwinCAT realtime extensions
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.Win32">
            <summary>
            Windows 32 Derived platform with TwinCAT realtime extensions
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.MacOS">
            <summary>
            MacOS
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.TcBSD">
            <summary>
            BSD (UNIX)
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.TcRTOS">
            <summary>
            TcRTOS (UNIX)
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.Linux">
            <summary>
            Common Linux
            </summary>
        </member>
        <member name="F:TwinCAT.RTPlatform.BSD">
            <summary>
            Common BSD
            </summary>
        </member>
        <member name="T:TwinCAT.RTPlatformConverter">
            <summary>
            Converter class for <see cref="T:TwinCAT.RTPlatform"/> objects.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.RTPlatformConverter.ToPlatformID(TwinCAT.RTPlatform)">
            <summary>
            Converts to <see cref="T:System.PlatformID"/>
            </summary>
            <param name="rtPlatform">The rt platform.</param>
            <returns>PlatformID.</returns>
        </member>
        <member name="M:TwinCAT.RTPlatformConverter.ToRTPlatform(System.PlatformID)">
            <summary>
            Converts to <see cref="T:TwinCAT.RTPlatform"/>
            </summary>
            <param name="id">The identifier.</param>
            <returns>RTPlatform.</returns>
        </member>
        <member name="M:TwinCAT.RTPlatformConverter.TryParseRTPlatform(System.String,TwinCAT.RTPlatform@)">
            <summary>
            Tries to parse the version string to Platform ID.
            </summary>
            <param name="versionString">The version string.</param>
            <param name="rtPlatform">The rt platform.</param>
            <returns><c>true</c> if the version string to the <see cref="T:TwinCAT.RTPlatform"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:TwinCAT.RTPlatformConverter.TryParsePlatform(System.String,System.PlatformID@)">
            <summary>
            Tries to Parse the string to <see cref="T:System.PlatformID"/>.
            </summary>
            <param name="versionString">The version string.</param>
            <param name="platform">The platform.</param>
            <returns><c>true</c> if the version string is parsed to the <see cref="T:System.PlatformID"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:TwinCAT.OperatingSystem2">
            <summary>
            Class enhancement for the <see cref="T:System.OperatingSystem"/> with Realtime extensions
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.OperatingSystem2.Empty">
            <summary>
            Returns an Empty <see cref="T:TwinCAT.OperatingSystem2"/>.
            </summary>
            <returns>OperatingSystem2.</returns>
        </member>
        <member name="M:TwinCAT.OperatingSystem2.#ctor(TwinCAT.RTPlatform,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.OperatingSystem2"/> class.
            </summary>
            <param name="rtosSystem">The rtos system.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:TwinCAT.OperatingSystem2.OperatingSystem">
            <summary>
            Gets the Base (native) Operating System without RT Extensions.
            </summary>
            <value>The operating system.</value>
        </member>
        <member name="P:TwinCAT.OperatingSystem2.Platform">
            <summary>
            Gets the platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:TwinCAT.OperatingSystem2.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:TwinCAT.OperatingSystem2.VersionString">
            <summary>
            Gets the version string.
            </summary>
            <value>The version string.</value>
        </member>
        <member name="M:TwinCAT.OperatingSystem2.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:TwinCAT.RTOperatingSystem">
            <summary>
            The <see cref="T:TwinCAT.RTOperatingSystem"/> class represents the realtime operating system.
            </summary>
            <remarks>In the Beckhoff world, the realtime operating system is represented by the combination of standard Operating System
            (one Windows version) + the TwinCAT Realtime extension.
            Lower end operating Systems (not basing on Windows) will be called "Beckhoff Native" and don't have the <see cref="P:TwinCAT.RTOperatingSystem.OS"/>
            property set.
            </remarks>
            <seealso cref="T:TwinCAT.RTPlatform"/>
            <exclude/>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.#ctor(TwinCAT.OperatingSystem2,System.Version)">
            <summary>
            Constructor for a Windows based operating system
            </summary>
            <param name="windowsSystem"></param>
            <param name="twinCATVersion"></param>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.#ctor(System.String,System.Version,System.Version)">
            <summary>
            Constructs the <see cref="T:TwinCAT.RTOperatingSystem"/>
            </summary>
            <param name="osName"></param>
            <param name="osVersion"></param>
            <param name="twinCATVersion"></param>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.#ctor(System.Version)">
            <summary>
            Constructor for a Beckhoff based operating system (BC, BX).
            </summary>
            <param name="twinCATVersion"></param>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.#ctor">
            <summary>
            Constructs the <see cref="T:TwinCAT.RTOperatingSystem"/> object.
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.Empty">
            <summary>
            Gets an Empty / Uninitialized object
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.Platform">
            <summary>
            Gets the <see cref="T:TwinCAT.RTPlatform"/> of the <see cref="T:TwinCAT.RTOperatingSystem"/>.
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.IsEmpty">
            <summary>
            Gets, whether the <see cref="T:TwinCAT.RTOperatingSystem"/> is empty or uninitialized.
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.RTOS">
            <summary>
            Gets the Realtime Operating System
            </summary>
            <value>The rtos.</value>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.OS">
            <summary>
            Gets the Windows Operating System (null if Beckhoff native)
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.TcVersion">
            <summary>
            Gets the TwinCAT Version number of the <see cref="T:TwinCAT.RTOperatingSystem"/>
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.HasOperatingSystemInfo">
            <summary>
            Gets, whether the <see cref="T:TwinCAT.RTOperatingSystem"/> is a Windows System
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.IsBeckhoffSystem">
            <summary>
            Determines, whether the Operating System is a Beckhoff System.
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.OSVersion">
            <summary>
            Gets the Operating System Version
            </summary>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.SetTwinCATVersion(System.Version)">
            <summary>
            Only for internal use
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.SetOperatingSystem(TwinCAT.OperatingSystem2)">
            <summary>
            Only for internal use
            </summary>
            <param name="os"></param>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.Equals(System.Object)">
            <summary>
            Equals (Criterion is the AmsNetID)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.op_Equality(TwinCAT.RTOperatingSystem,TwinCAT.RTOperatingSystem)">
            <summary>
            operator ==
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.op_Inequality(TwinCAT.RTOperatingSystem,TwinCAT.RTOperatingSystem)">
            <summary>
            Operator != (Criterion is the AmsNetId)
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.GetHashCode">
            <summary>
            Gets the Hash code (Criterion is the AmsNetId)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.Create(System.String,System.Version,System.Version)">
            <summary>
            Creates the <see cref="T:TwinCAT.RTOperatingSystem"/> object from parameteters.
            </summary>
            <param name="platform">The platform.</param>
            <param name="osVersion">The os version.</param>
            <param name="twinCATVersion">The twin CAT version.</param>
            <returns></returns>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.FullOSName">
            <summary>
            Gets the Full Operating System name
            </summary>
        </member>
        <member name="P:TwinCAT.RTOperatingSystem.ShortOSName">
            <summary>
            Gets the Short Operating System Name
            </summary>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.ToString">
            <summary>
            Transforms the <see cref="T:TwinCAT.RTOperatingSystem"/> object to string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TwinCAT.RTOperatingSystem.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks><list type="table">
            <listheader><term>Formatting</term><description>Description</description></listheader>
            <item><term>g</term><description>ShortOS Name</description></item>
            <item><term>t</term><description>TwinCAT Version (Short)</description></item>
            <item><term>tx</term><description>TwinCAT Version (Extended)</description></item>
            <item><term>o</term><description>Operating System short</description></item>
            <item><term>ox</term><description>Operating System extended</description></item>
            <item><term>x</term><description>Full String</description></item>
            <item><term>p</term><description>Platform</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:TwinCAT.OperatingSystemConverter">
            <summary>
            Converter/Parser for <see cref="T:TwinCAT.OperatingSystem2"/>/<see cref="T:System.OperatingSystem"/> classes.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.OperatingSystemConverter.ToShortVersionName(TwinCAT.OperatingSystem2)">
            <summary>
            Returns the Short Version Name of the Operating System (TwinCAT used name)
            </summary>
            <param name="os">The operating system.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.OperatingSystemConverter.ToShortVersionName(System.OperatingSystem)">
            <summary>
            Returns the Short Version Name of the Operating System (TwinCAT used name)
            </summary>
            <param name="os">The operating system.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwinCAT.OperatingSystemConverter.ParseShortVersionString(System.String,System.Version)">
            <summary>
            Parses the OS short version string to <see cref="T:TwinCAT.OperatingSystem2"/> object.
            </summary>
            <param name="osShortVersion">The short version string.</param>
            <param name="version">The version.</param>
            <returns>OperatingSystem2.</returns>
        </member>
        <member name="M:TwinCAT.OperatingSystemConverter.TryParseShortVersionString(System.String,System.Version,TwinCAT.OperatingSystem2@)">
            <summary>
            Parses the OS short version string to <see cref="T:TwinCAT.OperatingSystem2" /> object.
            </summary>
            <param name="osShortVersionString">The short version string.</param>
            <param name="version">The version.</param>
            <param name="os">The os.</param>
            <returns>OperatingSystem2.</returns>
        </member>
        <member name="F:TwinCAT.OperatingSystemConverter.s_windows10Versions">
            <summary>
            Dictionary of Windows OS ShortName (Major Version 10) --> Version number
            </summary>
        </member>
        <member name="T:TwinCAT.SessionConnectionStateChangedEventArgs">
            <summary>
            EventArguments for the ConnectionStatusChanged events.
            </summary>
            <seealso cref="T:TwinCAT.ConnectionStateChangedEventArgs" />
        </member>
        <member name="P:TwinCAT.SessionConnectionStateChangedEventArgs.Session">
            <summary>
            The session
            </summary>
        </member>
        <member name="P:TwinCAT.SessionConnectionStateChangedEventArgs.Connection">
            <summary>
            The connection
            </summary>
        </member>
        <member name="M:TwinCAT.SessionConnectionStateChangedEventArgs.#ctor(TwinCAT.ConnectionStateChangedReason,TwinCAT.ConnectionState,TwinCAT.ConnectionState,TwinCAT.ISession,TwinCAT.IConnection,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionConnectionStateChangedEventArgs"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="newState">The new state.</param>
            <param name="oldState">The old state.</param>
            <param name="session">The session.</param>
            <param name="connection">The connection.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:TwinCAT.SessionConnectionStateChangedEventArgs.#ctor(TwinCAT.ConnectionStateChangedReason,TwinCAT.ConnectionState,TwinCAT.ConnectionState,TwinCAT.ISession,TwinCAT.IConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.SessionConnectionStateChangedEventArgs"/> class.
            </summary>
            <param name="reason">The reason.</param>
            <param name="newState">The new state.</param>
            <param name="oldState">The old state.</param>
            <param name="session">The session.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="T:TwinCAT.ISessionSettings">
            <summary>
            Interface ISessionSettings
            </summary>
            <exclude/>
        </member>
        <member name="T:TwinCAT.ISession">
            <summary>
            Interface ISession
            </summary>
        </member>
        <member name="P:TwinCAT.ISession.Provider">
            <summary>
            Gets the Session Provider
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:TwinCAT.ISession.AddressSpecifier">
            <summary>
            Gets the communication endpoint address string representation.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:TwinCAT.ISession.Id">
            <summary>
            Gets the Session Id
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:TwinCAT.ISession.IsConnected">
            <summary>
            Gets a value indicating whether the session is connected.
            </summary>
            <value><c>true</c> if session is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.ISession.Connection">
            <summary>
            Gets the Connection object.
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.IConnection"/> object is established by the <see cref="T:TwinCAT.ISession"/> via <see cref="M:TwinCAT.ISession.Connect"/> and is valid
            until the <see cref="M:TwinCAT.ISession.Disconnect"/> method or the Dispose method is called. Any possible resurrections after communication
            losses will be done transparently under the hood of the <see cref="T:TwinCAT.IConnection"/> so that the <see cref="T:TwinCAT.IConnection"/> 
            instance and <see cref="T:TwinCAT.ISession"/> instance.
            </remarks>
            <value>The connection.</value>
        </member>
        <member name="M:TwinCAT.ISession.Connect">
            <summary>
            Connects the session and returns the established <see cref="T:TwinCAT.IConnection"/> object.
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.IConnection"/> will be valid until the <see cref="T:TwinCAT.ISession"/> is disconnected via
            the <see cref="M:TwinCAT.ISession.Disconnect"/> method or the Dispose method is called. Any possible resurrections after communication
            losses will be done transparently within the <see cref="T:TwinCAT.IConnection"/> so that the <see cref="T:TwinCAT.IConnection"/> instance and <see cref="T:TwinCAT.ISession"/> instance
            remains.
            </remarks>
            <returns>The <see cref="T:TwinCAT.IConnection"/> object.</returns>
        </member>
        <member name="M:TwinCAT.ISession.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects the session and returns the established <see cref="T:TwinCAT.IConnection"/> object.
            </summary>
            <remarks>
            The <see cref="T:TwinCAT.IConnection"/> will be valid until the <see cref="T:TwinCAT.ISession"/> is disconnected via
            the <see cref="M:TwinCAT.ISession.Disconnect"/> method or the Dispose method is called. Any possible resurrections after communication
            losses will be done transparently within the <see cref="T:TwinCAT.IConnection"/> so that the <see cref="T:TwinCAT.IConnection"/> instance and <see cref="T:TwinCAT.ISession"/> instance
            remains.
            </remarks>
            <returns>The <see cref="T:TwinCAT.IConnection"/> object.</returns>
        </member>
        <member name="M:TwinCAT.ISession.Disconnect">
            <summary>
            Disconnects the <see cref="T:TwinCAT.ISession"/>
            </summary>
            <remarks>Disposes also the <see cref="T:TwinCAT.IConnection"/>.</remarks>
            <returns><c>true</c> if Session was disconnected, <c>false</c> if the session was already closed.</returns>
        </member>
        <member name="M:TwinCAT.ISession.Close">
            <summary>
            Closes this <see cref="T:TwinCAT.ISession" />
            </summary>
            <remarks>Closes also the <see cref="T:TwinCAT.IConnection" />.</remarks>
        </member>
        <member name="P:TwinCAT.ISession.EstablishedAt">
            <summary>
            Gets the UTC time when the session was established.
            </summary>
            <value>The session established at.</value>
        </member>
        <member name="M:TwinCAT.ISession.EnsureConnection">
            <summary>
            Ensures, that the <see cref="T:TwinCAT.ISession"/> is connected and returns the <see cref="T:TwinCAT.IConnection"/> object.
            </summary>
            <remarks>If the session is actually not connected an exception will be thrown.</remarks>
            <returns>IConnection.</returns>
        </member>
        <member name="T:TwinCAT.ISessionProvider">
            <summary>
            Interface ISessionProvider
            </summary>
            <remarks>Interface for Supporting Session / Communication providers
            </remarks>
        </member>
        <member name="M:TwinCAT.ISessionProvider.Create(System.Object,TwinCAT.ISessionSettings)">
            <summary>
            Creates the Session with address and communication settings.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The settings.</param>
            <returns>ISession.</returns>
        </member>
        <member name="P:TwinCAT.ISessionProvider.Name">
            <summary>
            Gets the name of the SessionProvider
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TwinCAT.ISessionProvider.Capabilities">
            <summary>
            Gets the capabilities.
            </summary>
            <value>The capabilities.</value>
        </member>
        <member name="T:TwinCAT.ISessionProvider`3">
            <summary>
            Generic ISessionProvider interface
            </summary>
            <typeparam name="TSession">Session type</typeparam>
            <typeparam name="TAddress">Address specifier</typeparam>
            <typeparam name="TSettings">Communication settings type</typeparam>
            <seealso cref="T:TwinCAT.ISessionProvider" />
        </member>
        <member name="M:TwinCAT.ISessionProvider`3.Create(`1,`2)">
            <summary>
            Creates the Session with specified address and communication settings.
            </summary>
            <param name="address">The address.</param>
            <param name="settings">The communicationSettings.</param>
            <returns>S.</returns>
        </member>
        <member name="T:TwinCAT.SessionProviderCapabilities">
            <summary>
            Enum SessionProviderCapabilities
            </summary>
            <Exclude/>
        </member>
        <member name="F:TwinCAT.SessionProviderCapabilities.DataTypeSupport">
            <summary>
            Supports DataTypes
            </summary>
        </member>
        <member name="F:TwinCAT.SessionProviderCapabilities.SymbolBrowsing">
            <summary>
            Supports Symbol Browsing
            </summary>
        </member>
        <member name="F:TwinCAT.SessionProviderCapabilities.ValueRead">
            <summary>
            Supports VAlue Read
            </summary>
        </member>
        <member name="F:TwinCAT.SessionProviderCapabilities.ValueWrite">
            <summary>
            Support Value Write
            </summary>
        </member>
        <member name="F:TwinCAT.SessionProviderCapabilities.ValueNotifications">
            <summary>
            Supports Value changed Notifications
            </summary>
        </member>
        <member name="F:TwinCAT.SessionProviderCapabilities.None">
            <summary>
            Uninitilialized / None
            </summary>
        </member>
        <member name="F:TwinCAT.SessionProviderCapabilities.Mask_All">
            <summary>
            All Capabilities active
            </summary>
        </member>
        <member name="T:TwinCAT.ValueAccess.ValueUpdateMode">
            <summary>
            Value Update Mode.
            </summary>
            <remarks>
            <list type="table">
            <listheader><term>Mode</term><description>Description</description></listheader>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Immediately"/></term><description>Writes the values of this DynamicValue instantly when setting its value or the value
            of its child members/elements.</description></item>
            <item><term><see cref="F:TwinCAT.ValueAccess.ValueUpdateMode.Triggered"/></term><description>Caches internally the value of this DynamicValue until the DynamicValue.Write method is called. This reduces
            ADS rountrips, if one or more member/element values should be changed. Furthermore the write on the destination system happens
            consistently in one ADS Write operation, which could be important for dependent properties/members/elements.</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueUpdateMode.None">
            <summary>
            No automatic Value Update / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueUpdateMode.Immediately">
            <summary>
            Update Value immediately on property set access.
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueUpdateMode.Triggered">
            <summary>
            Triggers the ValueUpdate explicitly
            </summary>
        </member>
        <member name="T:TwinCAT.ValueAccess.ValueAccessMode">
            <summary>
            Enum ValueAccessMethod
            </summary>
            <remarks>
            <list type="table">
            <listheader><term>Mode</term><description>Description</description></listheader>
                <item><term><see cref="F:TwinCAT.ValueAccess.ValueAccessMode.None"/></term><description>None/Uninitialized. No Valid mode.</description></item>
                <item><term><see cref="F:TwinCAT.ValueAccess.ValueAccessMode.IndexGroupOffset"/></term><description>Communicates over IndexGroup/IndexOffset only. This is the most direct/efficient access into the Process image. The advantage is that, the symbol
                access is done via 1 ADS round trip. Disadvantages are that not all Symbols can be accessed via IG/IO (e.g. References) and IndexOffsets could be invalid after
                online changes / PlcProgram downloads. Detection of these events and following invalidation of all changed symbols need to be done within the user application.</description></item>
                <item><term><see cref="F:TwinCAT.ValueAccess.ValueAccessMode.SymbolicByHandle"/></term><description>The Symbolic-only mode is the most safe mode to use but needs more time than the <see cref="F:TwinCAT.ValueAccess.ValueAccessMode.IndexGroupOffset"/>. It could
                need up to 3 ADS round trips (create handle, access value, close handle) but is not influenced by online changes or / plcProgram downloads.</description></item>
                <item><term><see cref="F:TwinCAT.ValueAccess.ValueAccessMode.IndexGroupOffsetPreferred"/></term><description>This is a mixed access mode. For symbols, where it is possible it uses the IndexGroup/IndexOffset. For others it chooses
                the <see cref="F:TwinCAT.ValueAccess.ValueAccessMode.SymbolicByHandle"/> access.</description></item>
                <item><term><see cref="F:TwinCAT.ValueAccess.ValueAccessMode.Default"/></term><description>The Default-Mode setting if no other <see cref="T:TwinCAT.ValueAccess.ValueAccessMode"/> is specified. This is set to <see cref="F:TwinCAT.ValueAccess.ValueAccessMode.SymbolicByHandle"/>.</description></item>
            </list>
            </remarks>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessMode.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessMode.IndexGroupOffset">
            <summary>
            Value access via Index Group and Offset Only
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessMode.SymbolicByHandle">
            <summary>
            Symbolic access via Instance Path only.
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessMode.Symbolic">
            <exclude/>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessMode.IndexGroupOffsetPreferred">
            <summary>
            Uses IndexGroup IndexOffset Preferred (and Symbolic for Dereferenced Pointers / References)
            </summary>
            <remarks>
            By standard this uses IndexGroup/IndexOffset. For Symbols that are dereferenced (Pointers/Referenced) the
            Symbol method is chosen.
            </remarks>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessMode.InstancePath">
            <summary>
            Access by symbolic instance path.
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueAccessMode.Default">
            <summary>
            The Default access mode (<see cref="F:TwinCAT.ValueAccess.ValueAccessMode.SymbolicByHandle"/>)
            </summary>
        </member>
        <member name="T:TwinCAT.ValueAccess.ValueCreationModes">
            <summary>
            Creation mode for Values 
            </summary>
            <remarks>
            This setting is used by the ValueFactory/ to create Read values.
            In default primitive mode all values will be transferred to Primitive .NET Symbols if possible. E.g
            PlcOpen.TIME --> TimeSpan, IEnumValue --> .NET Primitives. They won't be wrapped into 
            </remarks>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueCreationModes.None">
            <summary>
            None / Uninitialized Mask
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueCreationModes.Primitives">
            <summary>
            Convert to .NET Primitives, wherever possible.
            </summary>
            <remarks>If not set, Primitive Values will be encapsulated in full <see cref="T:TwinCAT.TypeSystem.IValue"/> metadata.</remarks>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueCreationModes.Enums">
            <summary>
            Use IEnumValue on EnumTypes instead of .NET Primitives
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueCreationModes.FullDynamics">
            <summary>
            Wraps all Primitives also in IValue Objects
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueCreationModes.PlcOpenTypes">
            <summary>
            Use PlcOpen Times (TIME, LTIME, DT, TOD, DATETIME) instead of .NET Primitives DateTime and TimeSpan
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.ValueCreationModes.Default">
            <summary>
            Default settings for the value creation mode (Translate to Primitives)
            </summary>
        </member>
        <member name="T:TwinCAT.ValueAccess.SymbolNotificationTypes">
            <summary>
            Specifies the Notification type of ADS Notifications
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.SymbolNotificationTypes.None">
            <summary>
            None / Uninitialized
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.SymbolNotificationTypes.Value">
            <summary>
            ValueChanged notifications
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.SymbolNotificationTypes.RawValue">
            <summary>
            RawValueChanged notifications
            </summary>
        </member>
        <member name="F:TwinCAT.ValueAccess.SymbolNotificationTypes.Both">
            <summary>
            ValueChanged + RawValueChanged notifications
            </summary>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorRawValue">
            <summary>
            Helper Interface to access Symbol Values as byte Arrays
            </summary>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.TryReadRaw(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Read a Symbol value as bytes.
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="readBuffer">Read buffer where to read the value.</param>
            <param name="timeStamp">The readtime snapshot</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.ReadRawAsync(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Read a Symbol value asynchronously as bytes .
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="readBuffer">Read buffer where to read the value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess"/> result contains the
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/>) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.TryReadArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads an array element value as bytes.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices specify which element to read.</param>
            <param name="readBuffer">ReadBuffer where to read the value.</param>
            <param name="timeStamp">The readtime snapshot</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.ReadArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Reads the array element value as bytes asynchronously.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices, which specify the element to read.</param>
            <param name="readBuffer">Read buffer where to read the data</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadArrayElementRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess" /> result contains the
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value" />) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.TryWriteRaw(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes the symbol value from source memory location to the ADS Device.
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="writeBuffer">The write buffer containing the data to write.</param>
            <param name="timeStamp">The write timestamp.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.WriteRawAsync(TwinCAT.TypeSystem.ISymbol,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes the symbol value asynchronously from source memory location to the ADS Device.
            </summary>
            <param name="symbolInstance">The symbol instance.</param>
            <param name="writeBuffer">The write buffer containing the data to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> result contains the
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.TryWriteArrayElementRaw(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes an array element value from raw memory asynchronously to the ADS Device.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="writeBuffer">The write buffer containing the data to write.</param>
            <param name="timeStamp">Write time / timestamp</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRawValue.WriteArrayElementRawAsync(TwinCAT.TypeSystem.IArrayInstance,System.Int32[],System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Writes an array element value from raw memory asynchronously to the ADS Device.
            </summary>
            <param name="arrayInstance">The array instance.</param>
            <param name="indices">The indices of the array element.</param>
            <param name="writeBuffer">The write buffer containing the data to write (element value).</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'WriteRaw' operation. The <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> result contains the
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="P:TwinCAT.ValueAccess.IAccessorRawValue.ValueFactory">
            <summary>
            Gets the value factory
            </summary>
            <value>The value factory or null if only Raw Values only.</value>
        </member>
        <member name="P:TwinCAT.ValueAccess.IAccessorRawValue.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorConnection">
            <summary>
            Helper Interface to access Symbol Values as byte Arrays
            </summary>
            <exclude/>
        </member>
        <member name="P:TwinCAT.ValueAccess.IAccessorConnection.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorNotification">
            <summary>
            Value Accessor interface for Notification handling
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorNotification.OnRegisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes,TwinCAT.Ads.INotificationSettings)">
            <summary>
            Adds the symbol value changed handler.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorNotification.OnUnregisterNotification(TwinCAT.TypeSystem.ISymbol,TwinCAT.ValueAccess.SymbolNotificationTypes)">
            <summary>
            Removes the symbol value changed handler.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="type">Type of Notification (Value, Raw or Both)</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorNotification.TryGetNotificationSettings(TwinCAT.TypeSystem.ISymbol,TwinCAT.Ads.INotificationSettings@)">
            <summary>
            Tries to get the current Notification Settings for the specified Symbol
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="settings">The settings.</param>
            <returns>true, if already a notification for this symbol is registered. False if not.</returns>
        </member>
        <member name="P:TwinCAT.ValueAccess.IAccessorNotification.DefaultNotificationSettings">
            <summary>
            Gets/Sets the default notification settings.
            </summary>
            <value>The default notification settings.</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorValueFactory">
            <summary>
            Factory interfaces for Accessor implementations.
            </summary>
            <remarks>This interface is used by a custom Accessor class to create Value objects from memory representations.</remarks>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueFactory.CreateValue(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IValue,System.DateTimeOffset)">
            <summary>
            Creates the  symbols value from raw memory data.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="sourceData">The data.</param>
            <param name="parent">The parent value</param>
            <param name="timeStamp">The time stamp.</param>
            <returns>System.Object.</returns>
            <remarks>The <paramref name="parent" /> argument is used to organize values in hierarchies, equally to the corresponding symbol/instance trees.</remarks>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueFactory.CreatePrimitiveValue(TwinCAT.TypeSystem.ISymbol,System.Memory{System.Byte},TwinCAT.TypeSystem.IValue,System.DateTimeOffset)">
            <summary>
            Creates a primitive value, independent of any settings.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="sourceData">The source data.</param>
            <param name="parent">The parent.</param>
            <param name="timeStamp">The time stamp.</param>
            <returns>A primitive value.</returns>
        </member>
        <member name="P:TwinCAT.ValueAccess.IAccessorValueFactory.DefaultValueEncoding">
            <summary>
            Gets the default value encoding.
            </summary>
            <value>The default value encoding.</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorValueFactory2">
            <summary>
            Interface IAccessorValueFactory2
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.IAccessorValueFactory" />
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueFactory2.SetValueAccessor(TwinCAT.ValueAccess.IAccessorRawValue)">
            <summary>
            Sets the value accessor
            </summary>
            <param name="accessor">The accessor.</param>
        </member>
        <member name="P:TwinCAT.ValueAccess.IAccessorValueFactory2.ValueAccessor">
            <summary>
            Gets the value accessor.
            </summary>
            <value>The value accessor or NULL</value>
            <remarks>
            The Value accessor can be used for the possibility to Read Values on ValueAccess on the Fly.
            E.g. when dereferencing ReferenceTypes on property access.
            The 'on-the-fly' access is optional and doesn't have to be supported, but the DynamicValueFactory can use if available.
            </remarks>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorRpc">
            <summary>
            Remote procedure call interface for Accessors.
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRpc.TryInvokeRpcMethod(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Object[]@,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Invokes the RPC Method and returns its <paramref name="returnValue" />.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters spec.</param>
            <param name="retSpec">The ret spec.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="returnValue">The return value (Returns Null vor 'void' RpcMethods)</param>
            <param name="timeStamp">The invoke time snapshot.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorRpc.InvokeRpcMethodAsync(TwinCAT.TypeSystem.IInstance,TwinCAT.TypeSystem.IRpcMethod,System.Object[],TwinCAT.TypeSystem.AnyTypeSpecifier[],TwinCAT.TypeSystem.AnyTypeSpecifier,System.Threading.CancellationToken)">
            <summary>
            Invokes the RPC Method asynchronously and returns its RPC Return value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="method">The instance method to call.</param>
            <param name="inParameters">The method arguments.</param>
            <param name="outParametersSpec">The out parameters spec.</param>
            <param name="retSpec">The ret spec.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'InvokeRpcMethod' operation. The <see cref="T:TwinCAT.ValueAccess.ResultRpcMethodAccess" /> parameter contains the return value (optionally)
            (<see cref="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue" />) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode" /> after execution.</returns>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorValueAny">
            <summary>
            Interface to access symbols with the 'AnyType' concept (Primitive types).
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueAny.TryReadAnyValue(TwinCAT.TypeSystem.ISymbol,System.Type,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to read the value of the symbol and returns the value as instance marshalled to the specified type.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">The value type.</param>
            <param name="value">The value.</param>
            <param name="timeStamp">The timestamp of the read operation.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueAny.ReadAnyValueAsync(TwinCAT.TypeSystem.ISymbol,System.Type,System.Threading.CancellationToken)">
            <summary>
            Reads any value asynchronous.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueType">Type of the value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'ReadAnyValue' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> parameter contains the value.
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/>) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueAny.TryUpdateAnyValue(TwinCAT.TypeSystem.ISymbol,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads the value of the symbol and updates the referenced value object with that data
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="timeStamp">The time stamp of the Update (read) operation..</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueAny.UpdateAnyValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Reads the value of the symbol and returns an updated value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UpdateAnyValue' operation. The <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> parameter contains the value to be updated
            (<see cref="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value"/>) and the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueAny.TryWriteAnyValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes the value object to the ADS Devices symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value object.</param>
            <param name="timeStamp">The time stamp of the write access..</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValueAny.WriteAnyValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Writes the value object asynchronously to the ADS Devices Symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="valueObject">The value to write.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>A task that represents the asynchronous 'UpdateAnyValue' operation. The <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> parameter contains 
            the <see cref="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode"/> after execution.
            </returns>
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultAccess">
            <summary>
            Result class for an asynchronous access operation.
            </summary>
            <remarks>This result is independent of any used protocol and is used by the different protocol providers (ADS, OPC, IOT etc.)
            </remarks>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultAccess.#ctor(System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" /> struct.
            </summary>
            <param name="errorResult">The result code of the operation.</param>
            <param name="time">The timestamp of the operation.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultAccess.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultAccess"/> class.
            </summary>
            <param name="errorResult">The result code of the communication access..</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultAccess.ErrorCode">
            <summary>
            The ErrorCode of the communication access
            </summary>
            <remarks>
            A value of '0' represents success.
            </remarks>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultAccess.InvokeId">
            <summary>
            Gets the invoke identifier (optionally) or 0
            </summary>
            <value>The invoke identifier.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultAccess.SetError(System.Int32)">
            <summary>
            Sets the error to this <see cref="T:TwinCAT.ValueAccess.ResultAccess"/> object.
            </summary>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="F:TwinCAT.ValueAccess.ResultAccess._time">
            <summary>
            The time stamp.
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultAccess.DateTime">
            <summary>
            The Timestamp / the date time of the communication access.
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultAccess.Succeeded">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.ValueAccess.ResultAccess"/> represents a succeeded access.
            </summary>
            <value><c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultAccess.Failed">
            <summary>
            Gets a value indicating whether this <see cref="T:TwinCAT.ValueAccess.ResultAccess"/> represents a failed access.
            </summary>
            <value><c>true</c> if failed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultReadValueAccess`1">
            <summary>
            Result object of an asynchronous read of a specific value of type <typeparamref name="T" />.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultAccess" />
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <seealso cref="T:TwinCAT.ValueAccess.ResultAccess" />
        </member>
        <member name="F:TwinCAT.ValueAccess.ResultReadValueAccess`1._value">
            <summary>
            The value
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultReadValueAccess`1.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess`1.#ctor(`0,System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="timeStamp">The read time stamp.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess`1.#ctor(`0,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess`1.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1"/> class.
            </summary>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultReadValueAccess2`2">
            <summary>
            Result object of an asynchronous read.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultAccess" />
            </summary>
            <typeparam name="I">The SymbolID / AddressInformation bound to the value.</typeparam>
            <typeparam name="V">The type of the read Value.</typeparam>
            <seealso cref="T:TwinCAT.ValueAccess.ResultAccess" />
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultReadValueAccess2`2.Source">
            <summary>
            Gets the source of the value (symbolic specifier/Address).
            </summary>
            <value>The source.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess2`2.#ctor(`0,`1,System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> struct.
            </summary>
            <param name="source">The source identifier.</param>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="timeStamp">The read time stamp.</param>
            <param name="invokeId">The request invoke identifier.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess2`2.#ctor(`0,`1,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1"/> class.
            </summary>
            <param name="source">The source identifier.</param>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The request invoke identifier or 0 if not supported.</param>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess2`2.#ctor(`0,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1"/> class.
            </summary>
            <param name="source">The source identifier.</param>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The request invoke identifier or 0 if not supported.</param>
            <exclude/>
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultReadValueAccess">
            <summary>
            Asynchronous read access result returning an untyped Value object type 'object'.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultAccess" />
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.ResultAccess" />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess.#ctor(System.Object,System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="errorCode">The error result.</param>
            <param name="timeStamp">The read time stamp.</param>
            <param name="invokeId">The request invoke identifier.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess.#ctor(System.Object,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="errorCode">The error result.</param>
            <param name="invokeId">The request invoke identifier or 0 if not supported.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadValueAccess.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess"/> class.
            </summary>
            <param name="errorCode">The error result.</param>
            <param name="invokeId">The request invoke identifier or 0 if not supported.</param>
            <exclude />
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultHandleAccess">
            <summary>
            Asynchronous read access result returning an variable handle.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultAccess" />
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.ResultAccess" />
        </member>
        <member name="F:TwinCAT.ValueAccess.ResultHandleAccess._handle">
            <summary>
            The handle
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultHandleAccess.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultHandleAccess.#ctor(System.UInt32,System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultHandleAccess" /> struct.
            </summary>
            <param name="handle">The Handle.</param>
            <param name="errorResult">The error result.</param>
            <param name="timeStamp">The read time stamp.</param>
            <param name="invokeId">The request invoke identifier or 0 if not supported.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultHandleAccess.#ctor(System.UInt32,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultHandleAccess"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The request invoke identifier or 0 if not supported.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultHandleAccess.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultHandleAccess"/> class.
            </summary>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The request invoke identifier or 0 if not supported.</param>
            <exclude />
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultReadDynamicValueAccess">
            <summary>
            Asynchronous read access result returning an Dynamic value object (<see cref="T:TwinCAT.TypeSystem.IDynamicValue"/>.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1" />
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1" />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadDynamicValueAccess.#ctor(TwinCAT.TypeSystem.IDynamicValue,System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="timeStamp">The read time stamp.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadDynamicValueAccess.#ctor(TwinCAT.TypeSystem.IDynamicValue,System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadDynamicValueAccess"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadDynamicValueAccess.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadDynamicValueAccess"/> class.
            </summary>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude />
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultReadRawAccess">
            <summary>
            Asynchronous read access result object, reading raw (byte[]) data into memory locations.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1" />
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.ResultReadValueAccess`1" />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadRawAccess.#ctor(System.Memory{System.Byte},System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" /> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="timeStamp">The read time stamp.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadRawAccess.#ctor(System.Memory{System.Byte},System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultReadRawAccess.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultReadRawAccess"/> class.
            </summary>
            <param name="errorResult">The error result.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
            <exclude />
        </member>
        <member name="F:TwinCAT.ValueAccess.ResultReadRawAccess.s_empty">
            <summary>
            The Empty Result.
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultReadRawAccess.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.Ads.ResultAnyValue"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultWriteAccess">
            <summary>
            Asynchronous write access result class.
            </summary>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultWriteAccess.#ctor(System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess" /> struct.
            </summary>
            <param name="errorResult">The error result.</param>
            <param name="timeStamp">The time stamp.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultWriteAccess.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> class.
            </summary>
            <param name="errorResult">The result code of the communication access.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
        </member>
        <member name="F:TwinCAT.ValueAccess.ResultWriteAccess.s_empty">
            <summary>
            The Empty Result.
            </summary>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultWriteAccess.Empty">
            <summary>
            Gets the empty <see cref="T:TwinCAT.ValueAccess.ResultWriteAccess"/> object.
            </summary>
            <value>The empty / unprocessed result.</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.ResultRpcMethodAccess">
            <summary>
            Asynchronous Invoke RPC Method result class.
            Implements the <see cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" />
            </summary>
            <seealso cref="T:TwinCAT.ValueAccess.ResultReadValueAccess" />
        </member>
        <member name="M:TwinCAT.ValueAccess.ResultRpcMethodAccess.#ctor(System.Object,System.Object[],System.Int32,System.DateTimeOffset,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwinCAT.Ads.ResultRpcMethod" /> struct.
            </summary>
            <param name="returnValue">The value.</param>
            <param name="outParameters">The out parameters.</param>
            <param name="errorCode">The error code.</param>
            <param name="timeStamp">The time stamp.</param>
            <param name="invokeId">The ADS request invoke identifier.</param>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.OutParameters">
            <summary>
            Gets the out parameters.
            </summary>
            <value>The out parameters.</value>
        </member>
        <member name="P:TwinCAT.ValueAccess.ResultRpcMethodAccess.ReturnValue">
            <summary>
            Gets the return value of the RpcMethod (optionally).
            </summary>
            <value>The return value or NULL</value>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorValue">
            <summary>
            Interface for Accessing Symbol Values
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValue.TryReadValue(TwinCAT.TypeSystem.ISymbol,System.Object@,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to read the symbols value as dynamic value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="utcReadTime">The UTC read time.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValue.ReadValue(TwinCAT.TypeSystem.ISymbol,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Reads the value of the specified Symbol as dynamic value
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="utcReadTime">The UTC read time.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValue.TryWriteValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to write the Value
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="utcWriteTime">The UTC write time.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValue.WriteValue(TwinCAT.TypeSystem.ISymbol,System.Object,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Writes the specified value to the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="utcWriteTime">The UTC write time.</param>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValue.ReadValueAsync(TwinCAT.TypeSystem.ISymbol,System.Threading.CancellationToken)">
            <summary>
            Tries to read the symbols value as dynamic value.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;ReadValueResult&gt;.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorValue.WriteValueAsync(TwinCAT.TypeSystem.ISymbol,System.Object,System.Threading.CancellationToken)">
            <summary>
            Tries to write the Value
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="T:TwinCAT.ValueAccess.IAccessorDynamicValue">
            <summary>
            Accessor interface for dynamic values (Read/Write Access for Dynamic Values).
            </summary>
            <exclude/>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorDynamicValue.TryWriteValue(TwinCAT.TypeSystem.IDynamicValue,System.Nullable{System.DateTimeOffset}@)">
            <summary>
            Tries to write the value.
            </summary>
            <param name="value">The value.</param>
            <param name="utcWriteTime">The UTC write time.</param>
            <returns>Error code. 0 represents succeed.</returns>
        </member>
        <member name="M:TwinCAT.ValueAccess.IAccessorDynamicValue.WriteValueAsync(TwinCAT.TypeSystem.IDynamicValue,System.Threading.CancellationToken)">
            <summary>
            Writes the value asynchronous.
            </summary>
            <param name="value">The value.</param>
            <param name="cancel">The cancellation token.</param>
            <returns>Task&lt;WriteValueResult&gt;.</returns>
        </member>
        <member name="T:System.Net.IPNetwork">
            <summary>
            Class IPNetwork.
            </summary>
            <remarks>This class is used to specify subnets with the CIDR Notation,
            e.g. 192.168.2.0/24.</remarks>
            <exclude/>
        </member>
        <member name="M:System.Net.IPNetwork.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Net.IPNetwork"/> class.
            </summary>
            <param name="cidrPrefix">The Network Prefix </param>
            <param name="cidrSuffix">The suffix.</param>
        </member>
        <member name="M:System.Net.IPNetwork.TryParse(System.String,System.Net.IPNetwork@)">
            <summary>
            Parses the specified CIDR (Classless Inter-Domain Routing) string
            </summary>
            <param name="cidr">The cidr.</param>
            <param name="ipNetwork">The ip network.</param>
            <returns><c>true</c> if the Network address could be parsed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Net.IPNetwork.Parse(System.String)">
            <summary>
            Parses the specified CIDR (Classless Inter-Domain Routing) string
            </summary>
            <param name="cidr">The cidr.</param>
            <returns>IPNetwork.</returns>
            <exception cref="T:System.FormatException">The CIDR string has wrong format!</exception>
        </member>
        <member name="P:System.Net.IPNetwork.SubNet">
            <summary>
            Gets the sub net.
            </summary>
            <value>The sub net.</value>
        </member>
        <member name="P:System.Net.IPNetwork.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:System.Net.IPNetwork.Mask">
            <summary>
            Gets the mask.
            </summary>
            <value>The mask.</value>
        </member>
        <member name="M:System.Net.IPNetwork.Contains(System.Net.IPAddress)">
            <summary>
            Determines whether the <see cref="T:System.Net.IPNetwork"/> contains the specified <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="address">The address.</param>
            <returns><c>true</c> if [contains] [the specified address]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Net.IPNetwork.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
    </members>
</doc>
